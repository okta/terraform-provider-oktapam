package sdkv2

import (
	"context"

	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"
	"github.com/okta/terraform-provider-oktapam/oktapam/logging"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func dataSourceResourceGroupProject() *schema.Resource {
	return &schema.Resource{
		Description: descriptions.SourceResourceGroupProject,
		ReadContext: dataSourceResourceGroupProjectFetch,
		Schema: map[string]*schema.Schema{
			attributes.ResourceGroup: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.ResourceGroupID,
			},
			attributes.ID: {
				Type:     schema.TypeString,
				Required: true,
				// Description is autogenerated
			},
			attributes.Name: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.Name,
			},
			attributes.Team: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.TeamName,
			},
			attributes.DeletedAt: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.DeletedAt,
			},
			attributes.GatewaySelector: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.GatewaySelector,
			},
			attributes.SSHCertificateType: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.SSHCertificateType,
			},
			attributes.AccountDiscovery: {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: descriptions.AccountDiscovery,
			},
		},
	}
}

func dataSourceResourceGroupProjectFetch(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := client.GetLocalClientFromMetadata(m)

	resourceGroupID := d.Get(attributes.ResourceGroup).(string)
	if resourceGroupID == "" {
		return diag.Errorf("%s cannot be blank", attributes.ResourceGroup)
	}
	id := d.Get(attributes.ID).(string)
	if id == "" {
		return diag.Errorf("%s cannot be blank", attributes.ID)
	}

	project, err := c.GetResourceGroupProject(ctx, resourceGroupID, id, false)
	if err != nil {
		return diag.FromErr(err)
	}

	if project != nil {
		d.SetId(*project.ID)
		for key, value := range project.ToResourceMap() {
			if err := d.Set(key, value); err != nil {
				diags = append(diags, diag.FromErr(err)...)
			}
		}
	} else {
		logging.Infof("project %s does not exist within resource group %s", id, resourceGroupID)
	}
	return diags
}
