package oktapam

import (
	"context"
	"fmt"

	"github.com/okta/terraform-provider-oktapam/oktapam/constants/errors"

	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func dataSourceResourceGroupServerEnrollmentToken() *schema.Resource {
	return &schema.Resource{
		Description: descriptions.SourceResourceGroupServerEnrollmentToken,
		ReadContext: dataSourceResourceGroupServerEnrollmentTokenFetch,
		Schema: map[string]*schema.Schema{
			attributes.ID: {
				Type:     schema.TypeString,
				Required: true,
				// Description is autogenerated
			},
			attributes.ResourceGroup: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.ResourceGroupID,
			},
			attributes.Project: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.ProjectID,
			},
			attributes.Token: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.Token,
			},
			attributes.IssuedAt: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.IssuedAt,
			},
			attributes.Description: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.Description,
			},
			attributes.CreatedByUser: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.CreatedByUser,
			},
		},
	}
}

func dataSourceResourceGroupServerEnrollmentTokenFetch(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getLocalClientFromMetadata(m)

	id, resourceGroupID, projectID, err := getRequiredResourceGroupServerEnrollmentTokenAttributes(d)
	if err != nil {
		return diag.FromErr(err)
	}

	token, err := c.GetResourceGroupServerEnrollmentToken(ctx, resourceGroupID, projectID, id)
	if err != nil {
		return diag.FromErr(err)
	}

	if token != nil {
		d.SetId(*token.ID)
		for key, value := range token.ToResourceMap() {
			if err := d.Set(key, value); err != nil {
				return diag.FromErr(err)
			}
		}
	} else {
		return diag.Errorf("%s %s does not exist", providerServerEnrollmentTokenKey, id)
	}

	return nil
}

func getRequiredResourceGroupServerEnrollmentTokenAttributes(d *schema.ResourceData) (string, string, string, error) {
	id := GetStringPtrFromResource(attributes.ID, d, false)
	if id == nil {
		return "", "", "", fmt.Errorf(errors.MissingAttributeError, attributes.ID)
	}

	resourceGroupID := GetStringPtrFromResource(attributes.ResourceGroup, d, false)
	if resourceGroupID == nil {
		return "", "", "", fmt.Errorf(errors.MissingAttributeError, attributes.ResourceGroup)
	}

	projectID := GetStringPtrFromResource(attributes.Project, d, false)
	if projectID == nil {
		return "", "", "", fmt.Errorf(errors.MissingAttributeError, attributes.Project)
	}

	return *id, *resourceGroupID, *projectID, nil
}
