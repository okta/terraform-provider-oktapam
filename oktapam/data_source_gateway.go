package oktapam

import (
	"context"
	"strconv"
	"time"

	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func dataSourceGateways() *schema.Resource {
	return &schema.Resource{
		Description: descriptions.SourceGateways,
		ReadContext: dataSourceGatewayRead,
		Schema: map[string]*schema.Schema{
			// Query parameter values
			attributes.Contains: {
				Type:        schema.TypeString,
				Optional:    true,
				Description: descriptions.FilterContains,
			},
			// Return value
			attributes.Gateways: {
				Type:        schema.TypeList,
				Computed:    true,
				Description: descriptions.SourceGateways,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						attributes.ID: {
							Type:     schema.TypeString,
							Computed: true,
							// Description is autogenerated
						},
						attributes.Name: {
							Type:        schema.TypeString,
							Computed:    true,
							Description: descriptions.Name,
						},
						attributes.AccessAddress: {
							Type:        schema.TypeString,
							Computed:    true,
							Description: descriptions.AccessAddress,
						},
						attributes.DefaultAddress: {
							Type:        schema.TypeString,
							Computed:    true,
							Description: descriptions.DefaultAddress,
						},
						attributes.Description: {
							Type:        schema.TypeString,
							Computed:    true,
							Description: descriptions.Description,
						},
						attributes.CloudProvider: {
							Type:        schema.TypeString,
							Computed:    true,
							Description: descriptions.CloudProvider,
						},
						attributes.RefuseConnections: {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: descriptions.RefuseConnections,
						},
						attributes.Labels: {
							Type: schema.TypeMap,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Computed:    true,
							Description: descriptions.Labels,
						},
					},
				},
			},
		},
	}
}

func dataSourceGatewayRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)
	parameters := client.ListGatewayParameters{}

	//Extract parameters
	if contains, ok := d.GetOk(attributes.Contains); ok {
		parameters.Contains = contains.(string)
	}

	gatewayList, err := c.ListGateways(ctx, parameters)
	if err != nil {
		return diag.FromErr(err)
	}
	gateways := make([]map[string]interface{}, len(gatewayList))
	for idx, token := range gatewayList {
		gateways[idx] = token.ToResourceMap()
	}
	if err := d.Set(attributes.Gateways, gateways); err != nil {
		return diag.FromErr(err)
	}

	d.SetId(strconv.FormatInt(time.Now().Unix(), 10))
	return nil
}
