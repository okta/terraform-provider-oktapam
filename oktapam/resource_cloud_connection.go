package oktapam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"
	"github.com/okta/terraform-provider-oktapam/oktapam/logging"
)

func resourceCloudConnection() *schema.Resource {
	return &schema.Resource{
		Description:   descriptions.ResourceCloudConnection,
		ReadContext:   resourceCloudConnectionRead,
		CreateContext: resourceCloudConnectionCreate,
		DeleteContext: resourceCloudConnectionDelete,
		UpdateContext: resourceCloudConnectionUpdate,
		Schema: map[string]*schema.Schema{
			attributes.ID: {
				Type:     schema.TypeString,
				Computed: true,
				// Description is autogenerated
			},
			attributes.CloudConnectionTeamID: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.Description,
			},
			attributes.Name: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.Name,
			},
			attributes.CloudConnectionProvider: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.CloudConnectionProvider,
			},
			attributes.CloudConnectionDetails: {
				Type:        schema.TypeSet,
				Description: descriptions.CloudConnectionDetails,
				Required:    true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						attributes.CloudConnectionAccountId: {
							Type:     schema.TypeString,
							Required: true,
						},
						attributes.CloudConnectionExternalId: {
							Type:     schema.TypeString,
							Required: true,
						},
						attributes.CloudConnectionRoleARN: {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func resourceCloudConnectionRead(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getLocalClientFromMetadata(m)
	name := d.Get(attributes.Name).(string)
	if name == "" {
		return diag.Errorf("%s cannot be blank", attributes.Name)
	}

	cloudConnection, err := c.GetCloudConnection(ctx, name, false)
	if err != nil {
		return diag.FromErr(err)
	}

	if cloudConnection != nil {
		d.SetId(*cloudConnection.ID)
		for key, value := range cloudConnection.ToResourceMap() {
			if err := d.Set(key, value); err != nil {
				return diag.FromErr(err)
			}
		}
	} else {
		logging.Infof("cloud connection %s does not exist", name)
	}
	return nil
}

func resourceCloudConnectionCreate(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getLocalClientFromMetadata(m)

	cloudConnection, diags := readCloudConnectionFromResource(d)
	if diags != nil {
		return diags
	}

	result, err := c.CreateCloudConnection(ctx, cloudConnection)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(*result.ID)

	return resourceCloudConnectionRead(ctx, d, m)
}

func resourceCloudConnectionUpdate(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getLocalClientFromMetadata(m)
	id := d.Id()
	if id == "" {
		return diag.Errorf("could not obtain resource group id from resource")
	}
	cloudConnection, diags := readCloudConnectionFromResource(d)
	if diags != nil {
		return diags
	}

	if err := c.UpdateCloudConnection(ctx, id, cloudConnection); err != nil {
		return diag.FromErr(err)
	}

	return resourceCloudConnectionRead(ctx, d, m)
}

func resourceCloudConnectionDelete(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := getLocalClientFromMetadata(m)
	id := d.Id()
	if err := c.DeleteCloudConnection(ctx, id); err != nil {
		diags = append(diags, diag.FromErr(err)...)
	} else {
		d.SetId("")
	}

	return diags
}

func readCloudConnectionFromResource(d *schema.ResourceData) (client.CloudConnection, diag.Diagnostics) {
	cloudConnection := client.CloudConnection{
		Name:     GetStringPtrFromResource(attributes.Name, d, true),
		Provider: GetStringPtrFromResource(attributes.CloudConnectionProvider, d, true),
		CloudConnectionDetails: &client.CloudConnectionDetails{
			AccountId:  GetStringPtrFromResource(attributes.CloudConnectionAccountId, d, true),
			ExternalId: GetStringPtrFromResource(attributes.CloudConnectionExternalId, d, true),
			RoleArn:    GetStringPtrFromResource(attributes.CloudConnectionRoleARN, d, true),
		},
	}

	return cloudConnection, nil
}
