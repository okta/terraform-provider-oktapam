package convert

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/int32validator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"

	"github.com/atko-pam/pam-sdk-go/client/pam"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// ResourceCheckoutSettingsModel could be autogenerated in the future.
type ResourceCheckoutSettingsModel struct {
	CheckoutRequired          types.Bool  `tfsdk:"checkout_required"`
	CheckoutDurationInSeconds types.Int32 `tfsdk:"checkout_duration_in_seconds"`
	IncludeList               types.List  `tfsdk:"include_list"`
	ExcludeList               types.List  `tfsdk:"exclude_list"`
}

func ResourceCheckoutSettingsSchemaAttributes(mergeIntoMap map[string]schema.Attribute) map[string]schema.Attribute {
	myMap := map[string]schema.Attribute{
		"checkout_duration_in_seconds": schema.Int32Attribute{
			Required:    true,
			Description: descriptions.CheckoutDurationInSeconds,
			Validators: []validator.Int32{
				int32validator.Between(900, 86400),
			},
		},
		"checkout_required": schema.BoolAttribute{
			Required:    true,
			Description: descriptions.CheckoutRequired,
		},
		"exclude_list": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			Description: descriptions.ExcludeList,
		},
		"include_list": schema.ListAttribute{
			ElementType: types.StringType,
			Optional:    true,
			Description: descriptions.IncludeList,
		},
	}

	for key, value := range myMap {
		mergeIntoMap[key] = value
	}
	return mergeIntoMap
}

func ResourceCheckoutSettingsFromModelToSDK(ctx context.Context, in *ResourceCheckoutSettingsModel) (*pam.ResourceCheckoutSettings, diag.Diagnostics) {
	var out pam.ResourceCheckoutSettings

	if !in.CheckoutRequired.IsNull() && !in.CheckoutRequired.IsUnknown() {
		out.CheckoutRequired = in.CheckoutRequired.ValueBool()
	}
	if !in.CheckoutDurationInSeconds.IsNull() && !in.CheckoutDurationInSeconds.IsUnknown() {
		out.CheckoutDurationInSeconds = in.CheckoutDurationInSeconds.ValueInt32Pointer()
	}

	if !in.IncludeList.IsNull() && !in.IncludeList.IsUnknown() {
		if diags := in.IncludeList.ElementsAs(ctx, &out.IncludeList, false); diags.HasError() {
			return nil, diags
		}
	}

	if !in.ExcludeList.IsNull() && !in.ExcludeList.IsUnknown() {
		if diags := in.ExcludeList.ElementsAs(ctx, &out.ExcludeList, false); diags.HasError() {
			return nil, diags
		}
	}
	return &out, nil
}

func ResourceCheckoutSettingsFromSDKToModel(ctx context.Context, in *pam.ResourceCheckoutSettings) (*ResourceCheckoutSettingsModel, diag.Diagnostics) {
	var out ResourceCheckoutSettingsModel

	if val, ok := in.GetCheckoutRequiredOk(); ok {
		out.CheckoutRequired = types.BoolPointerValue(val)
	}

	if val, ok := in.GetCheckoutDurationInSecondsOk(); ok {
		out.CheckoutDurationInSeconds = types.Int32PointerValue(val)
	}

	if includeList, diags := types.ListValueFrom(ctx, types.StringType, in.IncludeList); diags.HasError() {
		return nil, diags
	} else {
		out.IncludeList = includeList
	}

	if excludeList, diags := types.ListValueFrom(ctx, types.StringType, in.ExcludeList); diags.HasError() {
		return nil, diags
	} else {
		out.ExcludeList = excludeList
	}
	return &out, nil
}
