package oktapam

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"
)

func resourceUserGroupAttachment() *schema.Resource {
	return &schema.Resource{
		Description:   descriptions.ResourceUserGroupAttachment,
		CreateContext: resourceUserGroupAttachmentCreate,
		ReadContext:   resourceUserGroupAttachmentRead,
		DeleteContext: resourceUserGroupAttachmentDelete,
		Schema: map[string]*schema.Schema{
			attributes.ID: {
				Type:     schema.TypeString,
				Computed: true,
				// Description is autogenerated
			},
			attributes.Group: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.GroupName,
				ForceNew:    true,
			},
			attributes.Username: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.UserName,
				ForceNew:    true,
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func resourceUserGroupAttachmentCreate(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getSDKClientFromMetadata(m)

	groupName := GetStringPtrFromResource(attributes.Group, d, false)
	username := GetStringPtrFromResource(attributes.Username, d, false)

	err := client.AddUserToGroup(ctx, c, *groupName, *username)
	if err != nil {
		return diag.FromErr(err)
	}

	id := formatUserGroupAttachmentID(*groupName, *username)
	d.SetId(id)

	return resourceUserGroupAttachmentRead(ctx, d, m)
}

func resourceUserGroupAttachmentRead(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	id := d.Id()
	groupName, username, err := parseUserGroupAttachmentID(id)
	if err != nil {
		return diag.FromErr(err)
	}

	c := getSDKClientFromMetadata(m)
	present, err := client.GroupContainsUser(ctx, c, groupName, username)
	if err != nil {
		return diag.FromErr(err)
	}
	if !present {
		return diag.Diagnostics{
			diag.Diagnostic{
				Severity: diag.Error,
				Summary:  fmt.Sprintf("user %q is not present within group %q", username, groupName),
			},
		}
	}
	d.Set(attributes.Group, groupName)
	d.Set(attributes.Username, username)

	return nil
}

func resourceUserGroupAttachmentDelete(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getSDKClientFromMetadata(m)

	groupName := GetStringPtrFromResource(attributes.Group, d, false)
	username := GetStringPtrFromResource(attributes.Username, d, false)

	err := client.RemoveUserFromGroup(ctx, c, *groupName, *username)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func formatUserGroupAttachmentID(groupName string, username string) string {
	return fmt.Sprintf("%s|%s", groupName, username)
}

func parseUserGroupAttachmentID(id string) (string, string, error) {
	split := strings.Split(id, "|")
	if len(split) != 2 {
		return "", "", fmt.Errorf("unexpected id value")
	}

	return split[0], split[1], nil
}
