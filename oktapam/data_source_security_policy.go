package oktapam

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"
	"github.com/okta/terraform-provider-oktapam/oktapam/logging"
)

func dataSourceSecurityPolicy() *schema.Resource {
	return &schema.Resource{
		Description: descriptions.ResourceSecurityPolicy,
		ReadContext: dataSourceSecurityPolicyFetch,
		Schema: map[string]*schema.Schema{
			attributes.ID: {
				Type:     schema.TypeString,
				Required: true,
				// Description is autogenerated
			},
			attributes.Name: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.Name,
			},
			attributes.Description: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.Description,
			},
			attributes.Active: {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: descriptions.SecurityPolicyActive,
			},
			attributes.Principals: {
				Type:        schema.TypeList,
				Computed:    true,
				Description: descriptions.SecurityPolicyPrincipals,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						attributes.Groups: {
							Type: schema.TypeSet,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Computed:    true,
							Description: descriptions.PrincipalGroupIDs,
						},
					},
				},
			},
			attributes.Rule: {
				Type:        schema.TypeList,
				Computed:    true,
				Description: descriptions.SecurityPolicyRule,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						attributes.Name: {
							Type:        schema.TypeString,
							Computed:    true,
							Description: descriptions.Name,
						},
						attributes.Resources: {
							Type:        schema.TypeList,
							Computed:    true,
							Description: descriptions.SecurityPolicyResources,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									attributes.Servers: {
										Type:        schema.TypeList,
										Computed:    true,
										Description: descriptions.SecurityPolicyServers,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												attributes.Server: {
													Type:        schema.TypeList,
													Computed:    true,
													Description: descriptions.SecurityPolicyServer,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															attributes.ServerID: {
																Type:        schema.TypeString,
																Computed:    true,
																Description: descriptions.ServerID,
															},
														},
													},
												},
												attributes.ServerAccount: {
													Type:        schema.TypeList,
													Computed:    true,
													Description: descriptions.SecurityPolicyServerAccount,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															attributes.ServerID: {
																Type:        schema.TypeString,
																Computed:    true,
																Description: descriptions.ServerID,
															},
															attributes.Account: {
																Type:        schema.TypeString,
																Computed:    true,
																Description: descriptions.LocalAccount,
															},
														},
													},
												},
												attributes.LabelSelectors: {
													Type:        schema.TypeList,
													Computed:    true,
													Description: descriptions.SecurityPolicyLabelSelectors,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															attributes.ServerLabels: {
																Type:        schema.TypeMap,
																Computed:    true,
																Description: descriptions.SecurityPolicyServerLabels,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
															attributes.Accounts: {
																Type:        schema.TypeList,
																Computed:    true,
																Description: descriptions.LocalAccounts,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						attributes.Privileges: {
							Type:        schema.TypeList,
							Computed:    true,
							Description: descriptions.Privileges,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									attributes.PasswordCheckoutRDP: {
										Type:        schema.TypeList,
										Computed:    true,
										Description: descriptions.PrivilegePasswordCheckoutRDP,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												attributes.Enabled: {
													Type:        schema.TypeBool,
													Computed:    true,
													Description: descriptions.PrivilegeEnabled,
												},
											},
										},
									},
									attributes.PasswordCheckoutSSH: {
										Type:        schema.TypeList,
										Computed:    true,
										Description: descriptions.PrivilegePasswordCheckoutSSH,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												attributes.Enabled: {
													Type:        schema.TypeBool,
													Computed:    true,
													Description: descriptions.PrivilegeEnabled,
												},
											},
										},
									},
									attributes.PrincipalAccountRDP: {
										Type:        schema.TypeList,
										Computed:    true,
										Description: descriptions.PrivilegePrincipalAccountRDP,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												attributes.Enabled: {
													Type:        schema.TypeBool,
													Computed:    true,
													Description: descriptions.PrivilegeEnabled,
												},
											},
										},
									},
									attributes.PrincipalAccountSSH: {
										Type:        schema.TypeList,
										Computed:    true,
										Description: descriptions.PrivilegePrincipalAccountSSH,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												attributes.Enabled: {
													Type:        schema.TypeBool,
													Computed:    true,
													Description: descriptions.PrivilegeEnabled,
												},
											},
										},
									},
								},
							},
						},
						attributes.Conditions: {
							Type:        schema.TypeList,
							Computed:    true,
							Description: descriptions.Conditions,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									attributes.AccessRequest: {
										Type:        schema.TypeList,
										Computed:    true,
										Description: descriptions.ConditionAccessRequest,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												attributes.RequestTypeId: {
													Type:        schema.TypeString,
													Computed:    true,
													Description: descriptions.ConditionAccessRequestRequestTypeID,
												},
												attributes.RequestTypeName: {
													Type:        schema.TypeString,
													Computed:    true,
													Description: descriptions.ConditionAccessRequestRequestTypeName,
												},
												attributes.ExpiresAfterSeconds: {
													Type:        schema.TypeInt,
													Computed:    true,
													Description: descriptions.ConditionAccessRequestExpiresAfterSeconds,
												},
											},
										},
									},
									attributes.Gateway: {
										Type:        schema.TypeList,
										Computed:    true,
										Description: descriptions.ConditionGateway,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												attributes.TrafficForwarding: {
													Type:        schema.TypeBool,
													Computed:    true,
													Description: descriptions.ConditionTrafficForwarding,
												},
												attributes.SessionRecording: {
													Type:        schema.TypeBool,
													Computed:    true,
													Description: descriptions.ConditionSessionRecording,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func dataSourceSecurityPolicyFetch(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := m.(client.OktaPAMClient)

	idI, ok := d.GetOk(attributes.ID)
	if !ok {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  fmt.Sprintf("missing required %s parameter", attributes.ID),
		})
	}

	id := idI.(string)

	rg, err := c.GetSecurityPolicy(ctx, id)
	if err != nil {
		return diag.FromErr(err)
	}

	if rg != nil {
		d.SetId(*rg.ID)
		for key, value := range rg.ToResourceMap() {
			if err := d.Set(key, value); err != nil {
				diags = append(diags, diag.FromErr(err)...)
			}
		}
	} else {
		logging.Infof("security policy with id %s does not exist", id)
	}

	return diags
}
