package oktapam

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"
	"github.com/okta/terraform-provider-oktapam/oktapam/logging"
	"github.com/okta/terraform-provider-oktapam/oktapam/utils"
)

func resourceSecretFolder() *schema.Resource {
	return &schema.Resource{
		Description:   descriptions.ResourceSecretFolder,
		CreateContext: resourceSecretFolderCreate,
		ReadContext:   resourceSecretFolderRead,
		UpdateContext: resourceSecretFolderUpdate,
		DeleteContext: resourceSecretFolderDelete,
		Schema: map[string]*schema.Schema{
			attributes.ID: {
				Type:     schema.TypeString,
				Computed: true,
				// Description is autogenerated
			},
			attributes.Name: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.Name,
			},
			attributes.ResourceGroup: {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: descriptions.ResourceGroupID,
			},
			attributes.Project: {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: descriptions.ProjectID,
			},
			attributes.ParentFolder: {
				Type:        schema.TypeString,
				Optional:    true,
				Description: descriptions.ParentFolder,
				ForceNew:    true,
			},
			attributes.Description: {
				Type:        schema.TypeString,
				Optional:    true,
				Description: descriptions.Name,
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: importResourceSecretFolderState,
		},
	}
}

func resourceSecretFolderRead(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getLocalClientFromMetadata(m)

	secretFolderID := d.Id()
	resourceGroupID := d.Get(attributes.ResourceGroup).(string)
	projectID := d.Get(attributes.Project).(string)

	secretFolder, err := c.GetSecretFolder(ctx, resourceGroupID, projectID, secretFolderID)
	if err != nil {
		return diag.FromErr(err)
	}

	if secretFolder == nil || utils.IsBlank(secretFolder.ID) {
		logging.Debugf("id was blank")
		d.SetId("")
		return nil
	}

	for key, value := range secretFolder.ToResourceMap() {
		logging.Debugf("setting %s to %v", key, value)
		if err := d.Set(key, value); err != nil {
			return diag.FromErr(err)
		}
	}

	return nil
}

func resourceSecretFolderCreate(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getLocalClientFromMetadata(m)

	secretFolder := readSecretFolderFromResource(d)
	resultingSecretFolder, err := c.CreateSecretFolder(ctx, secretFolder)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*resultingSecretFolder.ID)
	return resourceSecretFolderRead(ctx, d, m)
}

func resourceSecretFolderUpdate(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := getLocalClientFromMetadata(m)

	secretFolderID := d.Id()
	secretFolder := readSecretFolderFromResource(d)

	if secretFolderID == "" {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "could not obtain secret folder id from resource",
		})
	}
	if utils.IsBlank(secretFolder.ResourceGroupID) {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "could not obtain resource group id from resource",
		})
	}

	if utils.IsBlank(secretFolder.ProjectID) {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "could not obtain project id from resource",
		})
	}

	if utils.IsBlank(secretFolder.Name) {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "could not obtain name from resource",
		})
	}

	if diags != nil {
		return diags
	}

	secretFolder.ID = &secretFolderID

	if err := c.UpdateSecretFolder(ctx, secretFolder); err != nil {
		return diag.FromErr(err)
	}

	return resourceSecretFolderRead(ctx, d, m)
}

func resourceSecretFolderDelete(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getLocalClientFromMetadata(m)

	secretFolderID := d.Id()
	resourceGroupID := d.Get(attributes.ResourceGroup).(string)
	projectID := d.Get(attributes.Project).(string)

	err := c.DeleteSecretFolder(ctx, resourceGroupID, projectID, secretFolderID)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func readSecretFolderFromResource(d *schema.ResourceData) client.SecretFolder {
	secretFolder := client.SecretFolder{
		Name:            GetStringPtrFromResource(attributes.Name, d, true),
		ResourceGroupID: GetStringPtrFromResource(attributes.ResourceGroup, d, true),
		ProjectID:       GetStringPtrFromResource(attributes.Project, d, true),
		ParentFolderID:  GetStringPtrFromResource(attributes.ParentFolder, d, false),
		Description:     GetStringPtrFromResource(attributes.Description, d, false),
	}

	return secretFolder
}

func parseSecretFolderResourceID(resourceId string) (string, string, string, error) {
	split := strings.Split(resourceId, "/")
	if len(split) != 3 {
		return "", "", "", fmt.Errorf("expected format: <resource_group_id>/<project_id>/<id>, received: %s", resourceId)
	}
	return split[0], split[1], split[2], nil
}

func importResourceSecretFolderState(ctx context.Context, d *schema.ResourceData, meta any) ([]*schema.ResourceData, error) {
	// d.Id() here is the last argument passed to the `terraform import RESOURCE_TYPE.RESOURCE_NAME RESOURCE_ID` command
	// Id provided for import is in the format <resource_group_id>/<project_id>/<id>.
	// Both project name and ASA resource UUID is required to read resource back
	resourceGroupID, projectID, secretFolderID, err := parseSecretFolderResourceID(d.Id())
	if err != nil {
		return nil, fmt.Errorf("invalid resource import specifier; %w", err)
	}
	if err := d.Set(attributes.ResourceGroup, resourceGroupID); err != nil {
		return nil, err
	}
	if err := d.Set(attributes.Project, projectID); err != nil {
		return nil, err
	}
	//Set id to PAM resource UUID
	d.SetId(secretFolderID)

	return []*schema.ResourceData{d}, nil
}
