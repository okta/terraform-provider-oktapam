package oktapam

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"
	"github.com/okta/terraform-provider-oktapam/oktapam/logging"
)

func resourceKubernetesCluster() *schema.Resource {
	return &schema.Resource{
		Description:   descriptions.ResourceKubernetesCluster,
		CreateContext: resourceKubernetesClusterCreate,
		ReadContext:   resourceKubernetesClusterRead,
		DeleteContext: resourceKubernetesClusterDelete,
		UpdateContext: resourceKubernetesClusterUpdate,
		Schema: map[string]*schema.Schema{
			attributes.ID: {
				Type:     schema.TypeString,
				Computed: true,
				// Description is autogenerated
			},
			attributes.KubernetesClusterKey: {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: descriptions.KubernetesClusterKey,
			},
			attributes.KubernetesAuthMechanism: {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: descriptions.KubernetesAuthMechanism,
			},
			attributes.Labels: {
				Type: schema.TypeMap,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				Optional:    true,
				ForceNew:    false,
				Description: descriptions.KubernetesClusterLabels,
			},
			attributes.OIDCIssuerURL: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.OIDCIssuerURL,
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func resourceKubernetesClusterCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)

	clusterKey := getStringPtr(attributes.KubernetesClusterKey, d, false)
	authMechanism := getStringPtr(attributes.KubernetesAuthMechanism, d, false)
	labels := d.Get(attributes.Labels).(map[string]interface{})

	labelsMap := make(map[string]string, len(labels))
	for k, v := range labels {
		labelsMap[k] = fmt.Sprint(v)
	}

	clusterSpec := client.KubernetesCluster{
		Key:    clusterKey,
		Auth:   authMechanism,
		Labels: labelsMap,
	}

	if createdCluster, err := c.CreateKubernetesCluster(ctx, clusterSpec); err != nil {
		return diag.FromErr(err)
	} else if createdCluster == nil {
		d.SetId("")
	} else {
		d.SetId(*createdCluster.ID)
	}

	return resourceKubernetesClusterRead(ctx, d, m)
}

func resourceKubernetesClusterRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)

	cluster, err := c.GetKubernetesCluster(ctx, d.Id())
	if err != nil {
		return diag.FromErr(err)
	}

	if cluster == nil {
		logging.Debugf("kubernetes cluster was blank")
		d.SetId("")
		return nil
	}

	for key, value := range cluster.ToResourceMap() {
		logging.Debugf("setting %q to %v", key, value)
		if err := d.Set(key, value); err != nil {
			return diag.FromErr(err)
		}
	}

	return nil
}

func resourceKubernetesClusterUpdate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)
	id := d.Id()

	changed := false
	updates := make(map[string]interface{})

	changeableAttributes := []string{
		attributes.Labels,
	}

	for _, attribute := range changeableAttributes {
		if d.HasChange(attribute) {
			updates[attribute] = d.Get(attribute)
			changed = true
		}
	}

	if changed {
		if err := c.UpdateKubernetesCluster(ctx, id, updates); err != nil {
			return diag.FromErr(err)
		}
	}

	return resourceKubernetesClusterRead(ctx, d, m)
}

func resourceKubernetesClusterDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)

	if err := c.DeleteKubernetesCluster(ctx, d.Id()); err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")
	return nil
}
