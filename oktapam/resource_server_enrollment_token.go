package oktapam

import (
	"context"
	"fmt"
	"strings"

	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/logging"
	"github.com/okta/terraform-provider-oktapam/oktapam/utils"
)

func resourceServerEnrollmentToken() *schema.Resource {
	return &schema.Resource{
		Description:   descriptions.ResourceServerEnrollmentToken,
		CreateContext: resourceServerEnrollmentTokenCreate,
		ReadContext:   resourceServerEnrollmentTokenRead,
		DeleteContext: resourceServerEnrollmentTokenDelete,
		Schema: map[string]*schema.Schema{
			attributes.ProjectName: {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: descriptions.ProjectName,
			},
			attributes.Description: {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: descriptions.DescriptionContains,
			},
			attributes.Token: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.Token,
			},
			attributes.ID: {
				Type:     schema.TypeString,
				Computed: true,
				// Description is autogenerated
			},
			attributes.CreatedByUser: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.CreatedByUser,
			},
			attributes.IssuedAt: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.IssuedAt,
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: importResourceServerEnrollmentTokenState,
		},
	}
}

func resourceServerEnrollmentTokenRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)

	serverEnrollmentTokenID := d.Id()
	projectName := d.Get(attributes.ProjectName).(string)

	token, err := c.GetServerEnrollmentToken(ctx, projectName, serverEnrollmentTokenID)
	if err != nil {
		return diag.FromErr(err)
	}

	if token == nil || utils.IsBlank(token.ID) {
		logging.Debugf("token id was blank")
		d.SetId("")
		return nil
	}

	for key, value := range token.ToResourceMap() {
		logging.Debugf("setting %s to %v", key, value)
		if err := d.Set(key, value); err != nil {
			return diag.FromErr(err)
		}
	}

	return nil
}

func resourceServerEnrollmentTokenCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)

	projectName := d.Get(attributes.ProjectName).(string)
	description := d.Get(attributes.Description).(string)

	token, err := c.CreateServerEnrollmentToken(ctx, projectName, description)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(*token.ID)

	return resourceServerEnrollmentTokenRead(ctx, d, m)
}

func resourceServerEnrollmentTokenDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)

	serverEnrollmentTokenID := d.Id()
	projectName := d.Get(attributes.ProjectName).(string)

	err := c.DeleteServerEnrollmentToken(ctx, projectName, serverEnrollmentTokenID)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return nil
}

func parseServerEnrollmentTokenResourceID(resourceId string) (string, string, error) {
	split := strings.Split(resourceId, "/")
	if len(split) != 2 {
		return "", "", fmt.Errorf("expected format: <project_name>/<id>, received: %s", resourceId)
	}
	return split[0], split[1], nil
}

func importResourceServerEnrollmentTokenState(ctx context.Context, d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	// d.Id() here is the last argument passed to the `terraform import RESOURCE_TYPE.RESOURCE_NAME RESOURCE_ID` command
	// Id provided for import is in the format <project_name>/<id>.
	// Both project name and ASA resource UUID is required to read resource back
	projectName, serverEnrollmentTokenID, err := parseServerEnrollmentTokenResourceID(d.Id())
	if err != nil {
		return nil, fmt.Errorf("invalid resource import specifier; %w", err)
	}

	if err := d.Set(attributes.ProjectName, projectName); err != nil {
		return nil, err
	}
	//Set id to ASA resource UUID
	d.SetId(serverEnrollmentTokenID)

	return []*schema.ResourceData{d}, nil
}
