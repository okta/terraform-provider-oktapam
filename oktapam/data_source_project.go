package oktapam

import (
	"context"
	"strconv"
	"time"

	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/okta/terraform-provider-oktapam/oktapam/client"
)

func dataSourceProjects() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceProjectsRead,
		Schema: map[string]*schema.Schema{
			// Query parameter values
			attributes.Self: {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: descriptions.FilterSelf,
			},
			attributes.Contains: {
				Type:        schema.TypeString,
				Optional:    true,
				Description: descriptions.FilterContains,
			},
			// Return value
			attributes.Projects: {
				Type:        schema.TypeList,
				Computed:    true,
				Description: descriptions.SourceProjects,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						attributes.Name: {
							Type:        schema.TypeString,
							Computed:    true,
							Description: descriptions.Name,
						},
						attributes.ID: {
							Type:     schema.TypeString,
							Computed: true,
							// Description is autogenerated
						},
						attributes.Team: {
							Type:        schema.TypeString,
							Computed:    true,
							Description: descriptions.TeamName,
						},
						attributes.NextUnixGID: {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: descriptions.NextUnixGID,
						},
						attributes.NextUnixUID: {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: descriptions.NextUnixUID,
						},
						attributes.CreateServerUsers: {
							Type:        schema.TypeBool,
							Computed:    true,
							Optional:    true,
							Description: descriptions.CreateServerUsers,
						},
						attributes.DeletedAt: {
							Type:        schema.TypeString,
							Computed:    true,
							Description: descriptions.DeletedAt,
						},
						attributes.ForwardTraffic: {
							Type:        schema.TypeBool,
							Computed:    true,
							Optional:    true,
							Description: descriptions.ForwardTraffic,
						},
						attributes.RDPSessionRecording: {
							Type:        schema.TypeBool,
							Computed:    true,
							Optional:    true,
							Description: descriptions.RDPSessionRecording,
						},
						attributes.RequirePreauthForCreds: {
							Type:        schema.TypeBool,
							Computed:    true,
							Optional:    true,
							Description: descriptions.RequirePreauthForCreds,
						},
						attributes.SSHSessionRecording: {
							Type:        schema.TypeBool,
							Computed:    true,
							Optional:    true,
							Description: descriptions.SSHSessionRecording,
						},
						attributes.GatewaySelector: {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: descriptions.GatewaySelector,
						},
						attributes.SSHCertificateType: {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: descriptions.SSHCertificateType,
						},
					},
				},
			},
		},
	}
}

func dataSourceProjectsRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	c := m.(client.OktaPAMClient)
	parameters := client.ListProjectsParameters{}
	if contains, ok := d.GetOk(attributes.Contains); ok {
		parameters.Contains = contains.(string)
	}

	self, err := getOkBool(attributes.Self, d)
	if err != nil {
		return diag.FromErr(err)
	}
	parameters.Self = self

	projectsList, err := c.ListProjects(ctx, parameters)
	if err != nil {
		return diag.FromErr(err)
	}

	projects := make([]map[string]interface{}, len(projectsList))
	for idx, proj := range projectsList {
		projects[idx] = proj.ToResourceMap()
	}

	if err := d.Set(attributes.Projects, projects); err != nil {
		return diag.FromErr(err)
	}

	d.SetId(strconv.FormatInt(time.Now().Unix(), 10))
	return diags
}
