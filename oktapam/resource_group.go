package oktapam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"
	"github.com/okta/terraform-provider-oktapam/oktapam/logging"
	"github.com/okta/terraform-provider-oktapam/oktapam/utils"
)

func resourceGroup() *schema.Resource {
	return &schema.Resource{
		Description:   descriptions.ResourceGroup,
		CreateContext: resourceGroupCreate,
		ReadContext:   resourceGroupRead,
		UpdateContext: resourceGroupUpdate,
		DeleteContext: resourceGroupDelete,
		Schema: map[string]*schema.Schema{
			attributes.Name: {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: descriptions.Name,
			},
			attributes.ID: {
				Type:     schema.TypeString,
				Computed: true,
				// Description is autogenerated
			},
			attributes.DeletedAt: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.DeletedAt,
			},
			attributes.Roles: {
				Type: schema.TypeSet,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				Optional: true,
				DefaultFunc: func() (interface{}, error) {
					return []string{"access_user"}, nil
				},
				Description: descriptions.Roles,
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: importResourceGroupState,
		},
	}
}

func resourceGroupCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)
	var roles []string
	if r, ok := d.GetOk(attributes.Roles); ok {
		rolesAttr := r.(*schema.Set)
		rolesI := rolesAttr.List()
		roles = make([]string, len(rolesI))

		for idx, ri := range rolesI {
			roles[idx] = ri.(string)
		}
	} else {
		roles = make([]string, 0)
	}

	group := client.Group{
		Name:  getStringPtr(attributes.Name, d, true),
		Roles: roles,
	}

	err := c.CreateGroup(ctx, group)
	if err != nil {
		return diag.FromErr(err)
	}

	return resourceGroupRead(ctx, d, m)
}

func resourceGroupRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)

	//Get group api require group name not ASA Group UUID to read resource back
	groupName := d.Get(attributes.Name).(string)
	group, err := c.GetGroup(ctx, groupName, false)
	if err != nil {
		return diag.FromErr(err)
	}

	if group != nil && utils.IsNonEmpty(group.Name) {
		if utils.IsBlank(group.DeletedAt) {
			logging.Infof("Group %s exists", *group.Name)
			d.SetId(*group.ID)
		} else {
			logging.Infof("Group %s was removed", groupName)
			d.SetId("")
		}
		for key, value := range group.ToResourceMap() {
			if err := d.Set(key, value); err != nil {
				return diag.FromErr(err)
			}
		}
	} else {
		logging.Infof("Group %s does not exist", groupName)
		d.SetId("")
	}

	return nil
}

func resourceGroupUpdate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(client.OktaPAMClient)
	groupName := d.Get(attributes.Name).(string)

	changed := false
	updates := make(map[string]interface{})

	changeableAttributes := []string{
		attributes.Roles,
	}

	for _, attribute := range changeableAttributes {
		if d.HasChange(attribute) {
			if attribute == attributes.Roles {
				roles := d.Get(attributes.Roles).(*schema.Set)
				updates[attributes.Roles] = roles.List()
			} else {
				updates[attribute] = d.Get(attribute)
			}
			changed = true
		}
	}

	if changed {
		err := c.UpdateGroup(ctx, groupName, updates)
		if err != nil {
			return diag.FromErr(err)
		}
	}

	return resourceGroupRead(ctx, d, m)
}

func resourceGroupDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	c := m.(client.OktaPAMClient)
	groupName := d.Get(attributes.Name).(string)

	err := c.DeleteGroup(ctx, groupName)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")
	return diags
}

func importResourceGroupState(ctx context.Context, d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	// d.Id() here is the last argument passed to the `terraform import RESOURCE_TYPE.RESOURCE_NAME RESOURCE_ID` command
	// Set the passed id as group name to make read work
	if err := d.Set(attributes.Name, d.Id()); err != nil {
		return nil, err
	}
	return []*schema.ResourceData{d}, nil
}
