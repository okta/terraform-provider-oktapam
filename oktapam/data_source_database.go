package oktapam

import (
	"context"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/okta/terraform-provider-oktapam/oktapam/client"
	"github.com/okta/terraform-provider-oktapam/oktapam/client/wrappers"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"
)

func dataSourceDatabase() *schema.Resource {
	return &schema.Resource{
		Description: descriptions.SourceDatabase,
		ReadContext: dataSourceDatabaseFetch,
		Schema: map[string]*schema.Schema{
			attributes.ID: {
				Type:     schema.TypeString,
				Required: true,
				// Description is autogenerated
			},
			attributes.ResourceGroup: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.ResourceGroupID,
			},
			attributes.Project: {
				Type:        schema.TypeString,
				Optional:    true,
				Description: descriptions.ProjectID,
			},
			attributes.CanonicalName: {
				Type:        schema.TypeString,
				Optional:    true,
				Description: descriptions.CanonicalName,
			},
			attributes.DatabaseType: {
				Type:        schema.TypeString,
				Optional:    true,
				Description: descriptions.DatabaseType,
			},
			attributes.RecipeBook: {
				Type:        schema.TypeString,
				Optional:    true,
				Description: descriptions.RecipeBookID,
			},
			attributes.ManagementConnectionDetails: {
				Type:        schema.TypeList,
				Optional:    true,
				MinItems:    1,
				MaxItems:    1,
				Description: descriptions.ManagementConnectionDetails,
				Elem:        managementConnectionDetails,
				ForceNew:    false,
			},
			attributes.ManagementConnectionDetailsType: {
				Type:        schema.TypeString,
				Optional:    true,
				Description: descriptions.ManagementConnectionDetailsType,
			},
			attributes.ManagementGatewaySelector: {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: descriptions.ManagementGatewaySelector,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			attributes.ManagementGatewaySelectorID: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.ManagementGatewaySelectorID,
			},
			attributes.CreatedAt: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.CreatedAt,
			},
			attributes.UpdatedAt: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.UpdatedAt,
			},
		},
	}
}

// dataSourceDatabaseFetch is the same as resourceDatabaseRead but cannot retrieve the password field.
func dataSourceDatabaseFetch(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getSDKClientFromMetadata(m)
	resourceGroupID := d.Get(attributes.ResourceGroup).(string)
	projectID := d.Get(attributes.Project).(string)
	databaseID := d.Get(attributes.ID).(string)
	if databaseID == "" {
		return diag.Errorf("%s cannot be blank", attributes.ID)
	}

	database, err := client.GetDatabase(ctx, c, resourceGroupID, projectID, databaseID)
	if err != nil {
		return diag.FromErr(err)
	}

	wrap := wrappers.DatabaseResourceResponseWrapper{*database}

	d.SetId(database.Id)
	for key, value := range wrap.ToResourceMap(nil) {
		if err := d.Set(key, value); err != nil {
			return diag.FromErr(err)
		}
	}

	return nil
}
