package oktapam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/attributes"
	"github.com/okta/terraform-provider-oktapam/oktapam/constants/descriptions"
	"github.com/okta/terraform-provider-oktapam/oktapam/logging"
)

func dataSourceCloudConnection() *schema.Resource {
	return &schema.Resource{
		Description: descriptions.SourceCloudConnection,
		ReadContext: dataSourceCloudConnectionFetch,
		Schema: map[string]*schema.Schema{
			attributes.ID: {
				Type:     schema.TypeString,
				Required: true,
				// Description is autogenerated
			},
			attributes.CloudConnectionTeamID: {
				Type:        schema.TypeString,
				Required:    true,
				Description: descriptions.Description,
			},
			attributes.Name: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.Name,
			},
			attributes.CloudConnectionProvider: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: descriptions.CloudConnectionProvider,
			},
			attributes.CloudConnectionDetails: {
				Type:        schema.TypeSet,
				Description: descriptions.CloudConnectionDetails,
				Computed:    true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						attributes.CloudConnectionAccountId: {
							Type:     schema.TypeString,
							Computed: true,
						},
						attributes.CloudConnectionExternalId: {
							Type:     schema.TypeString,
							Computed: true,
						},
						attributes.CloudConnectionRoleARN: {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
		},
	}
}

func dataSourceCloudConnectionFetch(ctx context.Context, d *schema.ResourceData, m any) diag.Diagnostics {
	c := getLocalClientFromMetadata(m)
	name := d.Get(attributes.Name).(string)
	if name == "" {
		return diag.Errorf("%s cannot be blank", attributes.Name)
	}

	cloudConnection, err := c.GetCloudConnection(ctx, name, false)
	if err != nil {
		return diag.FromErr(err)
	}

	if cloudConnection != nil {
		d.SetId(*cloudConnection.ID)
		for key, value := range cloudConnection.ToResourceMap() {
			if err := d.Set(key, value); err != nil {
				return diag.FromErr(err)
			}
		}
	} else {
		logging.Infof("cloud connection %s does not exist", name)
	}
	return nil
}
