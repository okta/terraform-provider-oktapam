/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryDomain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryDomain{}

// ActiveDirectoryDomain Information for an Active Directory domain that the current user has some level of access to
type ActiveDirectoryDomain struct {
	Id string `json:"id"`
	// The name of the Active Directory domain
	Domain string `json:"domain"`
	// The instance ID of the Active Directory app in your Okta org.
	OktaAppInstanceId string             `json:"okta_app_instance_id"`
	Status            ADConnectionStatus `json:"status"`
}

// NewActiveDirectoryDomain instantiates a new ActiveDirectoryDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryDomain(id string, domain string, oktaAppInstanceId string, status ADConnectionStatus) *ActiveDirectoryDomain {
	this := ActiveDirectoryDomain{}
	this.Id = id
	this.Domain = domain
	this.OktaAppInstanceId = oktaAppInstanceId
	this.Status = status
	return &this
}

// NewActiveDirectoryDomainWithDefaults instantiates a new ActiveDirectoryDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryDomainWithDefaults() *ActiveDirectoryDomain {
	this := ActiveDirectoryDomain{}
	return &this
}

// GetId returns the Id field value
func (o *ActiveDirectoryDomain) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryDomain) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActiveDirectoryDomain) SetId(v string) *ActiveDirectoryDomain {
	o.Id = v
	return o
}

// GetDomain returns the Domain field value
func (o *ActiveDirectoryDomain) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryDomain) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ActiveDirectoryDomain) SetDomain(v string) *ActiveDirectoryDomain {
	o.Domain = v
	return o
}

// GetOktaAppInstanceId returns the OktaAppInstanceId field value
func (o *ActiveDirectoryDomain) GetOktaAppInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OktaAppInstanceId
}

// GetOktaAppInstanceIdOk returns a tuple with the OktaAppInstanceId field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryDomain) GetOktaAppInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OktaAppInstanceId, true
}

// SetOktaAppInstanceId sets field value
func (o *ActiveDirectoryDomain) SetOktaAppInstanceId(v string) *ActiveDirectoryDomain {
	o.OktaAppInstanceId = v
	return o
}

// GetStatus returns the Status field value
func (o *ActiveDirectoryDomain) GetStatus() ADConnectionStatus {
	if o == nil {
		var ret ADConnectionStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryDomain) GetStatusOk() (*ADConnectionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ActiveDirectoryDomain) SetStatus(v ADConnectionStatus) *ActiveDirectoryDomain {
	o.Status = v
	return o
}

func (o ActiveDirectoryDomain) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryDomain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["domain"] = o.Domain
	toSerialize["okta_app_instance_id"] = o.OktaAppInstanceId
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullableActiveDirectoryDomain struct {
	value *ActiveDirectoryDomain
	isSet bool
}

func (v NullableActiveDirectoryDomain) Get() *ActiveDirectoryDomain {
	return v.value
}

func (v *NullableActiveDirectoryDomain) Set(val *ActiveDirectoryDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryDomain(val *ActiveDirectoryDomain) *NullableActiveDirectoryDomain {
	return &NullableActiveDirectoryDomain{value: val, isSet: true}
}

func (v NullableActiveDirectoryDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
