/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"os"
)

// checks if the TrustedRootCA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrustedRootCA{}

// TrustedRootCA JSON object of listed trusted toot certificates, must be PEM and base64 encoded.
type TrustedRootCA struct {
	// The name of the certificate file
	Name *string `json:"name,omitempty"`
	// The contents of the certificate file
	Contents **os.File `json:"contents,omitempty"`
}

// NewTrustedRootCA instantiates a new TrustedRootCA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustedRootCA() *TrustedRootCA {
	this := TrustedRootCA{}
	return &this
}

// NewTrustedRootCAWithDefaults instantiates a new TrustedRootCA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustedRootCAWithDefaults() *TrustedRootCA {
	this := TrustedRootCA{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TrustedRootCA) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedRootCA) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TrustedRootCA) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TrustedRootCA) SetName(v string) *TrustedRootCA {
	o.Name = &v
	return o
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *TrustedRootCA) GetContents() *os.File {
	if o == nil || IsNil(o.Contents) {
		var ret *os.File
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedRootCA) GetContentsOk() (**os.File, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *TrustedRootCA) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given *os.File and assigns it to the Contents field.
func (o *TrustedRootCA) SetContents(v *os.File) *TrustedRootCA {
	o.Contents = &v
	return o
}

func (o TrustedRootCA) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrustedRootCA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Contents) {
		toSerialize["contents"] = o.Contents
	}
	return toSerialize, nil
}

type NullableTrustedRootCA struct {
	value *TrustedRootCA
	isSet bool
}

func (v NullableTrustedRootCA) Get() *TrustedRootCA {
	return v.value
}

func (v *NullableTrustedRootCA) Set(val *TrustedRootCA) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustedRootCA) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustedRootCA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustedRootCA(val *TrustedRootCA) *NullableTrustedRootCA {
	return &NullableTrustedRootCA{value: val, isSet: true}
}

func (v NullableTrustedRootCA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustedRootCA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
