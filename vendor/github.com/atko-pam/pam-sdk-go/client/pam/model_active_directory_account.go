/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the ActiveDirectoryAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAccount{}

// ActiveDirectoryAccount struct for ActiveDirectoryAccount
type ActiveDirectoryAccount struct {
	// The name of the Active Directory account
	AccountName *string `json:"account_name,omitempty"`
	// The type of Active Directory account
	AccountType *string `json:"account_type,omitempty"`
	// The match status of the Active Directory Account
	MatchStatus *string `json:"match_status,omitempty"`
	// A timestamp indicating the last password rotation for the Active Directory Account
	LastRotationAt *time.Time `json:"last_rotation_at,omitempty"`
	// Timestamp indicating when the Active Directory account was managed by Okta Privileged Access
	BroughtUnderManagementAt *time.Time   `json:"brought_under_management_at,omitempty"`
	ResourceGroup            *NamedObject `json:"resource_group,omitempty"`
	Project                  *NamedObject `json:"project,omitempty"`
	MatchedUser              *NamedObject `json:"matched_user,omitempty"`
	Domain                   *NamedObject `json:"domain,omitempty"`
	// The Distinguished Name (DN) referencing the Active Directory account
	DistinguishedName *string `json:"distinguished_name,omitempty"`
	// The User Principal Name (UPN) for the Active Directory account
	Upn *string `json:"upn,omitempty"`
	// The Security Identifier (SID) for the Active Directory account
	Sid *string `json:"sid,omitempty"`
	// The `sAMAccountName` field for this Active Directory account
	SamAccountName *string `json:"sam_account_name,omitempty"`
	// The first name of this Active Directory user, if set
	FirstName *string `json:"first_name,omitempty"`
	// The last name of this Active Directory user, if set
	LastName *string `json:"last_name,omitempty"`
	// The display name of this Active Directory user, if set
	DisplayName *string `json:"display_name,omitempty"`
	// The email of this Active Directory user, if set
	Email               *string                     `json:"email,omitempty"`
	AccountStatusDetail *ServiceAccountStatusDetail `json:"account_status_detail,omitempty"`
}

// NewActiveDirectoryAccount instantiates a new ActiveDirectoryAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAccount() *ActiveDirectoryAccount {
	this := ActiveDirectoryAccount{}
	return &this
}

// NewActiveDirectoryAccountWithDefaults instantiates a new ActiveDirectoryAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAccountWithDefaults() *ActiveDirectoryAccount {
	this := ActiveDirectoryAccount{}
	return &this
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *ActiveDirectoryAccount) SetAccountName(v string) *ActiveDirectoryAccount {
	o.AccountName = &v
	return o
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetAccountType() string {
	if o == nil || IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *ActiveDirectoryAccount) SetAccountType(v string) *ActiveDirectoryAccount {
	o.AccountType = &v
	return o
}

// GetMatchStatus returns the MatchStatus field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetMatchStatus() string {
	if o == nil || IsNil(o.MatchStatus) {
		var ret string
		return ret
	}
	return *o.MatchStatus
}

// GetMatchStatusOk returns a tuple with the MatchStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetMatchStatusOk() (*string, bool) {
	if o == nil || IsNil(o.MatchStatus) {
		return nil, false
	}
	return o.MatchStatus, true
}

// HasMatchStatus returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasMatchStatus() bool {
	if o != nil && !IsNil(o.MatchStatus) {
		return true
	}

	return false
}

// SetMatchStatus gets a reference to the given string and assigns it to the MatchStatus field.
func (o *ActiveDirectoryAccount) SetMatchStatus(v string) *ActiveDirectoryAccount {
	o.MatchStatus = &v
	return o
}

// GetLastRotationAt returns the LastRotationAt field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetLastRotationAt() time.Time {
	if o == nil || IsNil(o.LastRotationAt) {
		var ret time.Time
		return ret
	}
	return *o.LastRotationAt
}

// GetLastRotationAtOk returns a tuple with the LastRotationAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetLastRotationAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastRotationAt) {
		return nil, false
	}
	return o.LastRotationAt, true
}

// HasLastRotationAt returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasLastRotationAt() bool {
	if o != nil && !IsNil(o.LastRotationAt) {
		return true
	}

	return false
}

// SetLastRotationAt gets a reference to the given time.Time and assigns it to the LastRotationAt field.
func (o *ActiveDirectoryAccount) SetLastRotationAt(v time.Time) *ActiveDirectoryAccount {
	o.LastRotationAt = &v
	return o
}

// GetBroughtUnderManagementAt returns the BroughtUnderManagementAt field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetBroughtUnderManagementAt() time.Time {
	if o == nil || IsNil(o.BroughtUnderManagementAt) {
		var ret time.Time
		return ret
	}
	return *o.BroughtUnderManagementAt
}

// GetBroughtUnderManagementAtOk returns a tuple with the BroughtUnderManagementAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetBroughtUnderManagementAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BroughtUnderManagementAt) {
		return nil, false
	}
	return o.BroughtUnderManagementAt, true
}

// HasBroughtUnderManagementAt returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasBroughtUnderManagementAt() bool {
	if o != nil && !IsNil(o.BroughtUnderManagementAt) {
		return true
	}

	return false
}

// SetBroughtUnderManagementAt gets a reference to the given time.Time and assigns it to the BroughtUnderManagementAt field.
func (o *ActiveDirectoryAccount) SetBroughtUnderManagementAt(v time.Time) *ActiveDirectoryAccount {
	o.BroughtUnderManagementAt = &v
	return o
}

// GetResourceGroup returns the ResourceGroup field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetResourceGroup() NamedObject {
	if o == nil || IsNil(o.ResourceGroup) {
		var ret NamedObject
		return ret
	}
	return *o.ResourceGroup
}

// GetResourceGroupOk returns a tuple with the ResourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetResourceGroupOk() (*NamedObject, bool) {
	if o == nil || IsNil(o.ResourceGroup) {
		return nil, false
	}
	return o.ResourceGroup, true
}

// HasResourceGroup returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasResourceGroup() bool {
	if o != nil && !IsNil(o.ResourceGroup) {
		return true
	}

	return false
}

// SetResourceGroup gets a reference to the given NamedObject and assigns it to the ResourceGroup field.
func (o *ActiveDirectoryAccount) SetResourceGroup(v NamedObject) *ActiveDirectoryAccount {
	o.ResourceGroup = &v
	return o
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetProject() NamedObject {
	if o == nil || IsNil(o.Project) {
		var ret NamedObject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetProjectOk() (*NamedObject, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given NamedObject and assigns it to the Project field.
func (o *ActiveDirectoryAccount) SetProject(v NamedObject) *ActiveDirectoryAccount {
	o.Project = &v
	return o
}

// GetMatchedUser returns the MatchedUser field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetMatchedUser() NamedObject {
	if o == nil || IsNil(o.MatchedUser) {
		var ret NamedObject
		return ret
	}
	return *o.MatchedUser
}

// GetMatchedUserOk returns a tuple with the MatchedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetMatchedUserOk() (*NamedObject, bool) {
	if o == nil || IsNil(o.MatchedUser) {
		return nil, false
	}
	return o.MatchedUser, true
}

// HasMatchedUser returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasMatchedUser() bool {
	if o != nil && !IsNil(o.MatchedUser) {
		return true
	}

	return false
}

// SetMatchedUser gets a reference to the given NamedObject and assigns it to the MatchedUser field.
func (o *ActiveDirectoryAccount) SetMatchedUser(v NamedObject) *ActiveDirectoryAccount {
	o.MatchedUser = &v
	return o
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetDomain() NamedObject {
	if o == nil || IsNil(o.Domain) {
		var ret NamedObject
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetDomainOk() (*NamedObject, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NamedObject and assigns it to the Domain field.
func (o *ActiveDirectoryAccount) SetDomain(v NamedObject) *ActiveDirectoryAccount {
	o.Domain = &v
	return o
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetDistinguishedName() string {
	if o == nil || IsNil(o.DistinguishedName) {
		var ret string
		return ret
	}
	return *o.DistinguishedName
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetDistinguishedNameOk() (*string, bool) {
	if o == nil || IsNil(o.DistinguishedName) {
		return nil, false
	}
	return o.DistinguishedName, true
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasDistinguishedName() bool {
	if o != nil && !IsNil(o.DistinguishedName) {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given string and assigns it to the DistinguishedName field.
func (o *ActiveDirectoryAccount) SetDistinguishedName(v string) *ActiveDirectoryAccount {
	o.DistinguishedName = &v
	return o
}

// GetUpn returns the Upn field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetUpn() string {
	if o == nil || IsNil(o.Upn) {
		var ret string
		return ret
	}
	return *o.Upn
}

// GetUpnOk returns a tuple with the Upn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetUpnOk() (*string, bool) {
	if o == nil || IsNil(o.Upn) {
		return nil, false
	}
	return o.Upn, true
}

// HasUpn returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasUpn() bool {
	if o != nil && !IsNil(o.Upn) {
		return true
	}

	return false
}

// SetUpn gets a reference to the given string and assigns it to the Upn field.
func (o *ActiveDirectoryAccount) SetUpn(v string) *ActiveDirectoryAccount {
	o.Upn = &v
	return o
}

// GetSid returns the Sid field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetSid() string {
	if o == nil || IsNil(o.Sid) {
		var ret string
		return ret
	}
	return *o.Sid
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetSidOk() (*string, bool) {
	if o == nil || IsNil(o.Sid) {
		return nil, false
	}
	return o.Sid, true
}

// HasSid returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasSid() bool {
	if o != nil && !IsNil(o.Sid) {
		return true
	}

	return false
}

// SetSid gets a reference to the given string and assigns it to the Sid field.
func (o *ActiveDirectoryAccount) SetSid(v string) *ActiveDirectoryAccount {
	o.Sid = &v
	return o
}

// GetSamAccountName returns the SamAccountName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetSamAccountName() string {
	if o == nil || IsNil(o.SamAccountName) {
		var ret string
		return ret
	}
	return *o.SamAccountName
}

// GetSamAccountNameOk returns a tuple with the SamAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetSamAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.SamAccountName) {
		return nil, false
	}
	return o.SamAccountName, true
}

// HasSamAccountName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasSamAccountName() bool {
	if o != nil && !IsNil(o.SamAccountName) {
		return true
	}

	return false
}

// SetSamAccountName gets a reference to the given string and assigns it to the SamAccountName field.
func (o *ActiveDirectoryAccount) SetSamAccountName(v string) *ActiveDirectoryAccount {
	o.SamAccountName = &v
	return o
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *ActiveDirectoryAccount) SetFirstName(v string) *ActiveDirectoryAccount {
	o.FirstName = &v
	return o
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *ActiveDirectoryAccount) SetLastName(v string) *ActiveDirectoryAccount {
	o.LastName = &v
	return o
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ActiveDirectoryAccount) SetDisplayName(v string) *ActiveDirectoryAccount {
	o.DisplayName = &v
	return o
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ActiveDirectoryAccount) SetEmail(v string) *ActiveDirectoryAccount {
	o.Email = &v
	return o
}

// GetAccountStatusDetail returns the AccountStatusDetail field value if set, zero value otherwise.
func (o *ActiveDirectoryAccount) GetAccountStatusDetail() ServiceAccountStatusDetail {
	if o == nil || IsNil(o.AccountStatusDetail) {
		var ret ServiceAccountStatusDetail
		return ret
	}
	return *o.AccountStatusDetail
}

// GetAccountStatusDetailOk returns a tuple with the AccountStatusDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccount) GetAccountStatusDetailOk() (*ServiceAccountStatusDetail, bool) {
	if o == nil || IsNil(o.AccountStatusDetail) {
		return nil, false
	}
	return o.AccountStatusDetail, true
}

// HasAccountStatusDetail returns a boolean if a field has been set.
func (o *ActiveDirectoryAccount) HasAccountStatusDetail() bool {
	if o != nil && !IsNil(o.AccountStatusDetail) {
		return true
	}

	return false
}

// SetAccountStatusDetail gets a reference to the given ServiceAccountStatusDetail and assigns it to the AccountStatusDetail field.
func (o *ActiveDirectoryAccount) SetAccountStatusDetail(v ServiceAccountStatusDetail) *ActiveDirectoryAccount {
	o.AccountStatusDetail = &v
	return o
}

func (o ActiveDirectoryAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountName) {
		toSerialize["account_name"] = o.AccountName
	}
	if !IsNil(o.AccountType) {
		toSerialize["account_type"] = o.AccountType
	}
	if !IsNil(o.MatchStatus) {
		toSerialize["match_status"] = o.MatchStatus
	}
	if !IsNil(o.LastRotationAt) {
		toSerialize["last_rotation_at"] = o.LastRotationAt
	}
	if !IsNil(o.BroughtUnderManagementAt) {
		toSerialize["brought_under_management_at"] = o.BroughtUnderManagementAt
	}
	if !IsNil(o.ResourceGroup) {
		toSerialize["resource_group"] = o.ResourceGroup
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.MatchedUser) {
		toSerialize["matched_user"] = o.MatchedUser
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.DistinguishedName) {
		toSerialize["distinguished_name"] = o.DistinguishedName
	}
	if !IsNil(o.Upn) {
		toSerialize["upn"] = o.Upn
	}
	if !IsNil(o.Sid) {
		toSerialize["sid"] = o.Sid
	}
	if !IsNil(o.SamAccountName) {
		toSerialize["sam_account_name"] = o.SamAccountName
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.AccountStatusDetail) {
		toSerialize["account_status_detail"] = o.AccountStatusDetail
	}
	return toSerialize, nil
}

type NullableActiveDirectoryAccount struct {
	value *ActiveDirectoryAccount
	isSet bool
}

func (v NullableActiveDirectoryAccount) Get() *ActiveDirectoryAccount {
	return v.value
}

func (v *NullableActiveDirectoryAccount) Set(val *ActiveDirectoryAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccount(val *ActiveDirectoryAccount) *NullableActiveDirectoryAccount {
	return &NullableActiveDirectoryAccount{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
