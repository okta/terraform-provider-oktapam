/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the UserDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDetails{}

// UserDetails The details of the User synced from Okta
type UserDetails struct {
	// The email associated with the User
	Email NullableString `json:"email,omitempty"`
	// The first name of the User
	FirstName NullableString `json:"first_name,omitempty"`
	// The last name of the User
	LastName NullableString `json:"last_name,omitempty"`
	// The full name of the User
	FullName NullableString `json:"full_name,omitempty"`
}

// NewUserDetails instantiates a new UserDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDetails() *UserDetails {
	this := UserDetails{}
	return &this
}

// NewUserDetailsWithDefaults instantiates a new UserDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDetailsWithDefaults() *UserDetails {
	this := UserDetails{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDetails) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDetails) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *UserDetails) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *UserDetails) SetEmail(v string) *UserDetails {
	o.Email.Set(&v)
	return o
}

// SetEmailNil sets the value for Email to be an explicit nil
func (o *UserDetails) SetEmailNil() *UserDetails {
	o.Email.Set(nil)
	return o
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *UserDetails) UnsetEmail() *UserDetails {
	o.Email.Unset()
	return o
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDetails) GetFirstName() string {
	if o == nil || IsNil(o.FirstName.Get()) {
		var ret string
		return ret
	}
	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDetails) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserDetails) HasFirstName() bool {
	if o != nil && o.FirstName.IsSet() {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given NullableString and assigns it to the FirstName field.
func (o *UserDetails) SetFirstName(v string) *UserDetails {
	o.FirstName.Set(&v)
	return o
}

// SetFirstNameNil sets the value for FirstName to be an explicit nil
func (o *UserDetails) SetFirstNameNil() *UserDetails {
	o.FirstName.Set(nil)
	return o
}

// UnsetFirstName ensures that no value is present for FirstName, not even an explicit nil
func (o *UserDetails) UnsetFirstName() *UserDetails {
	o.FirstName.Unset()
	return o
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDetails) GetLastName() string {
	if o == nil || IsNil(o.LastName.Get()) {
		var ret string
		return ret
	}
	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDetails) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// HasLastName returns a boolean if a field has been set.
func (o *UserDetails) HasLastName() bool {
	if o != nil && o.LastName.IsSet() {
		return true
	}

	return false
}

// SetLastName gets a reference to the given NullableString and assigns it to the LastName field.
func (o *UserDetails) SetLastName(v string) *UserDetails {
	o.LastName.Set(&v)
	return o
}

// SetLastNameNil sets the value for LastName to be an explicit nil
func (o *UserDetails) SetLastNameNil() *UserDetails {
	o.LastName.Set(nil)
	return o
}

// UnsetLastName ensures that no value is present for LastName, not even an explicit nil
func (o *UserDetails) UnsetLastName() *UserDetails {
	o.LastName.Unset()
	return o
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDetails) GetFullName() string {
	if o == nil || IsNil(o.FullName.Get()) {
		var ret string
		return ret
	}
	return *o.FullName.Get()
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDetails) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullName.Get(), o.FullName.IsSet()
}

// HasFullName returns a boolean if a field has been set.
func (o *UserDetails) HasFullName() bool {
	if o != nil && o.FullName.IsSet() {
		return true
	}

	return false
}

// SetFullName gets a reference to the given NullableString and assigns it to the FullName field.
func (o *UserDetails) SetFullName(v string) *UserDetails {
	o.FullName.Set(&v)
	return o
}

// SetFullNameNil sets the value for FullName to be an explicit nil
func (o *UserDetails) SetFullNameNil() *UserDetails {
	o.FullName.Set(nil)
	return o
}

// UnsetFullName ensures that no value is present for FullName, not even an explicit nil
func (o *UserDetails) UnsetFullName() *UserDetails {
	o.FullName.Unset()
	return o
}

func (o UserDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.FirstName.IsSet() {
		toSerialize["first_name"] = o.FirstName.Get()
	}
	if o.LastName.IsSet() {
		toSerialize["last_name"] = o.LastName.Get()
	}
	if o.FullName.IsSet() {
		toSerialize["full_name"] = o.FullName.Get()
	}
	return toSerialize, nil
}

type NullableUserDetails struct {
	value *UserDetails
	isSet bool
}

func (v NullableUserDetails) Get() *UserDetails {
	return v.value
}

func (v *NullableUserDetails) Set(val *UserDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDetails(val *UserDetails) *NullableUserDetails {
	return &NullableUserDetails{value: val, isSet: true}
}

func (v NullableUserDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
