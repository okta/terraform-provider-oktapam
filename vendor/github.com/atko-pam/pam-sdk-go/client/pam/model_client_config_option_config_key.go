/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// ClientConfigOptionConfigKey The name of the Client Configuration Option
type ClientConfigOptionConfigKey string

// List of ClientConfigOptionConfigKey
const (
	ClientConfigOptionConfigKey_SSH_INSECURE_FORWARD_AGENT  ClientConfigOptionConfigKey = "ssh.insecure_forward_agent"
	ClientConfigOptionConfigKey_SSH_PORT_FORWARD_METHOD     ClientConfigOptionConfigKey = "ssh.port_forward_method"
	ClientConfigOptionConfigKey_FORWARD_CLIENT_TRUST_ENABLE ClientConfigOptionConfigKey = "forward_client_trust.enable"
)

// All allowed values of ClientConfigOptionConfigKey enum
var AllowedClientConfigOptionConfigKeyEnumValues = []ClientConfigOptionConfigKey{
	"ssh.insecure_forward_agent",
	"ssh.port_forward_method",
	"forward_client_trust.enable",
}

func (v *ClientConfigOptionConfigKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientConfigOptionConfigKey(value)
	for _, existing := range AllowedClientConfigOptionConfigKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientConfigOptionConfigKey", value)
}

// NewClientConfigOptionConfigKeyFromValue returns a pointer to a valid ClientConfigOptionConfigKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientConfigOptionConfigKeyFromValue(v string) (*ClientConfigOptionConfigKey, error) {
	ev := ClientConfigOptionConfigKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientConfigOptionConfigKey: valid values are %v", v, AllowedClientConfigOptionConfigKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientConfigOptionConfigKey) IsValid() bool {
	for _, existing := range AllowedClientConfigOptionConfigKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClientConfigOptionConfigKey value
func (v ClientConfigOptionConfigKey) Ptr() *ClientConfigOptionConfigKey {
	return &v
}

type NullableClientConfigOptionConfigKey struct {
	value *ClientConfigOptionConfigKey
	isSet bool
}

func (v NullableClientConfigOptionConfigKey) Get() *ClientConfigOptionConfigKey {
	return v.value
}

func (v *NullableClientConfigOptionConfigKey) Set(val *ClientConfigOptionConfigKey) {
	v.value = val
	v.isSet = true
}

func (v NullableClientConfigOptionConfigKey) IsSet() bool {
	return v.isSet
}

func (v *NullableClientConfigOptionConfigKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientConfigOptionConfigKey(val *ClientConfigOptionConfigKey) *NullableClientConfigOptionConfigKey {
	return &NullableClientConfigOptionConfigKey{value: val, isSet: true}
}

func (v NullableClientConfigOptionConfigKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientConfigOptionConfigKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
