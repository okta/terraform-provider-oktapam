/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SelectorIndividualServerAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectorIndividualServerAccount{}

// SelectorIndividualServerAccount This resource selector identifies a specific user account that exists on a specific enrolled server
type SelectorIndividualServerAccount struct {
	Type   string      `json:"_type"`
	Server NamedObject `json:"server"`
	// A server account that exists on the Server
	Username *string `json:"username,omitempty"`
}

// NewSelectorIndividualServerAccount instantiates a new SelectorIndividualServerAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorIndividualServerAccount(type_ string, server NamedObject) *SelectorIndividualServerAccount {
	this := SelectorIndividualServerAccount{}
	this.Type = type_
	this.Server = server
	return &this
}

// NewSelectorIndividualServerAccountWithDefaults instantiates a new SelectorIndividualServerAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorIndividualServerAccountWithDefaults() *SelectorIndividualServerAccount {
	this := SelectorIndividualServerAccount{}
	return &this
}

// GetType returns the Type field value
func (o *SelectorIndividualServerAccount) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SelectorIndividualServerAccount) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SelectorIndividualServerAccount) SetType(v string) *SelectorIndividualServerAccount {
	o.Type = v
	return o
}

// GetServer returns the Server field value
func (o *SelectorIndividualServerAccount) GetServer() NamedObject {
	if o == nil {
		var ret NamedObject
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *SelectorIndividualServerAccount) GetServerOk() (*NamedObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *SelectorIndividualServerAccount) SetServer(v NamedObject) *SelectorIndividualServerAccount {
	o.Server = v
	return o
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SelectorIndividualServerAccount) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorIndividualServerAccount) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SelectorIndividualServerAccount) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SelectorIndividualServerAccount) SetUsername(v string) *SelectorIndividualServerAccount {
	o.Username = &v
	return o
}

func (o SelectorIndividualServerAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectorIndividualServerAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_type"] = o.Type
	toSerialize["server"] = o.Server
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableSelectorIndividualServerAccount struct {
	value *SelectorIndividualServerAccount
	isSet bool
}

func (v NullableSelectorIndividualServerAccount) Get() *SelectorIndividualServerAccount {
	return v.value
}

func (v *NullableSelectorIndividualServerAccount) Set(val *SelectorIndividualServerAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorIndividualServerAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorIndividualServerAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorIndividualServerAccount(val *SelectorIndividualServerAccount) *NullableSelectorIndividualServerAccount {
	return &NullableSelectorIndividualServerAccount{value: val, isSet: true}
}

func (v NullableSelectorIndividualServerAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorIndividualServerAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
