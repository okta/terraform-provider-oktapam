/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryConnectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryConnectionRequest{}

// ActiveDirectoryConnectionRequest struct for ActiveDirectoryConnectionRequest
type ActiveDirectoryConnectionRequest struct {
	// The name of the Active Directory connection
	Name string `json:"name"`
	// The human-readable name for the domain
	Domain string `json:"domain"`
	// The protocol of the Active Directory connection
	Protocol       string          `json:"protocol"`
	TrustedRootCas []TrustedRootCA `json:"trusted_root_cas,omitempty"`
	// (Optional) To restrict which domain controller to talk to
	Hostname *string `json:"hostname,omitempty"`
	// The username of the service account
	ServiceAccountUsername string `json:"service_account_username"`
	// The encrypted password of the service account
	ServiceAccountPasswordJwe EncryptedString `json:"service_account_password_jwe"`
	// The list of gateway labels to use for a connection
	GatewaySelector []string `json:"gateway_selector"`
}

// NewActiveDirectoryConnectionRequest instantiates a new ActiveDirectoryConnectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryConnectionRequest(name string, domain string, protocol string, serviceAccountUsername string, serviceAccountPasswordJwe EncryptedString, gatewaySelector []string) *ActiveDirectoryConnectionRequest {
	this := ActiveDirectoryConnectionRequest{}
	this.Name = name
	this.Domain = domain
	this.Protocol = protocol
	this.ServiceAccountUsername = serviceAccountUsername
	this.ServiceAccountPasswordJwe = serviceAccountPasswordJwe
	this.GatewaySelector = gatewaySelector
	return &this
}

// NewActiveDirectoryConnectionRequestWithDefaults instantiates a new ActiveDirectoryConnectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryConnectionRequestWithDefaults() *ActiveDirectoryConnectionRequest {
	this := ActiveDirectoryConnectionRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ActiveDirectoryConnectionRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ActiveDirectoryConnectionRequest) SetName(v string) *ActiveDirectoryConnectionRequest {
	o.Name = v
	return o
}

// GetDomain returns the Domain field value
func (o *ActiveDirectoryConnectionRequest) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionRequest) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ActiveDirectoryConnectionRequest) SetDomain(v string) *ActiveDirectoryConnectionRequest {
	o.Domain = v
	return o
}

// GetProtocol returns the Protocol field value
func (o *ActiveDirectoryConnectionRequest) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionRequest) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *ActiveDirectoryConnectionRequest) SetProtocol(v string) *ActiveDirectoryConnectionRequest {
	o.Protocol = v
	return o
}

// GetTrustedRootCas returns the TrustedRootCas field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionRequest) GetTrustedRootCas() []TrustedRootCA {
	if o == nil || IsNil(o.TrustedRootCas) {
		var ret []TrustedRootCA
		return ret
	}
	return o.TrustedRootCas
}

// GetTrustedRootCasOk returns a tuple with the TrustedRootCas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionRequest) GetTrustedRootCasOk() ([]TrustedRootCA, bool) {
	if o == nil || IsNil(o.TrustedRootCas) {
		return nil, false
	}
	return o.TrustedRootCas, true
}

// HasTrustedRootCas returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionRequest) HasTrustedRootCas() bool {
	if o != nil && !IsNil(o.TrustedRootCas) {
		return true
	}

	return false
}

// SetTrustedRootCas gets a reference to the given []TrustedRootCA and assigns it to the TrustedRootCas field.
func (o *ActiveDirectoryConnectionRequest) SetTrustedRootCas(v []TrustedRootCA) *ActiveDirectoryConnectionRequest {
	o.TrustedRootCas = v
	return o
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionRequest) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionRequest) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionRequest) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ActiveDirectoryConnectionRequest) SetHostname(v string) *ActiveDirectoryConnectionRequest {
	o.Hostname = &v
	return o
}

// GetServiceAccountUsername returns the ServiceAccountUsername field value
func (o *ActiveDirectoryConnectionRequest) GetServiceAccountUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceAccountUsername
}

// GetServiceAccountUsernameOk returns a tuple with the ServiceAccountUsername field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionRequest) GetServiceAccountUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceAccountUsername, true
}

// SetServiceAccountUsername sets field value
func (o *ActiveDirectoryConnectionRequest) SetServiceAccountUsername(v string) *ActiveDirectoryConnectionRequest {
	o.ServiceAccountUsername = v
	return o
}

// GetServiceAccountPasswordJwe returns the ServiceAccountPasswordJwe field value
func (o *ActiveDirectoryConnectionRequest) GetServiceAccountPasswordJwe() EncryptedString {
	if o == nil {
		var ret EncryptedString
		return ret
	}

	return o.ServiceAccountPasswordJwe
}

// GetServiceAccountPasswordJweOk returns a tuple with the ServiceAccountPasswordJwe field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionRequest) GetServiceAccountPasswordJweOk() (*EncryptedString, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceAccountPasswordJwe, true
}

// SetServiceAccountPasswordJwe sets field value
func (o *ActiveDirectoryConnectionRequest) SetServiceAccountPasswordJwe(v EncryptedString) *ActiveDirectoryConnectionRequest {
	o.ServiceAccountPasswordJwe = v
	return o
}

// GetGatewaySelector returns the GatewaySelector field value
func (o *ActiveDirectoryConnectionRequest) GetGatewaySelector() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.GatewaySelector
}

// GetGatewaySelectorOk returns a tuple with the GatewaySelector field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionRequest) GetGatewaySelectorOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GatewaySelector, true
}

// SetGatewaySelector sets field value
func (o *ActiveDirectoryConnectionRequest) SetGatewaySelector(v []string) *ActiveDirectoryConnectionRequest {
	o.GatewaySelector = v
	return o
}

func (o ActiveDirectoryConnectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryConnectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["domain"] = o.Domain
	toSerialize["protocol"] = o.Protocol
	if !IsNil(o.TrustedRootCas) {
		toSerialize["trusted_root_cas"] = o.TrustedRootCas
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	toSerialize["service_account_username"] = o.ServiceAccountUsername
	toSerialize["service_account_password_jwe"] = o.ServiceAccountPasswordJwe
	toSerialize["gateway_selector"] = o.GatewaySelector
	return toSerialize, nil
}

type NullableActiveDirectoryConnectionRequest struct {
	value *ActiveDirectoryConnectionRequest
	isSet bool
}

func (v NullableActiveDirectoryConnectionRequest) Get() *ActiveDirectoryConnectionRequest {
	return v.value
}

func (v *NullableActiveDirectoryConnectionRequest) Set(val *ActiveDirectoryConnectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryConnectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryConnectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryConnectionRequest(val *ActiveDirectoryConnectionRequest) *NullableActiveDirectoryConnectionRequest {
	return &NullableActiveDirectoryConnectionRequest{value: val, isSet: true}
}

func (v NullableActiveDirectoryConnectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryConnectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
