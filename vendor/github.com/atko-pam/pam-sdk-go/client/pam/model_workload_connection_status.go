/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// WorkloadConnectionStatus The workload connection status
type WorkloadConnectionStatus string

// List of WorkloadConnectionStatus
const (
	WorkloadConnectionStatus_DRAFT    WorkloadConnectionStatus = "DRAFT"
	WorkloadConnectionStatus_ACTIVE   WorkloadConnectionStatus = "ACTIVE"
	WorkloadConnectionStatus_INACTIVE WorkloadConnectionStatus = "INACTIVE"
	WorkloadConnectionStatus_DELETED  WorkloadConnectionStatus = "DELETED"
)

// All allowed values of WorkloadConnectionStatus enum
var AllowedWorkloadConnectionStatusEnumValues = []WorkloadConnectionStatus{
	"DRAFT",
	"ACTIVE",
	"INACTIVE",
	"DELETED",
}

func (v *WorkloadConnectionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkloadConnectionStatus(value)

	*v = enumTypeValue

	return nil
}

// NewWorkloadConnectionStatusFromValue returns a pointer to a valid WorkloadConnectionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkloadConnectionStatusFromValue(v string) (*WorkloadConnectionStatus, error) {
	ev := WorkloadConnectionStatus(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkloadConnectionStatus) IsValid() bool {
	for _, existing := range AllowedWorkloadConnectionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkloadConnectionStatus value
func (v WorkloadConnectionStatus) Ptr() *WorkloadConnectionStatus {
	return &v
}

type NullableWorkloadConnectionStatus struct {
	value *WorkloadConnectionStatus
	isSet bool
}

func (v NullableWorkloadConnectionStatus) Get() *WorkloadConnectionStatus {
	return v.value
}

func (v *NullableWorkloadConnectionStatus) Set(val *WorkloadConnectionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadConnectionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadConnectionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadConnectionStatus(val *WorkloadConnectionStatus) *NullableWorkloadConnectionStatus {
	return &NullableWorkloadConnectionStatus{value: val, isSet: true}
}

func (v NullableWorkloadConnectionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadConnectionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
