/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the MFAApprovalState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MFAApprovalState{}

// MFAApprovalState State for a MFA Approval
type MFAApprovalState struct {
	State *string `json:"state,omitempty"`
}

// NewMFAApprovalState instantiates a new MFAApprovalState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMFAApprovalState() *MFAApprovalState {
	this := MFAApprovalState{}
	return &this
}

// NewMFAApprovalStateWithDefaults instantiates a new MFAApprovalState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMFAApprovalStateWithDefaults() *MFAApprovalState {
	this := MFAApprovalState{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *MFAApprovalState) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MFAApprovalState) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *MFAApprovalState) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *MFAApprovalState) SetState(v string) *MFAApprovalState {
	o.State = &v
	return o
}

func (o MFAApprovalState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MFAApprovalState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableMFAApprovalState struct {
	value *MFAApprovalState
	isSet bool
}

func (v NullableMFAApprovalState) Get() *MFAApprovalState {
	return v.value
}

func (v *NullableMFAApprovalState) Set(val *MFAApprovalState) {
	v.value = val
	v.isSet = true
}

func (v NullableMFAApprovalState) IsSet() bool {
	return v.isSet
}

func (v *NullableMFAApprovalState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFAApprovalState(val *MFAApprovalState) *NullableMFAApprovalState {
	return &NullableMFAApprovalState{value: val, isSet: true}
}

func (v NullableMFAApprovalState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFAApprovalState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
