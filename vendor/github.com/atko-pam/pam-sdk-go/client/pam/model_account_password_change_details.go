/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the AccountPasswordChangeDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountPasswordChangeDetails{}

// AccountPasswordChangeDetails Common struct that contains all password change metadata fields including number of rotations and rotation reason
type AccountPasswordChangeDetails struct {
	// The number of times an account's password was successfully changed
	PasswordChangeSuccessCount *int32 `json:"password_change_success_count,omitempty"`
	// The number of times an account's password change resulted in failure
	PasswordChangeErrorCount *int32 `json:"password_change_error_count,omitempty"`
	// The number of times an account's password change failed after the last successful attempt
	PasswordChangeErrorCountSinceLastSuccess *int32 `json:"password_change_error_count_since_last_success,omitempty"`
	// A timestamp indicating when OPA last reported a change to the account password
	LastPasswordChangeSuccessReportTimestamp *time.Time `json:"last_password_change_success_report_timestamp,omitempty"`
	// A timestamp reported from the remote system indicating when the remote system last changed the account password
	LastPasswordChangeSystemTimestamp *time.Time `json:"last_password_change_system_timestamp,omitempty"`
	// A timestamp indicating when the remote system last reported a failure to change to the account password
	LastPasswordChangeErrorReportTimestamp *time.Time `json:"last_password_change_error_report_timestamp,omitempty"`
	// A timestamp reported from the remote system indicating when the remote system last failed to change the account password
	LastPasswordChangeErrorSystemTimestamp *time.Time `json:"last_password_change_error_system_timestamp,omitempty"`
	// The type of error message reported during the most recent failure to change the account password
	LastPasswordChangeErrorType *string `json:"last_password_change_error_type,omitempty"`
	// The error message metadata reported during the most recent failure to change the account password
	LastPasswordChangeErrorMetadata *string `json:"last_password_change_error_metadata,omitempty"`
}

// NewAccountPasswordChangeDetails instantiates a new AccountPasswordChangeDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountPasswordChangeDetails() *AccountPasswordChangeDetails {
	this := AccountPasswordChangeDetails{}
	return &this
}

// NewAccountPasswordChangeDetailsWithDefaults instantiates a new AccountPasswordChangeDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountPasswordChangeDetailsWithDefaults() *AccountPasswordChangeDetails {
	this := AccountPasswordChangeDetails{}
	return &this
}

// GetPasswordChangeSuccessCount returns the PasswordChangeSuccessCount field value if set, zero value otherwise.
func (o *AccountPasswordChangeDetails) GetPasswordChangeSuccessCount() int32 {
	if o == nil || IsNil(o.PasswordChangeSuccessCount) {
		var ret int32
		return ret
	}
	return *o.PasswordChangeSuccessCount
}

// GetPasswordChangeSuccessCountOk returns a tuple with the PasswordChangeSuccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordChangeDetails) GetPasswordChangeSuccessCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordChangeSuccessCount) {
		return nil, false
	}
	return o.PasswordChangeSuccessCount, true
}

// HasPasswordChangeSuccessCount returns a boolean if a field has been set.
func (o *AccountPasswordChangeDetails) HasPasswordChangeSuccessCount() bool {
	if o != nil && !IsNil(o.PasswordChangeSuccessCount) {
		return true
	}

	return false
}

// SetPasswordChangeSuccessCount gets a reference to the given int32 and assigns it to the PasswordChangeSuccessCount field.
func (o *AccountPasswordChangeDetails) SetPasswordChangeSuccessCount(v int32) *AccountPasswordChangeDetails {
	o.PasswordChangeSuccessCount = &v
	return o
}

// GetPasswordChangeErrorCount returns the PasswordChangeErrorCount field value if set, zero value otherwise.
func (o *AccountPasswordChangeDetails) GetPasswordChangeErrorCount() int32 {
	if o == nil || IsNil(o.PasswordChangeErrorCount) {
		var ret int32
		return ret
	}
	return *o.PasswordChangeErrorCount
}

// GetPasswordChangeErrorCountOk returns a tuple with the PasswordChangeErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordChangeDetails) GetPasswordChangeErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordChangeErrorCount) {
		return nil, false
	}
	return o.PasswordChangeErrorCount, true
}

// HasPasswordChangeErrorCount returns a boolean if a field has been set.
func (o *AccountPasswordChangeDetails) HasPasswordChangeErrorCount() bool {
	if o != nil && !IsNil(o.PasswordChangeErrorCount) {
		return true
	}

	return false
}

// SetPasswordChangeErrorCount gets a reference to the given int32 and assigns it to the PasswordChangeErrorCount field.
func (o *AccountPasswordChangeDetails) SetPasswordChangeErrorCount(v int32) *AccountPasswordChangeDetails {
	o.PasswordChangeErrorCount = &v
	return o
}

// GetPasswordChangeErrorCountSinceLastSuccess returns the PasswordChangeErrorCountSinceLastSuccess field value if set, zero value otherwise.
func (o *AccountPasswordChangeDetails) GetPasswordChangeErrorCountSinceLastSuccess() int32 {
	if o == nil || IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		var ret int32
		return ret
	}
	return *o.PasswordChangeErrorCountSinceLastSuccess
}

// GetPasswordChangeErrorCountSinceLastSuccessOk returns a tuple with the PasswordChangeErrorCountSinceLastSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordChangeDetails) GetPasswordChangeErrorCountSinceLastSuccessOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		return nil, false
	}
	return o.PasswordChangeErrorCountSinceLastSuccess, true
}

// HasPasswordChangeErrorCountSinceLastSuccess returns a boolean if a field has been set.
func (o *AccountPasswordChangeDetails) HasPasswordChangeErrorCountSinceLastSuccess() bool {
	if o != nil && !IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		return true
	}

	return false
}

// SetPasswordChangeErrorCountSinceLastSuccess gets a reference to the given int32 and assigns it to the PasswordChangeErrorCountSinceLastSuccess field.
func (o *AccountPasswordChangeDetails) SetPasswordChangeErrorCountSinceLastSuccess(v int32) *AccountPasswordChangeDetails {
	o.PasswordChangeErrorCountSinceLastSuccess = &v
	return o
}

// GetLastPasswordChangeSuccessReportTimestamp returns the LastPasswordChangeSuccessReportTimestamp field value if set, zero value otherwise.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeSuccessReportTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeSuccessReportTimestamp
}

// GetLastPasswordChangeSuccessReportTimestampOk returns a tuple with the LastPasswordChangeSuccessReportTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeSuccessReportTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeSuccessReportTimestamp, true
}

// HasLastPasswordChangeSuccessReportTimestamp returns a boolean if a field has been set.
func (o *AccountPasswordChangeDetails) HasLastPasswordChangeSuccessReportTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeSuccessReportTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeSuccessReportTimestamp field.
func (o *AccountPasswordChangeDetails) SetLastPasswordChangeSuccessReportTimestamp(v time.Time) *AccountPasswordChangeDetails {
	o.LastPasswordChangeSuccessReportTimestamp = &v
	return o
}

// GetLastPasswordChangeSystemTimestamp returns the LastPasswordChangeSystemTimestamp field value if set, zero value otherwise.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeSystemTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeSystemTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeSystemTimestamp
}

// GetLastPasswordChangeSystemTimestampOk returns a tuple with the LastPasswordChangeSystemTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeSystemTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeSystemTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeSystemTimestamp, true
}

// HasLastPasswordChangeSystemTimestamp returns a boolean if a field has been set.
func (o *AccountPasswordChangeDetails) HasLastPasswordChangeSystemTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeSystemTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeSystemTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeSystemTimestamp field.
func (o *AccountPasswordChangeDetails) SetLastPasswordChangeSystemTimestamp(v time.Time) *AccountPasswordChangeDetails {
	o.LastPasswordChangeSystemTimestamp = &v
	return o
}

// GetLastPasswordChangeErrorReportTimestamp returns the LastPasswordChangeErrorReportTimestamp field value if set, zero value otherwise.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeErrorReportTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeErrorReportTimestamp
}

// GetLastPasswordChangeErrorReportTimestampOk returns a tuple with the LastPasswordChangeErrorReportTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeErrorReportTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeErrorReportTimestamp, true
}

// HasLastPasswordChangeErrorReportTimestamp returns a boolean if a field has been set.
func (o *AccountPasswordChangeDetails) HasLastPasswordChangeErrorReportTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorReportTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeErrorReportTimestamp field.
func (o *AccountPasswordChangeDetails) SetLastPasswordChangeErrorReportTimestamp(v time.Time) *AccountPasswordChangeDetails {
	o.LastPasswordChangeErrorReportTimestamp = &v
	return o
}

// GetLastPasswordChangeErrorSystemTimestamp returns the LastPasswordChangeErrorSystemTimestamp field value if set, zero value otherwise.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeErrorSystemTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeErrorSystemTimestamp
}

// GetLastPasswordChangeErrorSystemTimestampOk returns a tuple with the LastPasswordChangeErrorSystemTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeErrorSystemTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeErrorSystemTimestamp, true
}

// HasLastPasswordChangeErrorSystemTimestamp returns a boolean if a field has been set.
func (o *AccountPasswordChangeDetails) HasLastPasswordChangeErrorSystemTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorSystemTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeErrorSystemTimestamp field.
func (o *AccountPasswordChangeDetails) SetLastPasswordChangeErrorSystemTimestamp(v time.Time) *AccountPasswordChangeDetails {
	o.LastPasswordChangeErrorSystemTimestamp = &v
	return o
}

// GetLastPasswordChangeErrorType returns the LastPasswordChangeErrorType field value if set, zero value otherwise.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeErrorType() string {
	if o == nil || IsNil(o.LastPasswordChangeErrorType) {
		var ret string
		return ret
	}
	return *o.LastPasswordChangeErrorType
}

// GetLastPasswordChangeErrorTypeOk returns a tuple with the LastPasswordChangeErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeErrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorType) {
		return nil, false
	}
	return o.LastPasswordChangeErrorType, true
}

// HasLastPasswordChangeErrorType returns a boolean if a field has been set.
func (o *AccountPasswordChangeDetails) HasLastPasswordChangeErrorType() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorType) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorType gets a reference to the given string and assigns it to the LastPasswordChangeErrorType field.
func (o *AccountPasswordChangeDetails) SetLastPasswordChangeErrorType(v string) *AccountPasswordChangeDetails {
	o.LastPasswordChangeErrorType = &v
	return o
}

// GetLastPasswordChangeErrorMetadata returns the LastPasswordChangeErrorMetadata field value if set, zero value otherwise.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeErrorMetadata() string {
	if o == nil || IsNil(o.LastPasswordChangeErrorMetadata) {
		var ret string
		return ret
	}
	return *o.LastPasswordChangeErrorMetadata
}

// GetLastPasswordChangeErrorMetadataOk returns a tuple with the LastPasswordChangeErrorMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPasswordChangeDetails) GetLastPasswordChangeErrorMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorMetadata) {
		return nil, false
	}
	return o.LastPasswordChangeErrorMetadata, true
}

// HasLastPasswordChangeErrorMetadata returns a boolean if a field has been set.
func (o *AccountPasswordChangeDetails) HasLastPasswordChangeErrorMetadata() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorMetadata) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorMetadata gets a reference to the given string and assigns it to the LastPasswordChangeErrorMetadata field.
func (o *AccountPasswordChangeDetails) SetLastPasswordChangeErrorMetadata(v string) *AccountPasswordChangeDetails {
	o.LastPasswordChangeErrorMetadata = &v
	return o
}

func (o AccountPasswordChangeDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountPasswordChangeDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PasswordChangeSuccessCount) {
		toSerialize["password_change_success_count"] = o.PasswordChangeSuccessCount
	}
	if !IsNil(o.PasswordChangeErrorCount) {
		toSerialize["password_change_error_count"] = o.PasswordChangeErrorCount
	}
	if !IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		toSerialize["password_change_error_count_since_last_success"] = o.PasswordChangeErrorCountSinceLastSuccess
	}
	if !IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		toSerialize["last_password_change_success_report_timestamp"] = o.LastPasswordChangeSuccessReportTimestamp
	}
	if !IsNil(o.LastPasswordChangeSystemTimestamp) {
		toSerialize["last_password_change_system_timestamp"] = o.LastPasswordChangeSystemTimestamp
	}
	if !IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		toSerialize["last_password_change_error_report_timestamp"] = o.LastPasswordChangeErrorReportTimestamp
	}
	if !IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		toSerialize["last_password_change_error_system_timestamp"] = o.LastPasswordChangeErrorSystemTimestamp
	}
	if !IsNil(o.LastPasswordChangeErrorType) {
		toSerialize["last_password_change_error_type"] = o.LastPasswordChangeErrorType
	}
	if !IsNil(o.LastPasswordChangeErrorMetadata) {
		toSerialize["last_password_change_error_metadata"] = o.LastPasswordChangeErrorMetadata
	}
	return toSerialize, nil
}

type NullableAccountPasswordChangeDetails struct {
	value *AccountPasswordChangeDetails
	isSet bool
}

func (v NullableAccountPasswordChangeDetails) Get() *AccountPasswordChangeDetails {
	return v.value
}

func (v *NullableAccountPasswordChangeDetails) Set(val *AccountPasswordChangeDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPasswordChangeDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPasswordChangeDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPasswordChangeDetails(val *AccountPasswordChangeDetails) *NullableAccountPasswordChangeDetails {
	return &NullableAccountPasswordChangeDetails{value: val, isSet: true}
}

func (v NullableAccountPasswordChangeDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPasswordChangeDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
