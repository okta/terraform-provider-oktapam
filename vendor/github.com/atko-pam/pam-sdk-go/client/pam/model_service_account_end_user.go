/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ServiceAccountEndUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceAccountEndUser{}

// ServiceAccountEndUser Service account info with account checkout details for end-user. Service account can either be a SaaS app account or Universal Directory account.
type ServiceAccountEndUser struct {
	Account         ServiceAccountEndUserAccount   `json:"account"`
	CheckoutDetails *ServiceAccountCheckoutDetails `json:"checkout_details,omitempty"`
}

// NewServiceAccountEndUser instantiates a new ServiceAccountEndUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceAccountEndUser(account ServiceAccountEndUserAccount) *ServiceAccountEndUser {
	this := ServiceAccountEndUser{}
	this.Account = account
	return &this
}

// NewServiceAccountEndUserWithDefaults instantiates a new ServiceAccountEndUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceAccountEndUserWithDefaults() *ServiceAccountEndUser {
	this := ServiceAccountEndUser{}
	return &this
}

// GetAccount returns the Account field value
func (o *ServiceAccountEndUser) GetAccount() ServiceAccountEndUserAccount {
	if o == nil {
		var ret ServiceAccountEndUserAccount
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *ServiceAccountEndUser) GetAccountOk() (*ServiceAccountEndUserAccount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *ServiceAccountEndUser) SetAccount(v ServiceAccountEndUserAccount) *ServiceAccountEndUser {
	o.Account = v
	return o
}

// GetCheckoutDetails returns the CheckoutDetails field value if set, zero value otherwise.
func (o *ServiceAccountEndUser) GetCheckoutDetails() ServiceAccountCheckoutDetails {
	if o == nil || IsNil(o.CheckoutDetails) {
		var ret ServiceAccountCheckoutDetails
		return ret
	}
	return *o.CheckoutDetails
}

// GetCheckoutDetailsOk returns a tuple with the CheckoutDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAccountEndUser) GetCheckoutDetailsOk() (*ServiceAccountCheckoutDetails, bool) {
	if o == nil || IsNil(o.CheckoutDetails) {
		return nil, false
	}
	return o.CheckoutDetails, true
}

// HasCheckoutDetails returns a boolean if a field has been set.
func (o *ServiceAccountEndUser) HasCheckoutDetails() bool {
	if o != nil && !IsNil(o.CheckoutDetails) {
		return true
	}

	return false
}

// SetCheckoutDetails gets a reference to the given ServiceAccountCheckoutDetails and assigns it to the CheckoutDetails field.
func (o *ServiceAccountEndUser) SetCheckoutDetails(v ServiceAccountCheckoutDetails) *ServiceAccountEndUser {
	o.CheckoutDetails = &v
	return o
}

func (o ServiceAccountEndUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceAccountEndUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account"] = o.Account
	if !IsNil(o.CheckoutDetails) {
		toSerialize["checkout_details"] = o.CheckoutDetails
	}
	return toSerialize, nil
}

type NullableServiceAccountEndUser struct {
	value *ServiceAccountEndUser
	isSet bool
}

func (v NullableServiceAccountEndUser) Get() *ServiceAccountEndUser {
	return v.value
}

func (v *NullableServiceAccountEndUser) Set(val *ServiceAccountEndUser) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAccountEndUser) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAccountEndUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAccountEndUser(val *ServiceAccountEndUser) *NullableServiceAccountEndUser {
	return &NullableServiceAccountEndUser{value: val, isSet: true}
}

func (v NullableServiceAccountEndUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAccountEndUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
