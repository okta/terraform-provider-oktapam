/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// CloudAccountProvider A cloud provider. Possible values: `aws` or `gce`.
type CloudAccountProvider string

// List of CloudAccountProvider
const (
	CloudAccountProvider_AWS CloudAccountProvider = "aws"
	CloudAccountProvider_GCS CloudAccountProvider = "gcs"
)

// All allowed values of CloudAccountProvider enum
var AllowedCloudAccountProviderEnumValues = []CloudAccountProvider{
	"aws",
	"gcs",
}

func (v *CloudAccountProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudAccountProvider(value)
	for _, existing := range AllowedCloudAccountProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudAccountProvider", value)
}

// NewCloudAccountProviderFromValue returns a pointer to a valid CloudAccountProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudAccountProviderFromValue(v string) (*CloudAccountProvider, error) {
	ev := CloudAccountProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudAccountProvider: valid values are %v", v, AllowedCloudAccountProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudAccountProvider) IsValid() bool {
	for _, existing := range AllowedCloudAccountProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudAccountProvider value
func (v CloudAccountProvider) Ptr() *CloudAccountProvider {
	return &v
}

type NullableCloudAccountProvider struct {
	value *CloudAccountProvider
	isSet bool
}

func (v NullableCloudAccountProvider) Get() *CloudAccountProvider {
	return v.value
}

func (v *NullableCloudAccountProvider) Set(val *CloudAccountProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudAccountProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudAccountProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudAccountProvider(val *CloudAccountProvider) *NullableCloudAccountProvider {
	return &NullableCloudAccountProvider{value: val, isSet: true}
}

func (v NullableCloudAccountProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudAccountProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
