/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyPrincipals type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyPrincipals{}

// SecurityPolicyPrincipals The User Groups associated with the Security Policy. Can include multiple Groups.
type SecurityPolicyPrincipals struct {
	// The User Groups associated with the Security Policy. Each User Group is defined in a separate object.
	UserGroups []NamedObject `json:"user_groups,omitempty"`
}

// NewSecurityPolicyPrincipals instantiates a new SecurityPolicyPrincipals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyPrincipals() *SecurityPolicyPrincipals {
	this := SecurityPolicyPrincipals{}
	return &this
}

// NewSecurityPolicyPrincipalsWithDefaults instantiates a new SecurityPolicyPrincipals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyPrincipalsWithDefaults() *SecurityPolicyPrincipals {
	this := SecurityPolicyPrincipals{}
	return &this
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise.
func (o *SecurityPolicyPrincipals) GetUserGroups() []NamedObject {
	if o == nil || IsNil(o.UserGroups) {
		var ret []NamedObject
		return ret
	}
	return o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyPrincipals) GetUserGroupsOk() ([]NamedObject, bool) {
	if o == nil || IsNil(o.UserGroups) {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *SecurityPolicyPrincipals) HasUserGroups() bool {
	if o != nil && !IsNil(o.UserGroups) {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given []NamedObject and assigns it to the UserGroups field.
func (o *SecurityPolicyPrincipals) SetUserGroups(v []NamedObject) *SecurityPolicyPrincipals {
	o.UserGroups = v
	return o
}

func (o SecurityPolicyPrincipals) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyPrincipals) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserGroups) {
		toSerialize["user_groups"] = o.UserGroups
	}
	return toSerialize, nil
}

type NullableSecurityPolicyPrincipals struct {
	value *SecurityPolicyPrincipals
	isSet bool
}

func (v NullableSecurityPolicyPrincipals) Get() *SecurityPolicyPrincipals {
	return v.value
}

func (v *NullableSecurityPolicyPrincipals) Set(val *SecurityPolicyPrincipals) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyPrincipals) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyPrincipals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyPrincipals(val *SecurityPolicyPrincipals) *NullableSecurityPolicyPrincipals {
	return &NullableSecurityPolicyPrincipals{value: val, isSet: true}
}

func (v NullableSecurityPolicyPrincipals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyPrincipals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
