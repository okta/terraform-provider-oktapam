/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// GovernanceContainer - struct for GovernanceContainer
type GovernanceContainer struct {
	GovernanceSaasAppInstance *GovernanceSaasAppInstance
}

// GovernanceSaasAppInstanceAsGovernanceContainer is a convenience function that returns GovernanceSaasAppInstance wrapped in GovernanceContainer
func GovernanceSaasAppInstanceAsGovernanceContainer(v *GovernanceSaasAppInstance) GovernanceContainer {
	return GovernanceContainer{
		GovernanceSaasAppInstance: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GovernanceContainer) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'GovernanceSaasAppInstance'
	if jsonDict["containerType"] == "GovernanceSaasAppInstance" {
		// try to unmarshal JSON data into GovernanceSaasAppInstance
		err = json.Unmarshal(data, &dst.GovernanceSaasAppInstance)
		if err == nil {
			return nil // data stored in dst.GovernanceSaasAppInstance, return on the first match
		} else {
			dst.GovernanceSaasAppInstance = nil
			return fmt.Errorf("failed to unmarshal GovernanceContainer as GovernanceSaasAppInstance: %s", err.Error())
		}
	}

	// check if the discriminator value is 'saas_app_instance'
	if jsonDict["containerType"] == "saas_app_instance" {
		// try to unmarshal JSON data into GovernanceSaasAppInstance
		err = json.Unmarshal(data, &dst.GovernanceSaasAppInstance)
		if err == nil {
			return nil // data stored in dst.GovernanceSaasAppInstance, return on the first match
		} else {
			dst.GovernanceSaasAppInstance = nil
			return fmt.Errorf("failed to unmarshal GovernanceContainer as GovernanceSaasAppInstance: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GovernanceContainer) MarshalJSON() ([]byte, error) {
	if src.GovernanceSaasAppInstance != nil {
		return json.Marshal(&src.GovernanceSaasAppInstance)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GovernanceContainer) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GovernanceSaasAppInstance != nil {
		return obj.GovernanceSaasAppInstance
	}

	// all schemas are nil
	return nil
}

type NullableGovernanceContainer struct {
	value *GovernanceContainer
	isSet bool
}

func (v NullableGovernanceContainer) Get() *GovernanceContainer {
	return v.value
}

func (v *NullableGovernanceContainer) Set(val *GovernanceContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableGovernanceContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableGovernanceContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGovernanceContainer(val *GovernanceContainer) *NullableGovernanceContainer {
	return &NullableGovernanceContainer{value: val, isSet: true}
}

func (v NullableGovernanceContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGovernanceContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
