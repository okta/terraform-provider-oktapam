/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the CurrentUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrentUserInfo{}

// CurrentUserInfo struct for CurrentUserInfo
type CurrentUserInfo struct {
	// The name of the team
	TeamName string `json:"team_name"`
	// The name of the user
	Name string `json:"name"`
	// The UUID of the user
	Id string `json:"id"`
}

// NewCurrentUserInfo instantiates a new CurrentUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentUserInfo(teamName string, name string, id string) *CurrentUserInfo {
	this := CurrentUserInfo{}
	this.TeamName = teamName
	this.Name = name
	this.Id = id
	return &this
}

// NewCurrentUserInfoWithDefaults instantiates a new CurrentUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentUserInfoWithDefaults() *CurrentUserInfo {
	this := CurrentUserInfo{}
	return &this
}

// GetTeamName returns the TeamName field value
func (o *CurrentUserInfo) GetTeamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value
// and a boolean to check if the value has been set.
func (o *CurrentUserInfo) GetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamName, true
}

// SetTeamName sets field value
func (o *CurrentUserInfo) SetTeamName(v string) *CurrentUserInfo {
	o.TeamName = v
	return o
}

// GetName returns the Name field value
func (o *CurrentUserInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CurrentUserInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CurrentUserInfo) SetName(v string) *CurrentUserInfo {
	o.Name = v
	return o
}

// GetId returns the Id field value
func (o *CurrentUserInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CurrentUserInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CurrentUserInfo) SetId(v string) *CurrentUserInfo {
	o.Id = v
	return o
}

func (o CurrentUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrentUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["team_name"] = o.TeamName
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableCurrentUserInfo struct {
	value *CurrentUserInfo
	isSet bool
}

func (v NullableCurrentUserInfo) Get() *CurrentUserInfo {
	return v.value
}

func (v *NullableCurrentUserInfo) Set(val *CurrentUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentUserInfo(val *CurrentUserInfo) *NullableCurrentUserInfo {
	return &NullableCurrentUserInfo{value: val, isSet: true}
}

func (v NullableCurrentUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
