/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ClientConfigOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientConfigOption{}

// ClientConfigOption struct for ClientConfigOption
type ClientConfigOption struct {
	ConfigKey   ClientConfigOptionConfigKey   `json:"config_key"`
	ConfigValue ClientConfigOptionConfigValue `json:"config_value"`
	// The UUID of a Client Configuration Option
	Id string `json:"id"`
}

// NewClientConfigOption instantiates a new ClientConfigOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientConfigOption(configKey ClientConfigOptionConfigKey, configValue ClientConfigOptionConfigValue, id string) *ClientConfigOption {
	this := ClientConfigOption{}
	this.ConfigKey = configKey
	this.ConfigValue = configValue
	this.Id = id
	return &this
}

// NewClientConfigOptionWithDefaults instantiates a new ClientConfigOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientConfigOptionWithDefaults() *ClientConfigOption {
	this := ClientConfigOption{}
	return &this
}

// GetConfigKey returns the ConfigKey field value
func (o *ClientConfigOption) GetConfigKey() ClientConfigOptionConfigKey {
	if o == nil {
		var ret ClientConfigOptionConfigKey
		return ret
	}

	return o.ConfigKey
}

// GetConfigKeyOk returns a tuple with the ConfigKey field value
// and a boolean to check if the value has been set.
func (o *ClientConfigOption) GetConfigKeyOk() (*ClientConfigOptionConfigKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigKey, true
}

// SetConfigKey sets field value
func (o *ClientConfigOption) SetConfigKey(v ClientConfigOptionConfigKey) *ClientConfigOption {
	o.ConfigKey = v
	return o
}

// GetConfigValue returns the ConfigValue field value
func (o *ClientConfigOption) GetConfigValue() ClientConfigOptionConfigValue {
	if o == nil {
		var ret ClientConfigOptionConfigValue
		return ret
	}

	return o.ConfigValue
}

// GetConfigValueOk returns a tuple with the ConfigValue field value
// and a boolean to check if the value has been set.
func (o *ClientConfigOption) GetConfigValueOk() (*ClientConfigOptionConfigValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigValue, true
}

// SetConfigValue sets field value
func (o *ClientConfigOption) SetConfigValue(v ClientConfigOptionConfigValue) *ClientConfigOption {
	o.ConfigValue = v
	return o
}

// GetId returns the Id field value
func (o *ClientConfigOption) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ClientConfigOption) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ClientConfigOption) SetId(v string) *ClientConfigOption {
	o.Id = v
	return o
}

func (o ClientConfigOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientConfigOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config_key"] = o.ConfigKey
	toSerialize["config_value"] = o.ConfigValue
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableClientConfigOption struct {
	value *ClientConfigOption
	isSet bool
}

func (v NullableClientConfigOption) Get() *ClientConfigOption {
	return v.value
}

func (v *NullableClientConfigOption) Set(val *ClientConfigOption) {
	v.value = val
	v.isSet = true
}

func (v NullableClientConfigOption) IsSet() bool {
	return v.isSet
}

func (v *NullableClientConfigOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientConfigOption(val *ClientConfigOption) *NullableClientConfigOption {
	return &NullableClientConfigOption{value: val, isSet: true}
}

func (v NullableClientConfigOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientConfigOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
