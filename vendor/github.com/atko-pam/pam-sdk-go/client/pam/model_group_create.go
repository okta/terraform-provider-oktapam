/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the GroupCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupCreate{}

// GroupCreate struct for GroupCreate
type GroupCreate struct {
	// A timestamp indicating when the Group was deleted
	DeletedAt time.Time `json:"deleted_at"`
	// The UUID of the Group
	Id string `json:"id"`
	// The name of the Group
	Name string `json:"name"`
	// The roles assigned to the Group
	Roles []GroupCreateRole `json:"roles"`
}

// NewGroupCreate instantiates a new GroupCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupCreate(deletedAt time.Time, id string, name string, roles []GroupCreateRole) *GroupCreate {
	this := GroupCreate{}
	this.DeletedAt = deletedAt
	this.Id = id
	this.Name = name
	this.Roles = roles
	return &this
}

// NewGroupCreateWithDefaults instantiates a new GroupCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupCreateWithDefaults() *GroupCreate {
	this := GroupCreate{}
	return &this
}

// GetDeletedAt returns the DeletedAt field value
func (o *GroupCreate) GetDeletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value
// and a boolean to check if the value has been set.
func (o *GroupCreate) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeletedAt, true
}

// SetDeletedAt sets field value
func (o *GroupCreate) SetDeletedAt(v time.Time) *GroupCreate {
	o.DeletedAt = v
	return o
}

// GetId returns the Id field value
func (o *GroupCreate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GroupCreate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GroupCreate) SetId(v string) *GroupCreate {
	o.Id = v
	return o
}

// GetName returns the Name field value
func (o *GroupCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GroupCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GroupCreate) SetName(v string) *GroupCreate {
	o.Name = v
	return o
}

// GetRoles returns the Roles field value
func (o *GroupCreate) GetRoles() []GroupCreateRole {
	if o == nil {
		var ret []GroupCreateRole
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *GroupCreate) GetRolesOk() ([]GroupCreateRole, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *GroupCreate) SetRoles(v []GroupCreateRole) *GroupCreate {
	o.Roles = v
	return o
}

func (o GroupCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deleted_at"] = o.DeletedAt
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["roles"] = o.Roles
	return toSerialize, nil
}

type NullableGroupCreate struct {
	value *GroupCreate
	isSet bool
}

func (v NullableGroupCreate) Get() *GroupCreate {
	return v.value
}

func (v *NullableGroupCreate) Set(val *GroupCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupCreate(val *GroupCreate) *NullableGroupCreate {
	return &NullableGroupCreate{value: val, isSet: true}
}

func (v NullableGroupCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
