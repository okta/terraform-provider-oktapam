/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// ADAccountSyncStatus The AD account sync status
type ADAccountSyncStatus string

// List of ADAccountSyncStatus
const (
	ADAccountSyncStatus_NOT_SYNCED       ADAccountSyncStatus = "NOT_SYNCED"
	ADAccountSyncStatus_SYNC_IN_PROGRESS ADAccountSyncStatus = "SYNC_IN_PROGRESS"
	ADAccountSyncStatus_SYNC_FAILED      ADAccountSyncStatus = "SYNC_FAILED"
	ADAccountSyncStatus_SYNC_COMPLETED   ADAccountSyncStatus = "SYNC_COMPLETED"
)

// All allowed values of ADAccountSyncStatus enum
var AllowedADAccountSyncStatusEnumValues = []ADAccountSyncStatus{
	"NOT_SYNCED",
	"SYNC_IN_PROGRESS",
	"SYNC_FAILED",
	"SYNC_COMPLETED",
}

func (v *ADAccountSyncStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ADAccountSyncStatus(value)

	*v = enumTypeValue

	return nil
}

// NewADAccountSyncStatusFromValue returns a pointer to a valid ADAccountSyncStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewADAccountSyncStatusFromValue(v string) (*ADAccountSyncStatus, error) {
	ev := ADAccountSyncStatus(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ADAccountSyncStatus) IsValid() bool {
	for _, existing := range AllowedADAccountSyncStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ADAccountSyncStatus value
func (v ADAccountSyncStatus) Ptr() *ADAccountSyncStatus {
	return &v
}

type NullableADAccountSyncStatus struct {
	value *ADAccountSyncStatus
	isSet bool
}

func (v NullableADAccountSyncStatus) Get() *ADAccountSyncStatus {
	return v.value
}

func (v *NullableADAccountSyncStatus) Set(val *ADAccountSyncStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableADAccountSyncStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableADAccountSyncStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADAccountSyncStatus(val *ADAccountSyncStatus) *NullableADAccountSyncStatus {
	return &NullableADAccountSyncStatus{value: val, isSet: true}
}

func (v NullableADAccountSyncStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADAccountSyncStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
