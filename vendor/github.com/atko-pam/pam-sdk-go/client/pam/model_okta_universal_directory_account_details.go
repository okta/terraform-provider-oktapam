/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the OktaUniversalDirectoryAccountDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OktaUniversalDirectoryAccountDetails{}

// OktaUniversalDirectoryAccountDetails struct for OktaUniversalDirectoryAccountDetails
type OktaUniversalDirectoryAccountDetails struct {
	// The UUID of the SaaS Application Account
	Id *string `json:"id,omitempty"`
	// The UUID of the Team associated with this Universal Directory account
	TeamId *string `json:"team_id,omitempty"`
	// The UUID of the Project associated with this Universal Directory account
	ProjectId *string `json:"project_id,omitempty"`
	// A human-readable name for the Universal Directory account
	AccountName *string `json:"account_name,omitempty"`
	// The username used to log into the Universal Directory account
	Username *string `json:"username,omitempty"`
	// A timestamp that indicates when the Universal Directory account was created
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The timestamp indicating when the Universal Directory account password is scheduled to be rotated next
	NextScheduledPasswordRotationTimestamp *time.Time `json:"next_scheduled_password_rotation_timestamp,omitempty"`
	// The reason for scheduling the next password rotation for the Universal Directory account
	NextScheduledPasswordRotationReason *string `json:"next_scheduled_password_rotation_reason,omitempty"`
	// Indicates whether this Universal Directory account is included in the checkout settings
	CheckoutEnabled *bool                       `json:"checkout_enabled,omitempty"`
	CheckoutStatus  *ResourceAvailabilityStatus `json:"checkout_status,omitempty"`
	// The username of the user who last accessed the Universal Directory accounts via checkout
	LastCheckoutUser *string `json:"last_checkout_user,omitempty"`
	// The period after checkout when a user's access to the Universal Directory account will expire
	CheckoutExpiryAt *time.Time `json:"checkout_expiry_at,omitempty"`
	// The number of times an account's password was successfully changed
	PasswordChangeSuccessCount *int32 `json:"password_change_success_count,omitempty"`
	// The number of times an account's password change resulted in failure
	PasswordChangeErrorCount *int32 `json:"password_change_error_count,omitempty"`
	// The number of times an account's password change failed after the last successful attempt
	PasswordChangeErrorCountSinceLastSuccess *int32 `json:"password_change_error_count_since_last_success,omitempty"`
	// A timestamp indicating when OPA last reported a change to the account password
	LastPasswordChangeSuccessReportTimestamp *time.Time `json:"last_password_change_success_report_timestamp,omitempty"`
	// A timestamp reported from the remote system indicating when the remote system last changed the account password
	LastPasswordChangeSystemTimestamp *time.Time `json:"last_password_change_system_timestamp,omitempty"`
	// A timestamp indicating when the remote system last reported a failure to change to the account password
	LastPasswordChangeErrorReportTimestamp *time.Time `json:"last_password_change_error_report_timestamp,omitempty"`
	// A timestamp reported from the remote system indicating when the remote system last failed to change the account password
	LastPasswordChangeErrorSystemTimestamp *time.Time `json:"last_password_change_error_system_timestamp,omitempty"`
	// The type of error message reported during the most recent failure to change the account password
	LastPasswordChangeErrorType *string `json:"last_password_change_error_type,omitempty"`
	// The error message metadata reported during the most recent failure to change the account password
	LastPasswordChangeErrorMetadata *string `json:"last_password_change_error_metadata,omitempty"`
}

// NewOktaUniversalDirectoryAccountDetails instantiates a new OktaUniversalDirectoryAccountDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOktaUniversalDirectoryAccountDetails() *OktaUniversalDirectoryAccountDetails {
	this := OktaUniversalDirectoryAccountDetails{}
	return &this
}

// NewOktaUniversalDirectoryAccountDetailsWithDefaults instantiates a new OktaUniversalDirectoryAccountDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOktaUniversalDirectoryAccountDetailsWithDefaults() *OktaUniversalDirectoryAccountDetails {
	this := OktaUniversalDirectoryAccountDetails{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OktaUniversalDirectoryAccountDetails) SetId(v string) *OktaUniversalDirectoryAccountDetails {
	o.Id = &v
	return o
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetTeamId() string {
	if o == nil || IsNil(o.TeamId) {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *OktaUniversalDirectoryAccountDetails) SetTeamId(v string) *OktaUniversalDirectoryAccountDetails {
	o.TeamId = &v
	return o
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *OktaUniversalDirectoryAccountDetails) SetProjectId(v string) *OktaUniversalDirectoryAccountDetails {
	o.ProjectId = &v
	return o
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *OktaUniversalDirectoryAccountDetails) SetAccountName(v string) *OktaUniversalDirectoryAccountDetails {
	o.AccountName = &v
	return o
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *OktaUniversalDirectoryAccountDetails) SetUsername(v string) *OktaUniversalDirectoryAccountDetails {
	o.Username = &v
	return o
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OktaUniversalDirectoryAccountDetails) SetCreatedAt(v time.Time) *OktaUniversalDirectoryAccountDetails {
	o.CreatedAt = &v
	return o
}

// GetNextScheduledPasswordRotationTimestamp returns the NextScheduledPasswordRotationTimestamp field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetNextScheduledPasswordRotationTimestamp() time.Time {
	if o == nil || IsNil(o.NextScheduledPasswordRotationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.NextScheduledPasswordRotationTimestamp
}

// GetNextScheduledPasswordRotationTimestampOk returns a tuple with the NextScheduledPasswordRotationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetNextScheduledPasswordRotationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextScheduledPasswordRotationTimestamp) {
		return nil, false
	}
	return o.NextScheduledPasswordRotationTimestamp, true
}

// HasNextScheduledPasswordRotationTimestamp returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasNextScheduledPasswordRotationTimestamp() bool {
	if o != nil && !IsNil(o.NextScheduledPasswordRotationTimestamp) {
		return true
	}

	return false
}

// SetNextScheduledPasswordRotationTimestamp gets a reference to the given time.Time and assigns it to the NextScheduledPasswordRotationTimestamp field.
func (o *OktaUniversalDirectoryAccountDetails) SetNextScheduledPasswordRotationTimestamp(v time.Time) *OktaUniversalDirectoryAccountDetails {
	o.NextScheduledPasswordRotationTimestamp = &v
	return o
}

// GetNextScheduledPasswordRotationReason returns the NextScheduledPasswordRotationReason field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetNextScheduledPasswordRotationReason() string {
	if o == nil || IsNil(o.NextScheduledPasswordRotationReason) {
		var ret string
		return ret
	}
	return *o.NextScheduledPasswordRotationReason
}

// GetNextScheduledPasswordRotationReasonOk returns a tuple with the NextScheduledPasswordRotationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetNextScheduledPasswordRotationReasonOk() (*string, bool) {
	if o == nil || IsNil(o.NextScheduledPasswordRotationReason) {
		return nil, false
	}
	return o.NextScheduledPasswordRotationReason, true
}

// HasNextScheduledPasswordRotationReason returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasNextScheduledPasswordRotationReason() bool {
	if o != nil && !IsNil(o.NextScheduledPasswordRotationReason) {
		return true
	}

	return false
}

// SetNextScheduledPasswordRotationReason gets a reference to the given string and assigns it to the NextScheduledPasswordRotationReason field.
func (o *OktaUniversalDirectoryAccountDetails) SetNextScheduledPasswordRotationReason(v string) *OktaUniversalDirectoryAccountDetails {
	o.NextScheduledPasswordRotationReason = &v
	return o
}

// GetCheckoutEnabled returns the CheckoutEnabled field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetCheckoutEnabled() bool {
	if o == nil || IsNil(o.CheckoutEnabled) {
		var ret bool
		return ret
	}
	return *o.CheckoutEnabled
}

// GetCheckoutEnabledOk returns a tuple with the CheckoutEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetCheckoutEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckoutEnabled) {
		return nil, false
	}
	return o.CheckoutEnabled, true
}

// HasCheckoutEnabled returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasCheckoutEnabled() bool {
	if o != nil && !IsNil(o.CheckoutEnabled) {
		return true
	}

	return false
}

// SetCheckoutEnabled gets a reference to the given bool and assigns it to the CheckoutEnabled field.
func (o *OktaUniversalDirectoryAccountDetails) SetCheckoutEnabled(v bool) *OktaUniversalDirectoryAccountDetails {
	o.CheckoutEnabled = &v
	return o
}

// GetCheckoutStatus returns the CheckoutStatus field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetCheckoutStatus() ResourceAvailabilityStatus {
	if o == nil || IsNil(o.CheckoutStatus) {
		var ret ResourceAvailabilityStatus
		return ret
	}
	return *o.CheckoutStatus
}

// GetCheckoutStatusOk returns a tuple with the CheckoutStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetCheckoutStatusOk() (*ResourceAvailabilityStatus, bool) {
	if o == nil || IsNil(o.CheckoutStatus) {
		return nil, false
	}
	return o.CheckoutStatus, true
}

// HasCheckoutStatus returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasCheckoutStatus() bool {
	if o != nil && !IsNil(o.CheckoutStatus) {
		return true
	}

	return false
}

// SetCheckoutStatus gets a reference to the given ResourceAvailabilityStatus and assigns it to the CheckoutStatus field.
func (o *OktaUniversalDirectoryAccountDetails) SetCheckoutStatus(v ResourceAvailabilityStatus) *OktaUniversalDirectoryAccountDetails {
	o.CheckoutStatus = &v
	return o
}

// GetLastCheckoutUser returns the LastCheckoutUser field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetLastCheckoutUser() string {
	if o == nil || IsNil(o.LastCheckoutUser) {
		var ret string
		return ret
	}
	return *o.LastCheckoutUser
}

// GetLastCheckoutUserOk returns a tuple with the LastCheckoutUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetLastCheckoutUserOk() (*string, bool) {
	if o == nil || IsNil(o.LastCheckoutUser) {
		return nil, false
	}
	return o.LastCheckoutUser, true
}

// HasLastCheckoutUser returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasLastCheckoutUser() bool {
	if o != nil && !IsNil(o.LastCheckoutUser) {
		return true
	}

	return false
}

// SetLastCheckoutUser gets a reference to the given string and assigns it to the LastCheckoutUser field.
func (o *OktaUniversalDirectoryAccountDetails) SetLastCheckoutUser(v string) *OktaUniversalDirectoryAccountDetails {
	o.LastCheckoutUser = &v
	return o
}

// GetCheckoutExpiryAt returns the CheckoutExpiryAt field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetCheckoutExpiryAt() time.Time {
	if o == nil || IsNil(o.CheckoutExpiryAt) {
		var ret time.Time
		return ret
	}
	return *o.CheckoutExpiryAt
}

// GetCheckoutExpiryAtOk returns a tuple with the CheckoutExpiryAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetCheckoutExpiryAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CheckoutExpiryAt) {
		return nil, false
	}
	return o.CheckoutExpiryAt, true
}

// HasCheckoutExpiryAt returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasCheckoutExpiryAt() bool {
	if o != nil && !IsNil(o.CheckoutExpiryAt) {
		return true
	}

	return false
}

// SetCheckoutExpiryAt gets a reference to the given time.Time and assigns it to the CheckoutExpiryAt field.
func (o *OktaUniversalDirectoryAccountDetails) SetCheckoutExpiryAt(v time.Time) *OktaUniversalDirectoryAccountDetails {
	o.CheckoutExpiryAt = &v
	return o
}

// GetPasswordChangeSuccessCount returns the PasswordChangeSuccessCount field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetPasswordChangeSuccessCount() int32 {
	if o == nil || IsNil(o.PasswordChangeSuccessCount) {
		var ret int32
		return ret
	}
	return *o.PasswordChangeSuccessCount
}

// GetPasswordChangeSuccessCountOk returns a tuple with the PasswordChangeSuccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetPasswordChangeSuccessCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordChangeSuccessCount) {
		return nil, false
	}
	return o.PasswordChangeSuccessCount, true
}

// HasPasswordChangeSuccessCount returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasPasswordChangeSuccessCount() bool {
	if o != nil && !IsNil(o.PasswordChangeSuccessCount) {
		return true
	}

	return false
}

// SetPasswordChangeSuccessCount gets a reference to the given int32 and assigns it to the PasswordChangeSuccessCount field.
func (o *OktaUniversalDirectoryAccountDetails) SetPasswordChangeSuccessCount(v int32) *OktaUniversalDirectoryAccountDetails {
	o.PasswordChangeSuccessCount = &v
	return o
}

// GetPasswordChangeErrorCount returns the PasswordChangeErrorCount field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetPasswordChangeErrorCount() int32 {
	if o == nil || IsNil(o.PasswordChangeErrorCount) {
		var ret int32
		return ret
	}
	return *o.PasswordChangeErrorCount
}

// GetPasswordChangeErrorCountOk returns a tuple with the PasswordChangeErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetPasswordChangeErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordChangeErrorCount) {
		return nil, false
	}
	return o.PasswordChangeErrorCount, true
}

// HasPasswordChangeErrorCount returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasPasswordChangeErrorCount() bool {
	if o != nil && !IsNil(o.PasswordChangeErrorCount) {
		return true
	}

	return false
}

// SetPasswordChangeErrorCount gets a reference to the given int32 and assigns it to the PasswordChangeErrorCount field.
func (o *OktaUniversalDirectoryAccountDetails) SetPasswordChangeErrorCount(v int32) *OktaUniversalDirectoryAccountDetails {
	o.PasswordChangeErrorCount = &v
	return o
}

// GetPasswordChangeErrorCountSinceLastSuccess returns the PasswordChangeErrorCountSinceLastSuccess field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetPasswordChangeErrorCountSinceLastSuccess() int32 {
	if o == nil || IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		var ret int32
		return ret
	}
	return *o.PasswordChangeErrorCountSinceLastSuccess
}

// GetPasswordChangeErrorCountSinceLastSuccessOk returns a tuple with the PasswordChangeErrorCountSinceLastSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetPasswordChangeErrorCountSinceLastSuccessOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		return nil, false
	}
	return o.PasswordChangeErrorCountSinceLastSuccess, true
}

// HasPasswordChangeErrorCountSinceLastSuccess returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasPasswordChangeErrorCountSinceLastSuccess() bool {
	if o != nil && !IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		return true
	}

	return false
}

// SetPasswordChangeErrorCountSinceLastSuccess gets a reference to the given int32 and assigns it to the PasswordChangeErrorCountSinceLastSuccess field.
func (o *OktaUniversalDirectoryAccountDetails) SetPasswordChangeErrorCountSinceLastSuccess(v int32) *OktaUniversalDirectoryAccountDetails {
	o.PasswordChangeErrorCountSinceLastSuccess = &v
	return o
}

// GetLastPasswordChangeSuccessReportTimestamp returns the LastPasswordChangeSuccessReportTimestamp field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeSuccessReportTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeSuccessReportTimestamp
}

// GetLastPasswordChangeSuccessReportTimestampOk returns a tuple with the LastPasswordChangeSuccessReportTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeSuccessReportTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeSuccessReportTimestamp, true
}

// HasLastPasswordChangeSuccessReportTimestamp returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasLastPasswordChangeSuccessReportTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeSuccessReportTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeSuccessReportTimestamp field.
func (o *OktaUniversalDirectoryAccountDetails) SetLastPasswordChangeSuccessReportTimestamp(v time.Time) *OktaUniversalDirectoryAccountDetails {
	o.LastPasswordChangeSuccessReportTimestamp = &v
	return o
}

// GetLastPasswordChangeSystemTimestamp returns the LastPasswordChangeSystemTimestamp field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeSystemTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeSystemTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeSystemTimestamp
}

// GetLastPasswordChangeSystemTimestampOk returns a tuple with the LastPasswordChangeSystemTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeSystemTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeSystemTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeSystemTimestamp, true
}

// HasLastPasswordChangeSystemTimestamp returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasLastPasswordChangeSystemTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeSystemTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeSystemTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeSystemTimestamp field.
func (o *OktaUniversalDirectoryAccountDetails) SetLastPasswordChangeSystemTimestamp(v time.Time) *OktaUniversalDirectoryAccountDetails {
	o.LastPasswordChangeSystemTimestamp = &v
	return o
}

// GetLastPasswordChangeErrorReportTimestamp returns the LastPasswordChangeErrorReportTimestamp field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeErrorReportTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeErrorReportTimestamp
}

// GetLastPasswordChangeErrorReportTimestampOk returns a tuple with the LastPasswordChangeErrorReportTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeErrorReportTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeErrorReportTimestamp, true
}

// HasLastPasswordChangeErrorReportTimestamp returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasLastPasswordChangeErrorReportTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorReportTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeErrorReportTimestamp field.
func (o *OktaUniversalDirectoryAccountDetails) SetLastPasswordChangeErrorReportTimestamp(v time.Time) *OktaUniversalDirectoryAccountDetails {
	o.LastPasswordChangeErrorReportTimestamp = &v
	return o
}

// GetLastPasswordChangeErrorSystemTimestamp returns the LastPasswordChangeErrorSystemTimestamp field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeErrorSystemTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeErrorSystemTimestamp
}

// GetLastPasswordChangeErrorSystemTimestampOk returns a tuple with the LastPasswordChangeErrorSystemTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeErrorSystemTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeErrorSystemTimestamp, true
}

// HasLastPasswordChangeErrorSystemTimestamp returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasLastPasswordChangeErrorSystemTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorSystemTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeErrorSystemTimestamp field.
func (o *OktaUniversalDirectoryAccountDetails) SetLastPasswordChangeErrorSystemTimestamp(v time.Time) *OktaUniversalDirectoryAccountDetails {
	o.LastPasswordChangeErrorSystemTimestamp = &v
	return o
}

// GetLastPasswordChangeErrorType returns the LastPasswordChangeErrorType field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeErrorType() string {
	if o == nil || IsNil(o.LastPasswordChangeErrorType) {
		var ret string
		return ret
	}
	return *o.LastPasswordChangeErrorType
}

// GetLastPasswordChangeErrorTypeOk returns a tuple with the LastPasswordChangeErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeErrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorType) {
		return nil, false
	}
	return o.LastPasswordChangeErrorType, true
}

// HasLastPasswordChangeErrorType returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasLastPasswordChangeErrorType() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorType) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorType gets a reference to the given string and assigns it to the LastPasswordChangeErrorType field.
func (o *OktaUniversalDirectoryAccountDetails) SetLastPasswordChangeErrorType(v string) *OktaUniversalDirectoryAccountDetails {
	o.LastPasswordChangeErrorType = &v
	return o
}

// GetLastPasswordChangeErrorMetadata returns the LastPasswordChangeErrorMetadata field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeErrorMetadata() string {
	if o == nil || IsNil(o.LastPasswordChangeErrorMetadata) {
		var ret string
		return ret
	}
	return *o.LastPasswordChangeErrorMetadata
}

// GetLastPasswordChangeErrorMetadataOk returns a tuple with the LastPasswordChangeErrorMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccountDetails) GetLastPasswordChangeErrorMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorMetadata) {
		return nil, false
	}
	return o.LastPasswordChangeErrorMetadata, true
}

// HasLastPasswordChangeErrorMetadata returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccountDetails) HasLastPasswordChangeErrorMetadata() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorMetadata) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorMetadata gets a reference to the given string and assigns it to the LastPasswordChangeErrorMetadata field.
func (o *OktaUniversalDirectoryAccountDetails) SetLastPasswordChangeErrorMetadata(v string) *OktaUniversalDirectoryAccountDetails {
	o.LastPasswordChangeErrorMetadata = &v
	return o
}

func (o OktaUniversalDirectoryAccountDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OktaUniversalDirectoryAccountDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.AccountName) {
		toSerialize["account_name"] = o.AccountName
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.NextScheduledPasswordRotationTimestamp) {
		toSerialize["next_scheduled_password_rotation_timestamp"] = o.NextScheduledPasswordRotationTimestamp
	}
	if !IsNil(o.NextScheduledPasswordRotationReason) {
		toSerialize["next_scheduled_password_rotation_reason"] = o.NextScheduledPasswordRotationReason
	}
	if !IsNil(o.CheckoutEnabled) {
		toSerialize["checkout_enabled"] = o.CheckoutEnabled
	}
	if !IsNil(o.CheckoutStatus) {
		toSerialize["checkout_status"] = o.CheckoutStatus
	}
	if !IsNil(o.LastCheckoutUser) {
		toSerialize["last_checkout_user"] = o.LastCheckoutUser
	}
	if !IsNil(o.CheckoutExpiryAt) {
		toSerialize["checkout_expiry_at"] = o.CheckoutExpiryAt
	}
	if !IsNil(o.PasswordChangeSuccessCount) {
		toSerialize["password_change_success_count"] = o.PasswordChangeSuccessCount
	}
	if !IsNil(o.PasswordChangeErrorCount) {
		toSerialize["password_change_error_count"] = o.PasswordChangeErrorCount
	}
	if !IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		toSerialize["password_change_error_count_since_last_success"] = o.PasswordChangeErrorCountSinceLastSuccess
	}
	if !IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		toSerialize["last_password_change_success_report_timestamp"] = o.LastPasswordChangeSuccessReportTimestamp
	}
	if !IsNil(o.LastPasswordChangeSystemTimestamp) {
		toSerialize["last_password_change_system_timestamp"] = o.LastPasswordChangeSystemTimestamp
	}
	if !IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		toSerialize["last_password_change_error_report_timestamp"] = o.LastPasswordChangeErrorReportTimestamp
	}
	if !IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		toSerialize["last_password_change_error_system_timestamp"] = o.LastPasswordChangeErrorSystemTimestamp
	}
	if !IsNil(o.LastPasswordChangeErrorType) {
		toSerialize["last_password_change_error_type"] = o.LastPasswordChangeErrorType
	}
	if !IsNil(o.LastPasswordChangeErrorMetadata) {
		toSerialize["last_password_change_error_metadata"] = o.LastPasswordChangeErrorMetadata
	}
	return toSerialize, nil
}

type NullableOktaUniversalDirectoryAccountDetails struct {
	value *OktaUniversalDirectoryAccountDetails
	isSet bool
}

func (v NullableOktaUniversalDirectoryAccountDetails) Get() *OktaUniversalDirectoryAccountDetails {
	return v.value
}

func (v *NullableOktaUniversalDirectoryAccountDetails) Set(val *OktaUniversalDirectoryAccountDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableOktaUniversalDirectoryAccountDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableOktaUniversalDirectoryAccountDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOktaUniversalDirectoryAccountDetails(val *OktaUniversalDirectoryAccountDetails) *NullableOktaUniversalDirectoryAccountDetails {
	return &NullableOktaUniversalDirectoryAccountDetails{value: val, isSet: true}
}

func (v NullableOktaUniversalDirectoryAccountDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOktaUniversalDirectoryAccountDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
