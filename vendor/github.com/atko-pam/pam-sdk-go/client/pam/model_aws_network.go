/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the AWSNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AWSNetwork{}

// AWSNetwork struct for AWSNetwork
type AWSNetwork struct {
	Addresses []string `json:"addresses,omitempty"`
	Mac       string   `json:"mac"`
	VpcId     *string  `json:"vpc_id,omitempty"`
}

// NewAWSNetwork instantiates a new AWSNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSNetwork(mac string) *AWSNetwork {
	this := AWSNetwork{}
	this.Mac = mac
	return &this
}

// NewAWSNetworkWithDefaults instantiates a new AWSNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSNetworkWithDefaults() *AWSNetwork {
	this := AWSNetwork{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *AWSNetwork) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSNetwork) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *AWSNetwork) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *AWSNetwork) SetAddresses(v []string) *AWSNetwork {
	o.Addresses = v
	return o
}

// GetMac returns the Mac field value
func (o *AWSNetwork) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *AWSNetwork) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *AWSNetwork) SetMac(v string) *AWSNetwork {
	o.Mac = v
	return o
}

// GetVpcId returns the VpcId field value if set, zero value otherwise.
func (o *AWSNetwork) GetVpcId() string {
	if o == nil || IsNil(o.VpcId) {
		var ret string
		return ret
	}
	return *o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSNetwork) GetVpcIdOk() (*string, bool) {
	if o == nil || IsNil(o.VpcId) {
		return nil, false
	}
	return o.VpcId, true
}

// HasVpcId returns a boolean if a field has been set.
func (o *AWSNetwork) HasVpcId() bool {
	if o != nil && !IsNil(o.VpcId) {
		return true
	}

	return false
}

// SetVpcId gets a reference to the given string and assigns it to the VpcId field.
func (o *AWSNetwork) SetVpcId(v string) *AWSNetwork {
	o.VpcId = &v
	return o
}

func (o AWSNetwork) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AWSNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	toSerialize["mac"] = o.Mac
	if !IsNil(o.VpcId) {
		toSerialize["vpc_id"] = o.VpcId
	}
	return toSerialize, nil
}

type NullableAWSNetwork struct {
	value *AWSNetwork
	isSet bool
}

func (v NullableAWSNetwork) Get() *AWSNetwork {
	return v.value
}

func (v *NullableAWSNetwork) Set(val *AWSNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSNetwork(val *AWSNetwork) *NullableAWSNetwork {
	return &NullableAWSNetwork{value: val, isSet: true}
}

func (v NullableAWSNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
