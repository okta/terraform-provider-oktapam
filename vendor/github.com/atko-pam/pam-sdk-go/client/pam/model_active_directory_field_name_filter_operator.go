/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// ActiveDirectoryFieldNameFilterOperator Filter expression operator
type ActiveDirectoryFieldNameFilterOperator string

// List of ActiveDirectoryFieldNameFilterOperator
const (
	ActiveDirectoryFieldNameFilterOperator_STARTS_WITH ActiveDirectoryFieldNameFilterOperator = "STARTS_WITH"
	ActiveDirectoryFieldNameFilterOperator_ENDS_WITH   ActiveDirectoryFieldNameFilterOperator = "ENDS_WITH"
	ActiveDirectoryFieldNameFilterOperator_CONTAINS    ActiveDirectoryFieldNameFilterOperator = "CONTAINS"
	ActiveDirectoryFieldNameFilterOperator_EQUALS      ActiveDirectoryFieldNameFilterOperator = "EQUALS"
)

// All allowed values of ActiveDirectoryFieldNameFilterOperator enum
var AllowedActiveDirectoryFieldNameFilterOperatorEnumValues = []ActiveDirectoryFieldNameFilterOperator{
	"STARTS_WITH",
	"ENDS_WITH",
	"CONTAINS",
	"EQUALS",
}

func (v *ActiveDirectoryFieldNameFilterOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActiveDirectoryFieldNameFilterOperator(value)

	*v = enumTypeValue

	return nil
}

// NewActiveDirectoryFieldNameFilterOperatorFromValue returns a pointer to a valid ActiveDirectoryFieldNameFilterOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActiveDirectoryFieldNameFilterOperatorFromValue(v string) (*ActiveDirectoryFieldNameFilterOperator, error) {
	ev := ActiveDirectoryFieldNameFilterOperator(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActiveDirectoryFieldNameFilterOperator) IsValid() bool {
	for _, existing := range AllowedActiveDirectoryFieldNameFilterOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActiveDirectoryFieldNameFilterOperator value
func (v ActiveDirectoryFieldNameFilterOperator) Ptr() *ActiveDirectoryFieldNameFilterOperator {
	return &v
}

type NullableActiveDirectoryFieldNameFilterOperator struct {
	value *ActiveDirectoryFieldNameFilterOperator
	isSet bool
}

func (v NullableActiveDirectoryFieldNameFilterOperator) Get() *ActiveDirectoryFieldNameFilterOperator {
	return v.value
}

func (v *NullableActiveDirectoryFieldNameFilterOperator) Set(val *ActiveDirectoryFieldNameFilterOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryFieldNameFilterOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryFieldNameFilterOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryFieldNameFilterOperator(val *ActiveDirectoryFieldNameFilterOperator) *NullableActiveDirectoryFieldNameFilterOperator {
	return &NullableActiveDirectoryFieldNameFilterOperator{value: val, isSet: true}
}

func (v NullableActiveDirectoryFieldNameFilterOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryFieldNameFilterOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
