/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryConnectionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryConnectionResponse{}

// ActiveDirectoryConnectionResponse struct for ActiveDirectoryConnectionResponse
type ActiveDirectoryConnectionResponse struct {
	Id string `json:"id"`
	// The name of the Active Directory connection
	Name *string `json:"name,omitempty"`
	// The human-readable name for the domain
	Domain *string `json:"domain,omitempty"`
	// The protocol of the Active Directory connection
	Protocol *string `json:"protocol,omitempty"`
	// The host name for the Active Directory connection
	Hostname *string `json:"hostname,omitempty"`
	// Denotes a trinary state for the last state of the OU discovery job
	LastConnectionStatus *string `json:"last_connection_status,omitempty"`
	// The list of gateway labels to use for a connection
	GatewaySelector []string `json:"gateway_selector,omitempty"`
}

// NewActiveDirectoryConnectionResponse instantiates a new ActiveDirectoryConnectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryConnectionResponse(id string) *ActiveDirectoryConnectionResponse {
	this := ActiveDirectoryConnectionResponse{}
	this.Id = id
	return &this
}

// NewActiveDirectoryConnectionResponseWithDefaults instantiates a new ActiveDirectoryConnectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryConnectionResponseWithDefaults() *ActiveDirectoryConnectionResponse {
	this := ActiveDirectoryConnectionResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ActiveDirectoryConnectionResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActiveDirectoryConnectionResponse) SetId(v string) *ActiveDirectoryConnectionResponse {
	o.Id = v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActiveDirectoryConnectionResponse) SetName(v string) *ActiveDirectoryConnectionResponse {
	o.Name = &v
	return o
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionResponse) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionResponse) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionResponse) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ActiveDirectoryConnectionResponse) SetDomain(v string) *ActiveDirectoryConnectionResponse {
	o.Domain = &v
	return o
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionResponse) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionResponse) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionResponse) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *ActiveDirectoryConnectionResponse) SetProtocol(v string) *ActiveDirectoryConnectionResponse {
	o.Protocol = &v
	return o
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionResponse) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionResponse) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionResponse) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ActiveDirectoryConnectionResponse) SetHostname(v string) *ActiveDirectoryConnectionResponse {
	o.Hostname = &v
	return o
}

// GetLastConnectionStatus returns the LastConnectionStatus field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionResponse) GetLastConnectionStatus() string {
	if o == nil || IsNil(o.LastConnectionStatus) {
		var ret string
		return ret
	}
	return *o.LastConnectionStatus
}

// GetLastConnectionStatusOk returns a tuple with the LastConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionResponse) GetLastConnectionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastConnectionStatus) {
		return nil, false
	}
	return o.LastConnectionStatus, true
}

// HasLastConnectionStatus returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionResponse) HasLastConnectionStatus() bool {
	if o != nil && !IsNil(o.LastConnectionStatus) {
		return true
	}

	return false
}

// SetLastConnectionStatus gets a reference to the given string and assigns it to the LastConnectionStatus field.
func (o *ActiveDirectoryConnectionResponse) SetLastConnectionStatus(v string) *ActiveDirectoryConnectionResponse {
	o.LastConnectionStatus = &v
	return o
}

// GetGatewaySelector returns the GatewaySelector field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionResponse) GetGatewaySelector() []string {
	if o == nil || IsNil(o.GatewaySelector) {
		var ret []string
		return ret
	}
	return o.GatewaySelector
}

// GetGatewaySelectorOk returns a tuple with the GatewaySelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionResponse) GetGatewaySelectorOk() ([]string, bool) {
	if o == nil || IsNil(o.GatewaySelector) {
		return nil, false
	}
	return o.GatewaySelector, true
}

// HasGatewaySelector returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionResponse) HasGatewaySelector() bool {
	if o != nil && !IsNil(o.GatewaySelector) {
		return true
	}

	return false
}

// SetGatewaySelector gets a reference to the given []string and assigns it to the GatewaySelector field.
func (o *ActiveDirectoryConnectionResponse) SetGatewaySelector(v []string) *ActiveDirectoryConnectionResponse {
	o.GatewaySelector = v
	return o
}

func (o ActiveDirectoryConnectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryConnectionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.LastConnectionStatus) {
		toSerialize["last_connection_status"] = o.LastConnectionStatus
	}
	if !IsNil(o.GatewaySelector) {
		toSerialize["gateway_selector"] = o.GatewaySelector
	}
	return toSerialize, nil
}

type NullableActiveDirectoryConnectionResponse struct {
	value *ActiveDirectoryConnectionResponse
	isSet bool
}

func (v NullableActiveDirectoryConnectionResponse) Get() *ActiveDirectoryConnectionResponse {
	return v.value
}

func (v *NullableActiveDirectoryConnectionResponse) Set(val *ActiveDirectoryConnectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryConnectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryConnectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryConnectionResponse(val *ActiveDirectoryConnectionResponse) *NullableActiveDirectoryConnectionResponse {
	return &NullableActiveDirectoryConnectionResponse{value: val, isSet: true}
}

func (v NullableActiveDirectoryConnectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryConnectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
