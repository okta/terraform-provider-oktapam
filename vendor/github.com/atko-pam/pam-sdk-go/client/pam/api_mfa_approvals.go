/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MfaApprovalsAPIService MfaApprovalsAPI service
type MfaApprovalsAPIService service

type ApiCreateMFAApprovalRequest struct {
	ctx                      context.Context
	ApiService               *MfaApprovalsAPIService
	teamName                 string
	mFAApprovalCreateRequest *MFAApprovalCreateRequest
}

func (r ApiCreateMFAApprovalRequest) MFAApprovalCreateRequest(mFAApprovalCreateRequest MFAApprovalCreateRequest) ApiCreateMFAApprovalRequest {
	r.mFAApprovalCreateRequest = &mFAApprovalCreateRequest
	return r
}

func (r ApiCreateMFAApprovalRequest) Execute() (*MFAApprovalCreateResponse, *http.Response, error) {
	return r.ApiService.CreateMFAApprovalExecute(r)
}

/*
CreateMFAApproval Create an MFA approval

	Creates an MFA approval

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team

@return ApiCreateMFAApprovalRequest
*/
func (a *MfaApprovalsAPIService) CreateMFAApproval(ctx context.Context, teamName string) ApiCreateMFAApprovalRequest {
	return ApiCreateMFAApprovalRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return MFAApprovalCreateResponse
func (a *MfaApprovalsAPIService) CreateMFAApprovalExecute(r ApiCreateMFAApprovalRequest) (*MFAApprovalCreateResponse, *http.Response, error) {
	var (
		traceKey            = "mfaapprovalsapi.createMFAApproval"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MFAApprovalCreateResponse
	)

	localVarPath := "/v1/teams/{team_name}/mfa_approvals"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mFAApprovalCreateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetMFAApprovalStateRequest struct {
	ctx           context.Context
	ApiService    *MfaApprovalsAPIService
	teamName      string
	mfaApprovalId string
}

func (r ApiGetMFAApprovalStateRequest) Execute() (*MFAApprovalState, *http.Response, error) {
	return r.ApiService.GetMFAApprovalStateExecute(r)
}

/*
GetMFAApprovalState Retrieve the state of an MFA approval

	Retrieve the state of an MFA approval

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param mfaApprovalId The UUID for a MFA approval

@return ApiGetMFAApprovalStateRequest
*/
func (a *MfaApprovalsAPIService) GetMFAApprovalState(ctx context.Context, teamName string, mfaApprovalId string) ApiGetMFAApprovalStateRequest {
	return ApiGetMFAApprovalStateRequest{
		ApiService:    a,
		ctx:           ctx,
		teamName:      teamName,
		mfaApprovalId: mfaApprovalId,
	}
}

// Execute executes the request
//
//	@return MFAApprovalState
func (a *MfaApprovalsAPIService) GetMFAApprovalStateExecute(r ApiGetMFAApprovalStateRequest) (*MFAApprovalState, *http.Response, error) {
	var (
		traceKey            = "mfaapprovalsapi.getMFAApprovalState"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MFAApprovalState
	)

	localVarPath := "/v1/teams/{team_name}/mfa_approvals/{mfa_approval_id}/state"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mfa_approval_id"+"}", url.PathEscape(parameterValueToString(r.mfaApprovalId, "mfaApprovalId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
