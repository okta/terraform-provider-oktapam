/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the AuditEventV2Schema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditEventV2Schema{}

// AuditEventV2Schema struct for AuditEventV2Schema
type AuditEventV2Schema struct {
	// The list of Audit events
	List []map[string]string `json:"list"`
	// All objects related to the Audit events
	RelatedObjects map[string]string `json:"related_objects"`
}

// NewAuditEventV2Schema instantiates a new AuditEventV2Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditEventV2Schema(list []map[string]string, relatedObjects map[string]string) *AuditEventV2Schema {
	this := AuditEventV2Schema{}
	this.List = list
	this.RelatedObjects = relatedObjects
	return &this
}

// NewAuditEventV2SchemaWithDefaults instantiates a new AuditEventV2Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditEventV2SchemaWithDefaults() *AuditEventV2Schema {
	this := AuditEventV2Schema{}
	return &this
}

// GetList returns the List field value
func (o *AuditEventV2Schema) GetList() []map[string]string {
	if o == nil {
		var ret []map[string]string
		return ret
	}

	return o.List
}

// GetListOk returns a tuple with the List field value
// and a boolean to check if the value has been set.
func (o *AuditEventV2Schema) GetListOk() ([]map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.List, true
}

// SetList sets field value
func (o *AuditEventV2Schema) SetList(v []map[string]string) *AuditEventV2Schema {
	o.List = v
	return o
}

// GetRelatedObjects returns the RelatedObjects field value
func (o *AuditEventV2Schema) GetRelatedObjects() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.RelatedObjects
}

// GetRelatedObjectsOk returns a tuple with the RelatedObjects field value
// and a boolean to check if the value has been set.
func (o *AuditEventV2Schema) GetRelatedObjectsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedObjects, true
}

// SetRelatedObjects sets field value
func (o *AuditEventV2Schema) SetRelatedObjects(v map[string]string) *AuditEventV2Schema {
	o.RelatedObjects = v
	return o
}

func (o AuditEventV2Schema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditEventV2Schema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["list"] = o.List
	toSerialize["related_objects"] = o.RelatedObjects
	return toSerialize, nil
}

type NullableAuditEventV2Schema struct {
	value *AuditEventV2Schema
	isSet bool
}

func (v NullableAuditEventV2Schema) Get() *AuditEventV2Schema {
	return v.value
}

func (v *NullableAuditEventV2Schema) Set(val *AuditEventV2Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEventV2Schema) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEventV2Schema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEventV2Schema(val *AuditEventV2Schema) *NullableAuditEventV2Schema {
	return &NullableAuditEventV2Schema{value: val, isSet: true}
}

func (v NullableAuditEventV2Schema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEventV2Schema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
