/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// PrivilegedAccountType The type of Privileged Account
type PrivilegedAccountType string

// List of PrivilegedAccountType
const (
	PrivilegedAccountType_APP_ACCOUNT       PrivilegedAccountType = "APP_ACCOUNT"
	PrivilegedAccountType_OKTA_USER_ACCOUNT PrivilegedAccountType = "OKTA_USER_ACCOUNT"
)

// All allowed values of PrivilegedAccountType enum
var AllowedPrivilegedAccountTypeEnumValues = []PrivilegedAccountType{
	"APP_ACCOUNT",
	"OKTA_USER_ACCOUNT",
}

func (v *PrivilegedAccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivilegedAccountType(value)

	*v = enumTypeValue

	return nil
}

// NewPrivilegedAccountTypeFromValue returns a pointer to a valid PrivilegedAccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivilegedAccountTypeFromValue(v string) (*PrivilegedAccountType, error) {
	ev := PrivilegedAccountType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivilegedAccountType) IsValid() bool {
	for _, existing := range AllowedPrivilegedAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrivilegedAccountType value
func (v PrivilegedAccountType) Ptr() *PrivilegedAccountType {
	return &v
}

type NullablePrivilegedAccountType struct {
	value *PrivilegedAccountType
	isSet bool
}

func (v NullablePrivilegedAccountType) Get() *PrivilegedAccountType {
	return v.value
}

func (v *NullablePrivilegedAccountType) Set(val *PrivilegedAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegedAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegedAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegedAccountType(val *PrivilegedAccountType) *NullablePrivilegedAccountType {
	return &NullablePrivilegedAccountType{value: val, isSet: true}
}

func (v NullablePrivilegedAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegedAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
