/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// AccountSelectorMode Controls how accounts are selected
type AccountSelectorMode string

// List of AccountSelectorMode
const (
	AccountSelectorMode_ALL     AccountSelectorMode = "ALL"
	AccountSelectorMode_INCLUDE AccountSelectorMode = "INCLUDE"
	AccountSelectorMode_EXCLUDE AccountSelectorMode = "EXCLUDE"
)

// All allowed values of AccountSelectorMode enum
var AllowedAccountSelectorModeEnumValues = []AccountSelectorMode{
	"ALL",
	"INCLUDE",
	"EXCLUDE",
}

func (v *AccountSelectorMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountSelectorMode(value)

	*v = enumTypeValue

	return nil
}

// NewAccountSelectorModeFromValue returns a pointer to a valid AccountSelectorMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountSelectorModeFromValue(v string) (*AccountSelectorMode, error) {
	ev := AccountSelectorMode(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountSelectorMode) IsValid() bool {
	for _, existing := range AllowedAccountSelectorModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountSelectorMode value
func (v AccountSelectorMode) Ptr() *AccountSelectorMode {
	return &v
}

type NullableAccountSelectorMode struct {
	value *AccountSelectorMode
	isSet bool
}

func (v NullableAccountSelectorMode) Get() *AccountSelectorMode {
	return v.value
}

func (v *NullableAccountSelectorMode) Set(val *AccountSelectorMode) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSelectorMode) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSelectorMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSelectorMode(val *AccountSelectorMode) *NullableAccountSelectorMode {
	return &NullableAccountSelectorMode{value: val, isSet: true}
}

func (v NullableAccountSelectorMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSelectorMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
