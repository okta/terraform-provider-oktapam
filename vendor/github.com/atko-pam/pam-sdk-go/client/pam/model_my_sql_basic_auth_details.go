/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the MySQLBasicAuthDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MySQLBasicAuthDetails{}

// MySQLBasicAuthDetails The basic authentication details of the MySQL management connection
type MySQLBasicAuthDetails struct {
	// The username of the MySQL management connection authentication
	Username string `json:"username"`
	// The JWE of the password of the MySQL management connection authentication
	PasswordJwe *EncryptedString `json:"password_jwe,omitempty"`
	// The secret ID of the MySQL management connection authentication
	SecretId *string `json:"secret_id,omitempty"`
}

// NewMySQLBasicAuthDetails instantiates a new MySQLBasicAuthDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMySQLBasicAuthDetails(username string) *MySQLBasicAuthDetails {
	this := MySQLBasicAuthDetails{}
	this.Username = username
	return &this
}

// NewMySQLBasicAuthDetailsWithDefaults instantiates a new MySQLBasicAuthDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMySQLBasicAuthDetailsWithDefaults() *MySQLBasicAuthDetails {
	this := MySQLBasicAuthDetails{}
	return &this
}

// GetUsername returns the Username field value
func (o *MySQLBasicAuthDetails) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *MySQLBasicAuthDetails) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *MySQLBasicAuthDetails) SetUsername(v string) *MySQLBasicAuthDetails {
	o.Username = v
	return o
}

// GetPasswordJwe returns the PasswordJwe field value if set, zero value otherwise.
func (o *MySQLBasicAuthDetails) GetPasswordJwe() EncryptedString {
	if o == nil || IsNil(o.PasswordJwe) {
		var ret EncryptedString
		return ret
	}
	return *o.PasswordJwe
}

// GetPasswordJweOk returns a tuple with the PasswordJwe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLBasicAuthDetails) GetPasswordJweOk() (*EncryptedString, bool) {
	if o == nil || IsNil(o.PasswordJwe) {
		return nil, false
	}
	return o.PasswordJwe, true
}

// HasPasswordJwe returns a boolean if a field has been set.
func (o *MySQLBasicAuthDetails) HasPasswordJwe() bool {
	if o != nil && !IsNil(o.PasswordJwe) {
		return true
	}

	return false
}

// SetPasswordJwe gets a reference to the given EncryptedString and assigns it to the PasswordJwe field.
func (o *MySQLBasicAuthDetails) SetPasswordJwe(v EncryptedString) *MySQLBasicAuthDetails {
	o.PasswordJwe = &v
	return o
}

// GetSecretId returns the SecretId field value if set, zero value otherwise.
func (o *MySQLBasicAuthDetails) GetSecretId() string {
	if o == nil || IsNil(o.SecretId) {
		var ret string
		return ret
	}
	return *o.SecretId
}

// GetSecretIdOk returns a tuple with the SecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLBasicAuthDetails) GetSecretIdOk() (*string, bool) {
	if o == nil || IsNil(o.SecretId) {
		return nil, false
	}
	return o.SecretId, true
}

// HasSecretId returns a boolean if a field has been set.
func (o *MySQLBasicAuthDetails) HasSecretId() bool {
	if o != nil && !IsNil(o.SecretId) {
		return true
	}

	return false
}

// SetSecretId gets a reference to the given string and assigns it to the SecretId field.
func (o *MySQLBasicAuthDetails) SetSecretId(v string) *MySQLBasicAuthDetails {
	o.SecretId = &v
	return o
}

func (o MySQLBasicAuthDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MySQLBasicAuthDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	if !IsNil(o.PasswordJwe) {
		toSerialize["password_jwe"] = o.PasswordJwe
	}
	if !IsNil(o.SecretId) {
		toSerialize["secret_id"] = o.SecretId
	}
	return toSerialize, nil
}

type NullableMySQLBasicAuthDetails struct {
	value *MySQLBasicAuthDetails
	isSet bool
}

func (v NullableMySQLBasicAuthDetails) Get() *MySQLBasicAuthDetails {
	return v.value
}

func (v *NullableMySQLBasicAuthDetails) Set(val *MySQLBasicAuthDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableMySQLBasicAuthDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableMySQLBasicAuthDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMySQLBasicAuthDetails(val *MySQLBasicAuthDetails) *NullableMySQLBasicAuthDetails {
	return &NullableMySQLBasicAuthDetails{value: val, isSet: true}
}

func (v NullableMySQLBasicAuthDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMySQLBasicAuthDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
