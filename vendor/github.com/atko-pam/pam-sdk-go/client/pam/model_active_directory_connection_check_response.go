/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryConnectionCheckResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryConnectionCheckResponse{}

// ActiveDirectoryConnectionCheckResponse struct for ActiveDirectoryConnectionCheckResponse
type ActiveDirectoryConnectionCheckResponse struct {
	// The status of the Active Directory test
	Status *string `json:"status,omitempty"`
	// Details of the Active Directory test
	ServiceAccountPasswordJwe *string `json:"service_account_password_jwe,omitempty"`
}

// NewActiveDirectoryConnectionCheckResponse instantiates a new ActiveDirectoryConnectionCheckResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryConnectionCheckResponse() *ActiveDirectoryConnectionCheckResponse {
	this := ActiveDirectoryConnectionCheckResponse{}
	return &this
}

// NewActiveDirectoryConnectionCheckResponseWithDefaults instantiates a new ActiveDirectoryConnectionCheckResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryConnectionCheckResponseWithDefaults() *ActiveDirectoryConnectionCheckResponse {
	this := ActiveDirectoryConnectionCheckResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionCheckResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionCheckResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionCheckResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ActiveDirectoryConnectionCheckResponse) SetStatus(v string) *ActiveDirectoryConnectionCheckResponse {
	o.Status = &v
	return o
}

// GetServiceAccountPasswordJwe returns the ServiceAccountPasswordJwe field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionCheckResponse) GetServiceAccountPasswordJwe() string {
	if o == nil || IsNil(o.ServiceAccountPasswordJwe) {
		var ret string
		return ret
	}
	return *o.ServiceAccountPasswordJwe
}

// GetServiceAccountPasswordJweOk returns a tuple with the ServiceAccountPasswordJwe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionCheckResponse) GetServiceAccountPasswordJweOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAccountPasswordJwe) {
		return nil, false
	}
	return o.ServiceAccountPasswordJwe, true
}

// HasServiceAccountPasswordJwe returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionCheckResponse) HasServiceAccountPasswordJwe() bool {
	if o != nil && !IsNil(o.ServiceAccountPasswordJwe) {
		return true
	}

	return false
}

// SetServiceAccountPasswordJwe gets a reference to the given string and assigns it to the ServiceAccountPasswordJwe field.
func (o *ActiveDirectoryConnectionCheckResponse) SetServiceAccountPasswordJwe(v string) *ActiveDirectoryConnectionCheckResponse {
	o.ServiceAccountPasswordJwe = &v
	return o
}

func (o ActiveDirectoryConnectionCheckResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryConnectionCheckResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ServiceAccountPasswordJwe) {
		toSerialize["service_account_password_jwe"] = o.ServiceAccountPasswordJwe
	}
	return toSerialize, nil
}

type NullableActiveDirectoryConnectionCheckResponse struct {
	value *ActiveDirectoryConnectionCheckResponse
	isSet bool
}

func (v NullableActiveDirectoryConnectionCheckResponse) Get() *ActiveDirectoryConnectionCheckResponse {
	return v.value
}

func (v *NullableActiveDirectoryConnectionCheckResponse) Set(val *ActiveDirectoryConnectionCheckResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryConnectionCheckResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryConnectionCheckResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryConnectionCheckResponse(val *ActiveDirectoryConnectionCheckResponse) *NullableActiveDirectoryConnectionCheckResponse {
	return &NullableActiveDirectoryConnectionCheckResponse{value: val, isSet: true}
}

func (v NullableActiveDirectoryConnectionCheckResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryConnectionCheckResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
