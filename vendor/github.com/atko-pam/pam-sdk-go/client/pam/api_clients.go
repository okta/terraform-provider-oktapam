/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// ClientsAPIService ClientsAPI service
type ClientsAPIService service

type ApiFetchClientRequest struct {
	ctx        context.Context
	ApiService *ClientsAPIService
	teamName   string
	clientId   string
}

func (r ApiFetchClientRequest) Execute() (*Client, *http.Response, error) {
	return r.ApiService.FetchClientExecute(r)
}

/*
	FetchClient Retrieve a Client

	    Retrieves the properties of a specified Client

This endpoint requires one of the following roles: `end_user`, `security_admin`, `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param clientId The UUID of the Client
	@return ApiFetchClientRequest
*/
func (a *ClientsAPIService) FetchClient(ctx context.Context, teamName string, clientId string) ApiFetchClientRequest {
	return ApiFetchClientRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
		clientId:   clientId,
	}
}

// Execute executes the request
//
//	@return Client
func (a *ClientsAPIService) FetchClientExecute(r ApiFetchClientRequest) (*Client, *http.Response, error) {
	var (
		traceKey            = "clientsapi.fetchClient"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Client
	)

	localVarPath := "/v1/teams/{team_name}/clients/{client_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client_id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListClientsRequest struct {
	ctx        context.Context
	ApiService *ClientsAPIService
	teamName   string
	offset     *string
	count      *int32
	descending *bool
	prev       *bool
	all        *bool
	state      *string
	username   *string
}

// The offset value for pagination. The **rel&#x3D;\&quot;next\&quot;** and **rel&#x3D;\&quot;prev\&quot;** &#x60;Link&#x60; headers define the offset for subsequent or previous pages.
func (r ApiListClientsRequest) Offset(offset string) ApiListClientsRequest {
	r.offset = &offset
	return r
}

// The number of objects per page
func (r ApiListClientsRequest) Count(count int32) ApiListClientsRequest {
	r.count = &count
	return r
}

// The object order
func (r ApiListClientsRequest) Descending(descending bool) ApiListClientsRequest {
	r.descending = &descending
	return r
}

// The direction of paging
func (r ApiListClientsRequest) Prev(prev bool) ApiListClientsRequest {
	r.prev = &prev
	return r
}

// When &#x60;true&#x60;, returns all Clients for the Team
func (r ApiListClientsRequest) All(all bool) ApiListClientsRequest {
	r.all = &all
	return r
}

// The state of the Client: &#x60;ACTIVE&#x60;, &#x60;PENDING&#x60;, or &#x60;DELETED&#x60;
func (r ApiListClientsRequest) State(state string) ApiListClientsRequest {
	r.state = &state
	return r
}

// List Clients assigned to a single User. An empty string returns unassigned Clients.
func (r ApiListClientsRequest) Username(username string) ApiListClientsRequest {
	r.username = &username
	return r
}

func (r ApiListClientsRequest) Execute() (*ListClientsResponse, *http.Response, error) {
	return r.ApiService.ListClientsExecute(r)
}

/*
	ListClients List all Clients

	    Returns a list of Clients for your Team. By default, this only returns Clients associated with the requesting User. Use query parameters to adjust the list of returned Clients.

This endpoint requires one of the following roles: `end_user`, `security_admin`, `resource_admin`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiListClientsRequest
*/
func (a *ClientsAPIService) ListClients(ctx context.Context, teamName string) ApiListClientsRequest {
	return ApiListClientsRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListClientsResponse
func (a *ClientsAPIService) ListClientsExecute(r ApiListClientsRequest) (*ListClientsResponse, *http.Response, error) {
	var (
		traceKey            = "clientsapi.listClients"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListClientsResponse
	)

	localVarPath := "/v1/teams/{team_name}/clients"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.descending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "descending", r.descending, "")
	}
	if r.prev != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prev", r.prev, "")
	}
	if r.all != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "all", r.all, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
	}
	if r.username != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username", r.username, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiRemoveClientRequest struct {
	ctx        context.Context
	ApiService *ClientsAPIService
	teamName   string
	clientId   string
}

func (r ApiRemoveClientRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveClientExecute(r)
}

/*
	RemoveClient Revoke access to a Client

	    Revokes access to a specified Client from your Team

This endpoint requires one of the following roles: `end_user`, `security_admin`, `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param clientId The UUID of the Client
	@return ApiRemoveClientRequest
*/
func (a *ClientsAPIService) RemoveClient(ctx context.Context, teamName string, clientId string) ApiRemoveClientRequest {
	return ApiRemoveClientRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
		clientId:   clientId,
	}
}

// Execute executes the request
func (a *ClientsAPIService) RemoveClientExecute(r ApiRemoveClientRequest) (*http.Response, error) {
	var (
		traceKey           = "clientsapi.removeClient"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/clients/{client_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client_id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	return localVarHTTPResponse, err
}

type ApiUpdateClientRequest struct {
	ctx                 context.Context
	ApiService          *ClientsAPIService
	teamName            string
	clientId            string
	clientUpdateRequest *ClientUpdateRequest
}

func (r ApiUpdateClientRequest) ClientUpdateRequest(clientUpdateRequest ClientUpdateRequest) ApiUpdateClientRequest {
	r.clientUpdateRequest = &clientUpdateRequest
	return r
}

func (r ApiUpdateClientRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateClientExecute(r)
}

/*
	UpdateClient Update a Client

	    Updates the state or assigned user for a specified Client. This is required for some enrollment policies. See [Silently enroll the Client](https://help.okta.com/okta_help.htm?type=asa&id=ext-asa-enroll-sft-silent).

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param clientId The UUID of the Client
	@return ApiUpdateClientRequest
*/
func (a *ClientsAPIService) UpdateClient(ctx context.Context, teamName string, clientId string) ApiUpdateClientRequest {
	return ApiUpdateClientRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
		clientId:   clientId,
	}
}

// Execute executes the request
func (a *ClientsAPIService) UpdateClientExecute(r ApiUpdateClientRequest) (*http.Response, error) {
	var (
		traceKey           = "clientsapi.updateClient"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/clients/{client_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client_id"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientUpdateRequest == nil {
		return nil, reportError("clientUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clientUpdateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	return localVarHTTPResponse, err
}
