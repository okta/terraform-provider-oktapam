/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// SecurityPolicyRuleResourceType The type of resource that Principals are granted privileges to access.
type SecurityPolicyRuleResourceType string

// List of SecurityPolicyRuleResourceType
const (
	SecurityPolicyRuleResourceType_SERVER_BASED_RESOURCE             SecurityPolicyRuleResourceType = "server_based_resource"
	SecurityPolicyRuleResourceType_SECRET_BASED_RESOURCE             SecurityPolicyRuleResourceType = "secret_based_resource"
	SecurityPolicyRuleResourceType_MANAGED_SAAS_APP_BASED_RESOURCE   SecurityPolicyRuleResourceType = "managed_saas_app_based_resource"
	SecurityPolicyRuleResourceType_UNMANAGED_SAAS_APP_BASED_RESOURCE SecurityPolicyRuleResourceType = "unmanaged_saas_app_based_resource"
	SecurityPolicyRuleResourceType_OKTA_APP_BASED_RESOURCE           SecurityPolicyRuleResourceType = "okta_app_based_resource"
	SecurityPolicyRuleResourceType_ACTIVE_DIRECTORY_BASED_RESOURCE   SecurityPolicyRuleResourceType = "active_directory_based_resource"
)

// All allowed values of SecurityPolicyRuleResourceType enum
var AllowedSecurityPolicyRuleResourceTypeEnumValues = []SecurityPolicyRuleResourceType{
	"server_based_resource",
	"secret_based_resource",
	"managed_saas_app_based_resource",
	"unmanaged_saas_app_based_resource",
	"okta_app_based_resource",
	"active_directory_based_resource",
}

func (v *SecurityPolicyRuleResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityPolicyRuleResourceType(value)

	*v = enumTypeValue

	return nil
}

// NewSecurityPolicyRuleResourceTypeFromValue returns a pointer to a valid SecurityPolicyRuleResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityPolicyRuleResourceTypeFromValue(v string) (*SecurityPolicyRuleResourceType, error) {
	ev := SecurityPolicyRuleResourceType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityPolicyRuleResourceType) IsValid() bool {
	for _, existing := range AllowedSecurityPolicyRuleResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityPolicyRuleResourceType value
func (v SecurityPolicyRuleResourceType) Ptr() *SecurityPolicyRuleResourceType {
	return &v
}

type NullableSecurityPolicyRuleResourceType struct {
	value *SecurityPolicyRuleResourceType
	isSet bool
}

func (v NullableSecurityPolicyRuleResourceType) Get() *SecurityPolicyRuleResourceType {
	return v.value
}

func (v *NullableSecurityPolicyRuleResourceType) Set(val *SecurityPolicyRuleResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleResourceType(val *SecurityPolicyRuleResourceType) *NullableSecurityPolicyRuleResourceType {
	return &NullableSecurityPolicyRuleResourceType{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
