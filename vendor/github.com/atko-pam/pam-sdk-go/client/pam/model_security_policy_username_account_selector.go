/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyUsernameAccountSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyUsernameAccountSelector{}

// SecurityPolicyUsernameAccountSelector Defines existing Server accounts available for use by the Principals
type SecurityPolicyUsernameAccountSelector struct {
	Type *string `json:"_type,omitempty"`
	// A list of Server accounts
	Usernames []string `json:"usernames,omitempty"`
}

// NewSecurityPolicyUsernameAccountSelector instantiates a new SecurityPolicyUsernameAccountSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyUsernameAccountSelector() *SecurityPolicyUsernameAccountSelector {
	this := SecurityPolicyUsernameAccountSelector{}
	return &this
}

// NewSecurityPolicyUsernameAccountSelectorWithDefaults instantiates a new SecurityPolicyUsernameAccountSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyUsernameAccountSelectorWithDefaults() *SecurityPolicyUsernameAccountSelector {
	this := SecurityPolicyUsernameAccountSelector{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SecurityPolicyUsernameAccountSelector) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyUsernameAccountSelector) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SecurityPolicyUsernameAccountSelector) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SecurityPolicyUsernameAccountSelector) SetType(v string) *SecurityPolicyUsernameAccountSelector {
	o.Type = &v
	return o
}

// GetUsernames returns the Usernames field value if set, zero value otherwise.
func (o *SecurityPolicyUsernameAccountSelector) GetUsernames() []string {
	if o == nil || IsNil(o.Usernames) {
		var ret []string
		return ret
	}
	return o.Usernames
}

// GetUsernamesOk returns a tuple with the Usernames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyUsernameAccountSelector) GetUsernamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Usernames) {
		return nil, false
	}
	return o.Usernames, true
}

// HasUsernames returns a boolean if a field has been set.
func (o *SecurityPolicyUsernameAccountSelector) HasUsernames() bool {
	if o != nil && !IsNil(o.Usernames) {
		return true
	}

	return false
}

// SetUsernames gets a reference to the given []string and assigns it to the Usernames field.
func (o *SecurityPolicyUsernameAccountSelector) SetUsernames(v []string) *SecurityPolicyUsernameAccountSelector {
	o.Usernames = v
	return o
}

func (o SecurityPolicyUsernameAccountSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyUsernameAccountSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["_type"] = o.Type
	}
	if !IsNil(o.Usernames) {
		toSerialize["usernames"] = o.Usernames
	}
	return toSerialize, nil
}

type NullableSecurityPolicyUsernameAccountSelector struct {
	value *SecurityPolicyUsernameAccountSelector
	isSet bool
}

func (v NullableSecurityPolicyUsernameAccountSelector) Get() *SecurityPolicyUsernameAccountSelector {
	return v.value
}

func (v *NullableSecurityPolicyUsernameAccountSelector) Set(val *SecurityPolicyUsernameAccountSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyUsernameAccountSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyUsernameAccountSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyUsernameAccountSelector(val *SecurityPolicyUsernameAccountSelector) *NullableSecurityPolicyUsernameAccountSelector {
	return &NullableSecurityPolicyUsernameAccountSelector{value: val, isSet: true}
}

func (v NullableSecurityPolicyUsernameAccountSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyUsernameAccountSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
