/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer{}

// SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer struct for SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer
type SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer struct {
	SelectorType SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelectorType `json:"selector_type"`
	Selector     SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelector     `json:"selector"`
}

// NewSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer instantiates a new SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer(selectorType SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelectorType, selector SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelector) *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer {
	this := SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer{}
	this.SelectorType = selectorType
	this.Selector = selector
	return &this
}

// NewSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainerWithDefaults instantiates a new SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainerWithDefaults() *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer {
	this := SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer{}
	return &this
}

// GetSelectorType returns the SelectorType field value
func (o *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) GetSelectorType() SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelectorType {
	if o == nil {
		var ret SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelectorType
		return ret
	}

	return o.SelectorType
}

// GetSelectorTypeOk returns a tuple with the SelectorType field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) GetSelectorTypeOk() (*SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelectorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SelectorType, true
}

// SetSelectorType sets field value
func (o *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) SetSelectorType(v SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelectorType) *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer {
	o.SelectorType = v
	return o
}

// GetSelector returns the Selector field value
func (o *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) GetSelector() SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelector {
	if o == nil {
		var ret SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelector
		return ret
	}

	return o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) GetSelectorOk() (*SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selector, true
}

// SetSelector sets field value
func (o *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) SetSelector(v SecurityPolicyRuleManagedSaaSAppBasedResourceSubSelector) *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer {
	o.Selector = v
	return o
}

func (o SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["selector_type"] = o.SelectorType
	toSerialize["selector"] = o.Selector
	return toSerialize, nil
}

type NullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer struct {
	value *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer
	isSet bool
}

func (v NullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) Get() *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer {
	return v.value
}

func (v *NullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) Set(val *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer(val *SecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) *NullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer {
	return &NullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleManagedSaaSAppBasedResourceSelectorContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
