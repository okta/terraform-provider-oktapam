/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the OktaUniversalDirectoryAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OktaUniversalDirectoryAccount{}

// OktaUniversalDirectoryAccount struct for OktaUniversalDirectoryAccount
type OktaUniversalDirectoryAccount struct {
	// The UUID of the Universal Directory account
	Id *string `json:"id,omitempty"`
	// A human-readable name for the Universal Directory account
	Name *string `json:"name,omitempty"`
	// The username used to log into Okta
	Username *string `json:"username,omitempty"`
	// A brief description of the Universal Directory account
	Description  *string                     `json:"description,omitempty"`
	Status       *ServiceAccountStatus       `json:"status,omitempty"`
	StatusDetail *ServiceAccountStatusDetail `json:"status_detail,omitempty"`
	SyncStatus   *ServiceAccountSyncStatus   `json:"sync_status,omitempty"`
	// Whether the password for the Universal Directory account can be rotated using Okta Lifecycle Management
	LcmSyncPossible *bool `json:"lcm_sync_possible,omitempty"`
	// The Okta user ID for the Universal Directory account
	OktaUserId *string `json:"okta_user_id,omitempty"`
	// A timestamp that indicates when the Okta Privileged Access-managed Universal Directory account was created
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A timestamp that indicates when the Okta Privileged Access-managed Universal Directory account was updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewOktaUniversalDirectoryAccount instantiates a new OktaUniversalDirectoryAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOktaUniversalDirectoryAccount() *OktaUniversalDirectoryAccount {
	this := OktaUniversalDirectoryAccount{}
	return &this
}

// NewOktaUniversalDirectoryAccountWithDefaults instantiates a new OktaUniversalDirectoryAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOktaUniversalDirectoryAccountWithDefaults() *OktaUniversalDirectoryAccount {
	this := OktaUniversalDirectoryAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OktaUniversalDirectoryAccount) SetId(v string) *OktaUniversalDirectoryAccount {
	o.Id = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OktaUniversalDirectoryAccount) SetName(v string) *OktaUniversalDirectoryAccount {
	o.Name = &v
	return o
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *OktaUniversalDirectoryAccount) SetUsername(v string) *OktaUniversalDirectoryAccount {
	o.Username = &v
	return o
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OktaUniversalDirectoryAccount) SetDescription(v string) *OktaUniversalDirectoryAccount {
	o.Description = &v
	return o
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetStatus() ServiceAccountStatus {
	if o == nil || IsNil(o.Status) {
		var ret ServiceAccountStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetStatusOk() (*ServiceAccountStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ServiceAccountStatus and assigns it to the Status field.
func (o *OktaUniversalDirectoryAccount) SetStatus(v ServiceAccountStatus) *OktaUniversalDirectoryAccount {
	o.Status = &v
	return o
}

// GetStatusDetail returns the StatusDetail field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetStatusDetail() ServiceAccountStatusDetail {
	if o == nil || IsNil(o.StatusDetail) {
		var ret ServiceAccountStatusDetail
		return ret
	}
	return *o.StatusDetail
}

// GetStatusDetailOk returns a tuple with the StatusDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetStatusDetailOk() (*ServiceAccountStatusDetail, bool) {
	if o == nil || IsNil(o.StatusDetail) {
		return nil, false
	}
	return o.StatusDetail, true
}

// HasStatusDetail returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasStatusDetail() bool {
	if o != nil && !IsNil(o.StatusDetail) {
		return true
	}

	return false
}

// SetStatusDetail gets a reference to the given ServiceAccountStatusDetail and assigns it to the StatusDetail field.
func (o *OktaUniversalDirectoryAccount) SetStatusDetail(v ServiceAccountStatusDetail) *OktaUniversalDirectoryAccount {
	o.StatusDetail = &v
	return o
}

// GetSyncStatus returns the SyncStatus field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetSyncStatus() ServiceAccountSyncStatus {
	if o == nil || IsNil(o.SyncStatus) {
		var ret ServiceAccountSyncStatus
		return ret
	}
	return *o.SyncStatus
}

// GetSyncStatusOk returns a tuple with the SyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetSyncStatusOk() (*ServiceAccountSyncStatus, bool) {
	if o == nil || IsNil(o.SyncStatus) {
		return nil, false
	}
	return o.SyncStatus, true
}

// HasSyncStatus returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasSyncStatus() bool {
	if o != nil && !IsNil(o.SyncStatus) {
		return true
	}

	return false
}

// SetSyncStatus gets a reference to the given ServiceAccountSyncStatus and assigns it to the SyncStatus field.
func (o *OktaUniversalDirectoryAccount) SetSyncStatus(v ServiceAccountSyncStatus) *OktaUniversalDirectoryAccount {
	o.SyncStatus = &v
	return o
}

// GetLcmSyncPossible returns the LcmSyncPossible field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetLcmSyncPossible() bool {
	if o == nil || IsNil(o.LcmSyncPossible) {
		var ret bool
		return ret
	}
	return *o.LcmSyncPossible
}

// GetLcmSyncPossibleOk returns a tuple with the LcmSyncPossible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetLcmSyncPossibleOk() (*bool, bool) {
	if o == nil || IsNil(o.LcmSyncPossible) {
		return nil, false
	}
	return o.LcmSyncPossible, true
}

// HasLcmSyncPossible returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasLcmSyncPossible() bool {
	if o != nil && !IsNil(o.LcmSyncPossible) {
		return true
	}

	return false
}

// SetLcmSyncPossible gets a reference to the given bool and assigns it to the LcmSyncPossible field.
func (o *OktaUniversalDirectoryAccount) SetLcmSyncPossible(v bool) *OktaUniversalDirectoryAccount {
	o.LcmSyncPossible = &v
	return o
}

// GetOktaUserId returns the OktaUserId field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetOktaUserId() string {
	if o == nil || IsNil(o.OktaUserId) {
		var ret string
		return ret
	}
	return *o.OktaUserId
}

// GetOktaUserIdOk returns a tuple with the OktaUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetOktaUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.OktaUserId) {
		return nil, false
	}
	return o.OktaUserId, true
}

// HasOktaUserId returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasOktaUserId() bool {
	if o != nil && !IsNil(o.OktaUserId) {
		return true
	}

	return false
}

// SetOktaUserId gets a reference to the given string and assigns it to the OktaUserId field.
func (o *OktaUniversalDirectoryAccount) SetOktaUserId(v string) *OktaUniversalDirectoryAccount {
	o.OktaUserId = &v
	return o
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OktaUniversalDirectoryAccount) SetCreatedAt(v time.Time) *OktaUniversalDirectoryAccount {
	o.CreatedAt = &v
	return o
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OktaUniversalDirectoryAccount) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaUniversalDirectoryAccount) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OktaUniversalDirectoryAccount) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *OktaUniversalDirectoryAccount) SetUpdatedAt(v time.Time) *OktaUniversalDirectoryAccount {
	o.UpdatedAt = &v
	return o
}

func (o OktaUniversalDirectoryAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OktaUniversalDirectoryAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusDetail) {
		toSerialize["status_detail"] = o.StatusDetail
	}
	if !IsNil(o.SyncStatus) {
		toSerialize["sync_status"] = o.SyncStatus
	}
	if !IsNil(o.LcmSyncPossible) {
		toSerialize["lcm_sync_possible"] = o.LcmSyncPossible
	}
	if !IsNil(o.OktaUserId) {
		toSerialize["okta_user_id"] = o.OktaUserId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableOktaUniversalDirectoryAccount struct {
	value *OktaUniversalDirectoryAccount
	isSet bool
}

func (v NullableOktaUniversalDirectoryAccount) Get() *OktaUniversalDirectoryAccount {
	return v.value
}

func (v *NullableOktaUniversalDirectoryAccount) Set(val *OktaUniversalDirectoryAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableOktaUniversalDirectoryAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableOktaUniversalDirectoryAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOktaUniversalDirectoryAccount(val *OktaUniversalDirectoryAccount) *NullableOktaUniversalDirectoryAccount {
	return &NullableOktaUniversalDirectoryAccount{value: val, isSet: true}
}

func (v NullableOktaUniversalDirectoryAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOktaUniversalDirectoryAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
