/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ResolveResourceNamesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolveResourceNamesRequest{}

// ResolveResourceNamesRequest struct for ResolveResourceNamesRequest
type ResolveResourceNamesRequest struct {
	// A list of resource names to resolve
	Names []string `json:"names"`
	// A list of features supported by the current sft client
	ClientFeatures []string `json:"client_features,omitempty"`
	// If `true`, the response includes the user access methods for the resource
	IncludeUserAccessMethods *bool                `json:"include_user_access_methods,omitempty"`
	ResourceType             *ResolveResourceType `json:"resource_type,omitempty"`
}

// NewResolveResourceNamesRequest instantiates a new ResolveResourceNamesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolveResourceNamesRequest(names []string) *ResolveResourceNamesRequest {
	this := ResolveResourceNamesRequest{}
	this.Names = names
	return &this
}

// NewResolveResourceNamesRequestWithDefaults instantiates a new ResolveResourceNamesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolveResourceNamesRequestWithDefaults() *ResolveResourceNamesRequest {
	this := ResolveResourceNamesRequest{}
	return &this
}

// GetNames returns the Names field value
func (o *ResolveResourceNamesRequest) GetNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *ResolveResourceNamesRequest) GetNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *ResolveResourceNamesRequest) SetNames(v []string) *ResolveResourceNamesRequest {
	o.Names = v
	return o
}

// GetClientFeatures returns the ClientFeatures field value if set, zero value otherwise.
func (o *ResolveResourceNamesRequest) GetClientFeatures() []string {
	if o == nil || IsNil(o.ClientFeatures) {
		var ret []string
		return ret
	}
	return o.ClientFeatures
}

// GetClientFeaturesOk returns a tuple with the ClientFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolveResourceNamesRequest) GetClientFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.ClientFeatures) {
		return nil, false
	}
	return o.ClientFeatures, true
}

// HasClientFeatures returns a boolean if a field has been set.
func (o *ResolveResourceNamesRequest) HasClientFeatures() bool {
	if o != nil && !IsNil(o.ClientFeatures) {
		return true
	}

	return false
}

// SetClientFeatures gets a reference to the given []string and assigns it to the ClientFeatures field.
func (o *ResolveResourceNamesRequest) SetClientFeatures(v []string) *ResolveResourceNamesRequest {
	o.ClientFeatures = v
	return o
}

// GetIncludeUserAccessMethods returns the IncludeUserAccessMethods field value if set, zero value otherwise.
func (o *ResolveResourceNamesRequest) GetIncludeUserAccessMethods() bool {
	if o == nil || IsNil(o.IncludeUserAccessMethods) {
		var ret bool
		return ret
	}
	return *o.IncludeUserAccessMethods
}

// GetIncludeUserAccessMethodsOk returns a tuple with the IncludeUserAccessMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolveResourceNamesRequest) GetIncludeUserAccessMethodsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeUserAccessMethods) {
		return nil, false
	}
	return o.IncludeUserAccessMethods, true
}

// HasIncludeUserAccessMethods returns a boolean if a field has been set.
func (o *ResolveResourceNamesRequest) HasIncludeUserAccessMethods() bool {
	if o != nil && !IsNil(o.IncludeUserAccessMethods) {
		return true
	}

	return false
}

// SetIncludeUserAccessMethods gets a reference to the given bool and assigns it to the IncludeUserAccessMethods field.
func (o *ResolveResourceNamesRequest) SetIncludeUserAccessMethods(v bool) *ResolveResourceNamesRequest {
	o.IncludeUserAccessMethods = &v
	return o
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ResolveResourceNamesRequest) GetResourceType() ResolveResourceType {
	if o == nil || IsNil(o.ResourceType) {
		var ret ResolveResourceType
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolveResourceNamesRequest) GetResourceTypeOk() (*ResolveResourceType, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResolveResourceNamesRequest) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given ResolveResourceType and assigns it to the ResourceType field.
func (o *ResolveResourceNamesRequest) SetResourceType(v ResolveResourceType) *ResolveResourceNamesRequest {
	o.ResourceType = &v
	return o
}

func (o ResolveResourceNamesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolveResourceNamesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["names"] = o.Names
	if !IsNil(o.ClientFeatures) {
		toSerialize["client_features"] = o.ClientFeatures
	}
	if !IsNil(o.IncludeUserAccessMethods) {
		toSerialize["include_user_access_methods"] = o.IncludeUserAccessMethods
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	return toSerialize, nil
}

type NullableResolveResourceNamesRequest struct {
	value *ResolveResourceNamesRequest
	isSet bool
}

func (v NullableResolveResourceNamesRequest) Get() *ResolveResourceNamesRequest {
	return v.value
}

func (v *NullableResolveResourceNamesRequest) Set(val *ResolveResourceNamesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableResolveResourceNamesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableResolveResourceNamesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolveResourceNamesRequest(val *ResolveResourceNamesRequest) *NullableResolveResourceNamesRequest {
	return &NullableResolveResourceNamesRequest{value: val, isSet: true}
}

func (v NullableResolveResourceNamesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolveResourceNamesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
