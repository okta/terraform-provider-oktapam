/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SelectorServerLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectorServerLabel{}

// SelectorServerLabel This resource selector identifies every enrolled sever that includes a matching label
type SelectorServerLabel struct {
	ServerSelector      *SelectorServerLabelServerSelector      `json:"server_selector,omitempty"`
	AccountSelectorType *SelectorServerLabelAccountSelectorType `json:"account_selector_type,omitempty"`
	AccountSelector     *SelectorServerLabelAccountSelector     `json:"account_selector,omitempty"`
}

// NewSelectorServerLabel instantiates a new SelectorServerLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorServerLabel() *SelectorServerLabel {
	this := SelectorServerLabel{}
	return &this
}

// NewSelectorServerLabelWithDefaults instantiates a new SelectorServerLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorServerLabelWithDefaults() *SelectorServerLabel {
	this := SelectorServerLabel{}
	return &this
}

// GetServerSelector returns the ServerSelector field value if set, zero value otherwise.
func (o *SelectorServerLabel) GetServerSelector() SelectorServerLabelServerSelector {
	if o == nil || IsNil(o.ServerSelector) {
		var ret SelectorServerLabelServerSelector
		return ret
	}
	return *o.ServerSelector
}

// GetServerSelectorOk returns a tuple with the ServerSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorServerLabel) GetServerSelectorOk() (*SelectorServerLabelServerSelector, bool) {
	if o == nil || IsNil(o.ServerSelector) {
		return nil, false
	}
	return o.ServerSelector, true
}

// HasServerSelector returns a boolean if a field has been set.
func (o *SelectorServerLabel) HasServerSelector() bool {
	if o != nil && !IsNil(o.ServerSelector) {
		return true
	}

	return false
}

// SetServerSelector gets a reference to the given SelectorServerLabelServerSelector and assigns it to the ServerSelector field.
func (o *SelectorServerLabel) SetServerSelector(v SelectorServerLabelServerSelector) *SelectorServerLabel {
	o.ServerSelector = &v
	return o
}

// GetAccountSelectorType returns the AccountSelectorType field value if set, zero value otherwise.
func (o *SelectorServerLabel) GetAccountSelectorType() SelectorServerLabelAccountSelectorType {
	if o == nil || IsNil(o.AccountSelectorType) {
		var ret SelectorServerLabelAccountSelectorType
		return ret
	}
	return *o.AccountSelectorType
}

// GetAccountSelectorTypeOk returns a tuple with the AccountSelectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorServerLabel) GetAccountSelectorTypeOk() (*SelectorServerLabelAccountSelectorType, bool) {
	if o == nil || IsNil(o.AccountSelectorType) {
		return nil, false
	}
	return o.AccountSelectorType, true
}

// HasAccountSelectorType returns a boolean if a field has been set.
func (o *SelectorServerLabel) HasAccountSelectorType() bool {
	if o != nil && !IsNil(o.AccountSelectorType) {
		return true
	}

	return false
}

// SetAccountSelectorType gets a reference to the given SelectorServerLabelAccountSelectorType and assigns it to the AccountSelectorType field.
func (o *SelectorServerLabel) SetAccountSelectorType(v SelectorServerLabelAccountSelectorType) *SelectorServerLabel {
	o.AccountSelectorType = &v
	return o
}

// GetAccountSelector returns the AccountSelector field value if set, zero value otherwise.
func (o *SelectorServerLabel) GetAccountSelector() SelectorServerLabelAccountSelector {
	if o == nil || IsNil(o.AccountSelector) {
		var ret SelectorServerLabelAccountSelector
		return ret
	}
	return *o.AccountSelector
}

// GetAccountSelectorOk returns a tuple with the AccountSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorServerLabel) GetAccountSelectorOk() (*SelectorServerLabelAccountSelector, bool) {
	if o == nil || IsNil(o.AccountSelector) {
		return nil, false
	}
	return o.AccountSelector, true
}

// HasAccountSelector returns a boolean if a field has been set.
func (o *SelectorServerLabel) HasAccountSelector() bool {
	if o != nil && !IsNil(o.AccountSelector) {
		return true
	}

	return false
}

// SetAccountSelector gets a reference to the given SelectorServerLabelAccountSelector and assigns it to the AccountSelector field.
func (o *SelectorServerLabel) SetAccountSelector(v SelectorServerLabelAccountSelector) *SelectorServerLabel {
	o.AccountSelector = &v
	return o
}

func (o SelectorServerLabel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectorServerLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerSelector) {
		toSerialize["server_selector"] = o.ServerSelector
	}
	if !IsNil(o.AccountSelectorType) {
		toSerialize["account_selector_type"] = o.AccountSelectorType
	}
	if !IsNil(o.AccountSelector) {
		toSerialize["account_selector"] = o.AccountSelector
	}
	return toSerialize, nil
}

type NullableSelectorServerLabel struct {
	value *SelectorServerLabel
	isSet bool
}

func (v NullableSelectorServerLabel) Get() *SelectorServerLabel {
	return v.value
}

func (v *NullableSelectorServerLabel) Set(val *SelectorServerLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorServerLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorServerLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorServerLabel(val *SelectorServerLabel) *NullableSelectorServerLabel {
	return &NullableSelectorServerLabel{value: val, isSet: true}
}

func (v NullableSelectorServerLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorServerLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
