/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRuleResourceSelectorContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRuleResourceSelectorContainer{}

// SecurityPolicyRuleResourceSelectorContainer struct for SecurityPolicyRuleResourceSelectorContainer
type SecurityPolicyRuleResourceSelectorContainer struct {
	SelectorType *SecurityPolicyRuleResourceSelectorType `json:"selector_type,omitempty"`
	Selector     *SecurityPolicyRuleResourceSelector     `json:"selector,omitempty"`
}

// NewSecurityPolicyRuleResourceSelectorContainer instantiates a new SecurityPolicyRuleResourceSelectorContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRuleResourceSelectorContainer() *SecurityPolicyRuleResourceSelectorContainer {
	this := SecurityPolicyRuleResourceSelectorContainer{}
	return &this
}

// NewSecurityPolicyRuleResourceSelectorContainerWithDefaults instantiates a new SecurityPolicyRuleResourceSelectorContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRuleResourceSelectorContainerWithDefaults() *SecurityPolicyRuleResourceSelectorContainer {
	this := SecurityPolicyRuleResourceSelectorContainer{}
	return &this
}

// GetSelectorType returns the SelectorType field value if set, zero value otherwise.
func (o *SecurityPolicyRuleResourceSelectorContainer) GetSelectorType() SecurityPolicyRuleResourceSelectorType {
	if o == nil || IsNil(o.SelectorType) {
		var ret SecurityPolicyRuleResourceSelectorType
		return ret
	}
	return *o.SelectorType
}

// GetSelectorTypeOk returns a tuple with the SelectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleResourceSelectorContainer) GetSelectorTypeOk() (*SecurityPolicyRuleResourceSelectorType, bool) {
	if o == nil || IsNil(o.SelectorType) {
		return nil, false
	}
	return o.SelectorType, true
}

// HasSelectorType returns a boolean if a field has been set.
func (o *SecurityPolicyRuleResourceSelectorContainer) HasSelectorType() bool {
	if o != nil && !IsNil(o.SelectorType) {
		return true
	}

	return false
}

// SetSelectorType gets a reference to the given SecurityPolicyRuleResourceSelectorType and assigns it to the SelectorType field.
func (o *SecurityPolicyRuleResourceSelectorContainer) SetSelectorType(v SecurityPolicyRuleResourceSelectorType) *SecurityPolicyRuleResourceSelectorContainer {
	o.SelectorType = &v
	return o
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *SecurityPolicyRuleResourceSelectorContainer) GetSelector() SecurityPolicyRuleResourceSelector {
	if o == nil || IsNil(o.Selector) {
		var ret SecurityPolicyRuleResourceSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleResourceSelectorContainer) GetSelectorOk() (*SecurityPolicyRuleResourceSelector, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *SecurityPolicyRuleResourceSelectorContainer) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given SecurityPolicyRuleResourceSelector and assigns it to the Selector field.
func (o *SecurityPolicyRuleResourceSelectorContainer) SetSelector(v SecurityPolicyRuleResourceSelector) *SecurityPolicyRuleResourceSelectorContainer {
	o.Selector = &v
	return o
}

func (o SecurityPolicyRuleResourceSelectorContainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRuleResourceSelectorContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SelectorType) {
		toSerialize["selector_type"] = o.SelectorType
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	return toSerialize, nil
}

type NullableSecurityPolicyRuleResourceSelectorContainer struct {
	value *SecurityPolicyRuleResourceSelectorContainer
	isSet bool
}

func (v NullableSecurityPolicyRuleResourceSelectorContainer) Get() *SecurityPolicyRuleResourceSelectorContainer {
	return v.value
}

func (v *NullableSecurityPolicyRuleResourceSelectorContainer) Set(val *SecurityPolicyRuleResourceSelectorContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleResourceSelectorContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleResourceSelectorContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleResourceSelectorContainer(val *SecurityPolicyRuleResourceSelectorContainer) *NullableSecurityPolicyRuleResourceSelectorContainer {
	return &NullableSecurityPolicyRuleResourceSelectorContainer{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleResourceSelectorContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleResourceSelectorContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
