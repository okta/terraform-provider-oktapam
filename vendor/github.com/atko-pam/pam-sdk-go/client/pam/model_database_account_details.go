/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// DatabaseAccountDetails - struct for DatabaseAccountDetails
type DatabaseAccountDetails struct {
	MySQLUserAccountDetails *MySQLUserAccountDetails
}

// MySQLUserAccountDetailsAsDatabaseAccountDetails is a convenience function that returns MySQLUserAccountDetails wrapped in DatabaseAccountDetails
func MySQLUserAccountDetailsAsDatabaseAccountDetails(v *MySQLUserAccountDetails) DatabaseAccountDetails {
	return DatabaseAccountDetails{
		MySQLUserAccountDetails: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DatabaseAccountDetails) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'MySQLUserAccountDetails'
	if jsonDict["_type"] == "MySQLUserAccountDetails" {
		// try to unmarshal JSON data into MySQLUserAccountDetails
		err = json.Unmarshal(data, &dst.MySQLUserAccountDetails)
		if err == nil {
			return nil // data stored in dst.MySQLUserAccountDetails, return on the first match
		} else {
			dst.MySQLUserAccountDetails = nil
			return fmt.Errorf("failed to unmarshal DatabaseAccountDetails as MySQLUserAccountDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'mysql-static-account'
	if jsonDict["_type"] == "mysql-static-account" {
		// try to unmarshal JSON data into MySQLUserAccountDetails
		err = json.Unmarshal(data, &dst.MySQLUserAccountDetails)
		if err == nil {
			return nil // data stored in dst.MySQLUserAccountDetails, return on the first match
		} else {
			dst.MySQLUserAccountDetails = nil
			return fmt.Errorf("failed to unmarshal DatabaseAccountDetails as MySQLUserAccountDetails: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DatabaseAccountDetails) MarshalJSON() ([]byte, error) {
	if src.MySQLUserAccountDetails != nil {
		return json.Marshal(&src.MySQLUserAccountDetails)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DatabaseAccountDetails) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MySQLUserAccountDetails != nil {
		return obj.MySQLUserAccountDetails
	}

	// all schemas are nil
	return nil
}

type NullableDatabaseAccountDetails struct {
	value *DatabaseAccountDetails
	isSet bool
}

func (v NullableDatabaseAccountDetails) Get() *DatabaseAccountDetails {
	return v.value
}

func (v *NullableDatabaseAccountDetails) Set(val *DatabaseAccountDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseAccountDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseAccountDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseAccountDetails(val *DatabaseAccountDetails) *NullableDatabaseAccountDetails {
	return &NullableDatabaseAccountDetails{value: val, isSet: true}
}

func (v NullableDatabaseAccountDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseAccountDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
