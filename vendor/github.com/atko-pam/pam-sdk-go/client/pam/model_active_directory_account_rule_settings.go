/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryAccountRuleSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAccountRuleSettings{}

// ActiveDirectoryAccountRuleSettings struct for ActiveDirectoryAccountRuleSettings
type ActiveDirectoryAccountRuleSettings struct {
	// If false, the account matching settings haven't been configured
	IsConfigured     *bool                            `json:"is_configured,omitempty"`
	MatchingCriteria *ActiveDirectoryMatchingCriteria `json:"matching_criteria,omitempty"`
	// Conditions for partial matching on Active Directory account and Okta user names
	PartialMatchingCriteria []ActiveDirectoryPartialMatchingCondition `json:"partial_matching_criteria,omitempty"`
	// Allow partial matches for the defined criteria
	AllowPartialMatches *bool `json:"allow_partial_matches,omitempty"`
}

// NewActiveDirectoryAccountRuleSettings instantiates a new ActiveDirectoryAccountRuleSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAccountRuleSettings() *ActiveDirectoryAccountRuleSettings {
	this := ActiveDirectoryAccountRuleSettings{}
	return &this
}

// NewActiveDirectoryAccountRuleSettingsWithDefaults instantiates a new ActiveDirectoryAccountRuleSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAccountRuleSettingsWithDefaults() *ActiveDirectoryAccountRuleSettings {
	this := ActiveDirectoryAccountRuleSettings{}
	return &this
}

// GetIsConfigured returns the IsConfigured field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountRuleSettings) GetIsConfigured() bool {
	if o == nil || IsNil(o.IsConfigured) {
		var ret bool
		return ret
	}
	return *o.IsConfigured
}

// GetIsConfiguredOk returns a tuple with the IsConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountRuleSettings) GetIsConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConfigured) {
		return nil, false
	}
	return o.IsConfigured, true
}

// HasIsConfigured returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountRuleSettings) HasIsConfigured() bool {
	if o != nil && !IsNil(o.IsConfigured) {
		return true
	}

	return false
}

// SetIsConfigured gets a reference to the given bool and assigns it to the IsConfigured field.
func (o *ActiveDirectoryAccountRuleSettings) SetIsConfigured(v bool) *ActiveDirectoryAccountRuleSettings {
	o.IsConfigured = &v
	return o
}

// GetMatchingCriteria returns the MatchingCriteria field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountRuleSettings) GetMatchingCriteria() ActiveDirectoryMatchingCriteria {
	if o == nil || IsNil(o.MatchingCriteria) {
		var ret ActiveDirectoryMatchingCriteria
		return ret
	}
	return *o.MatchingCriteria
}

// GetMatchingCriteriaOk returns a tuple with the MatchingCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountRuleSettings) GetMatchingCriteriaOk() (*ActiveDirectoryMatchingCriteria, bool) {
	if o == nil || IsNil(o.MatchingCriteria) {
		return nil, false
	}
	return o.MatchingCriteria, true
}

// HasMatchingCriteria returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountRuleSettings) HasMatchingCriteria() bool {
	if o != nil && !IsNil(o.MatchingCriteria) {
		return true
	}

	return false
}

// SetMatchingCriteria gets a reference to the given ActiveDirectoryMatchingCriteria and assigns it to the MatchingCriteria field.
func (o *ActiveDirectoryAccountRuleSettings) SetMatchingCriteria(v ActiveDirectoryMatchingCriteria) *ActiveDirectoryAccountRuleSettings {
	o.MatchingCriteria = &v
	return o
}

// GetPartialMatchingCriteria returns the PartialMatchingCriteria field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountRuleSettings) GetPartialMatchingCriteria() []ActiveDirectoryPartialMatchingCondition {
	if o == nil || IsNil(o.PartialMatchingCriteria) {
		var ret []ActiveDirectoryPartialMatchingCondition
		return ret
	}
	return o.PartialMatchingCriteria
}

// GetPartialMatchingCriteriaOk returns a tuple with the PartialMatchingCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountRuleSettings) GetPartialMatchingCriteriaOk() ([]ActiveDirectoryPartialMatchingCondition, bool) {
	if o == nil || IsNil(o.PartialMatchingCriteria) {
		return nil, false
	}
	return o.PartialMatchingCriteria, true
}

// HasPartialMatchingCriteria returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountRuleSettings) HasPartialMatchingCriteria() bool {
	if o != nil && !IsNil(o.PartialMatchingCriteria) {
		return true
	}

	return false
}

// SetPartialMatchingCriteria gets a reference to the given []ActiveDirectoryPartialMatchingCondition and assigns it to the PartialMatchingCriteria field.
func (o *ActiveDirectoryAccountRuleSettings) SetPartialMatchingCriteria(v []ActiveDirectoryPartialMatchingCondition) *ActiveDirectoryAccountRuleSettings {
	o.PartialMatchingCriteria = v
	return o
}

// GetAllowPartialMatches returns the AllowPartialMatches field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountRuleSettings) GetAllowPartialMatches() bool {
	if o == nil || IsNil(o.AllowPartialMatches) {
		var ret bool
		return ret
	}
	return *o.AllowPartialMatches
}

// GetAllowPartialMatchesOk returns a tuple with the AllowPartialMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountRuleSettings) GetAllowPartialMatchesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowPartialMatches) {
		return nil, false
	}
	return o.AllowPartialMatches, true
}

// HasAllowPartialMatches returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountRuleSettings) HasAllowPartialMatches() bool {
	if o != nil && !IsNil(o.AllowPartialMatches) {
		return true
	}

	return false
}

// SetAllowPartialMatches gets a reference to the given bool and assigns it to the AllowPartialMatches field.
func (o *ActiveDirectoryAccountRuleSettings) SetAllowPartialMatches(v bool) *ActiveDirectoryAccountRuleSettings {
	o.AllowPartialMatches = &v
	return o
}

func (o ActiveDirectoryAccountRuleSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAccountRuleSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsConfigured) {
		toSerialize["is_configured"] = o.IsConfigured
	}
	if !IsNil(o.MatchingCriteria) {
		toSerialize["matching_criteria"] = o.MatchingCriteria
	}
	if !IsNil(o.PartialMatchingCriteria) {
		toSerialize["partial_matching_criteria"] = o.PartialMatchingCriteria
	}
	if !IsNil(o.AllowPartialMatches) {
		toSerialize["allow_partial_matches"] = o.AllowPartialMatches
	}
	return toSerialize, nil
}

type NullableActiveDirectoryAccountRuleSettings struct {
	value *ActiveDirectoryAccountRuleSettings
	isSet bool
}

func (v NullableActiveDirectoryAccountRuleSettings) Get() *ActiveDirectoryAccountRuleSettings {
	return v.value
}

func (v *NullableActiveDirectoryAccountRuleSettings) Set(val *ActiveDirectoryAccountRuleSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountRuleSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountRuleSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountRuleSettings(val *ActiveDirectoryAccountRuleSettings) *NullableActiveDirectoryAccountRuleSettings {
	return &NullableActiveDirectoryAccountRuleSettings{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountRuleSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountRuleSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
