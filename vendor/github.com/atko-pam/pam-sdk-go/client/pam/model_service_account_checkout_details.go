/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the ServiceAccountCheckoutDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceAccountCheckoutDetails{}

// ServiceAccountCheckoutDetails Service account info with account checkout details for end-user. Service account can either be a SaaS app account or a Universal Directory account
type ServiceAccountCheckoutDetails struct {
	// If `true`, account will be checked out and no other users will be able to reveal/update credentials until it's checked in back
	CheckoutRequired bool `json:"checkout_required"`
	// A timestamp when the checkout expires for the current user (in UTC)
	CurrentUserCheckoutExpiresAt *time.Time `json:"current_user_checkout_expires_at,omitempty"`
}

// NewServiceAccountCheckoutDetails instantiates a new ServiceAccountCheckoutDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceAccountCheckoutDetails(checkoutRequired bool) *ServiceAccountCheckoutDetails {
	this := ServiceAccountCheckoutDetails{}
	this.CheckoutRequired = checkoutRequired
	return &this
}

// NewServiceAccountCheckoutDetailsWithDefaults instantiates a new ServiceAccountCheckoutDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceAccountCheckoutDetailsWithDefaults() *ServiceAccountCheckoutDetails {
	this := ServiceAccountCheckoutDetails{}
	return &this
}

// GetCheckoutRequired returns the CheckoutRequired field value
func (o *ServiceAccountCheckoutDetails) GetCheckoutRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CheckoutRequired
}

// GetCheckoutRequiredOk returns a tuple with the CheckoutRequired field value
// and a boolean to check if the value has been set.
func (o *ServiceAccountCheckoutDetails) GetCheckoutRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckoutRequired, true
}

// SetCheckoutRequired sets field value
func (o *ServiceAccountCheckoutDetails) SetCheckoutRequired(v bool) *ServiceAccountCheckoutDetails {
	o.CheckoutRequired = v
	return o
}

// GetCurrentUserCheckoutExpiresAt returns the CurrentUserCheckoutExpiresAt field value if set, zero value otherwise.
func (o *ServiceAccountCheckoutDetails) GetCurrentUserCheckoutExpiresAt() time.Time {
	if o == nil || IsNil(o.CurrentUserCheckoutExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.CurrentUserCheckoutExpiresAt
}

// GetCurrentUserCheckoutExpiresAtOk returns a tuple with the CurrentUserCheckoutExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAccountCheckoutDetails) GetCurrentUserCheckoutExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CurrentUserCheckoutExpiresAt) {
		return nil, false
	}
	return o.CurrentUserCheckoutExpiresAt, true
}

// HasCurrentUserCheckoutExpiresAt returns a boolean if a field has been set.
func (o *ServiceAccountCheckoutDetails) HasCurrentUserCheckoutExpiresAt() bool {
	if o != nil && !IsNil(o.CurrentUserCheckoutExpiresAt) {
		return true
	}

	return false
}

// SetCurrentUserCheckoutExpiresAt gets a reference to the given time.Time and assigns it to the CurrentUserCheckoutExpiresAt field.
func (o *ServiceAccountCheckoutDetails) SetCurrentUserCheckoutExpiresAt(v time.Time) *ServiceAccountCheckoutDetails {
	o.CurrentUserCheckoutExpiresAt = &v
	return o
}

func (o ServiceAccountCheckoutDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceAccountCheckoutDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["checkout_required"] = o.CheckoutRequired
	if !IsNil(o.CurrentUserCheckoutExpiresAt) {
		toSerialize["current_user_checkout_expires_at"] = o.CurrentUserCheckoutExpiresAt
	}
	return toSerialize, nil
}

type NullableServiceAccountCheckoutDetails struct {
	value *ServiceAccountCheckoutDetails
	isSet bool
}

func (v NullableServiceAccountCheckoutDetails) Get() *ServiceAccountCheckoutDetails {
	return v.value
}

func (v *NullableServiceAccountCheckoutDetails) Set(val *ServiceAccountCheckoutDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAccountCheckoutDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAccountCheckoutDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAccountCheckoutDetails(val *ServiceAccountCheckoutDetails) *NullableServiceAccountCheckoutDetails {
	return &NullableServiceAccountCheckoutDetails{value: val, isSet: true}
}

func (v NullableServiceAccountCheckoutDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAccountCheckoutDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
