/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// Alg The algorithm of the key
type Alg string

// List of alg
const (
	Alg_RSA_OAEP_256 Alg = "RSA-OAEP-256"
)

// All allowed values of Alg enum
var AllowedAlgEnumValues = []Alg{
	"RSA-OAEP-256",
}

func (v *Alg) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Alg(value)
	for _, existing := range AllowedAlgEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Alg", value)
}

// NewAlgFromValue returns a pointer to a valid Alg
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlgFromValue(v string) (*Alg, error) {
	ev := Alg(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Alg: valid values are %v", v, AllowedAlgEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Alg) IsValid() bool {
	for _, existing := range AllowedAlgEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to alg value
func (v Alg) Ptr() *Alg {
	return &v
}

type NullableAlg struct {
	value *Alg
	isSet bool
}

func (v NullableAlg) Get() *Alg {
	return v.value
}

func (v *NullableAlg) Set(val *Alg) {
	v.value = val
	v.isSet = true
}

func (v NullableAlg) IsSet() bool {
	return v.isSet
}

func (v *NullableAlg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlg(val *Alg) *NullableAlg {
	return &NullableAlg{value: val, isSet: true}
}

func (v NullableAlg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
