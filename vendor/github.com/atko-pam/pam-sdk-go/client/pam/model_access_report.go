/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the AccessReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessReport{}

// AccessReport struct for AccessReport
type AccessReport struct {
	// The UUID of an access report
	Id      *string                `json:"id,omitempty"`
	Details *AccessReportDetails   `json:"details,omitempty"`
	Status  *AccessReportJobStatus `json:"status,omitempty"`
	// A timestamp indicating when the access report was created
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A timestamp indicating when the access report was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewAccessReport instantiates a new AccessReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessReport() *AccessReport {
	this := AccessReport{}
	return &this
}

// NewAccessReportWithDefaults instantiates a new AccessReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessReportWithDefaults() *AccessReport {
	this := AccessReport{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessReport) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReport) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessReport) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccessReport) SetId(v string) *AccessReport {
	o.Id = &v
	return o
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *AccessReport) GetDetails() AccessReportDetails {
	if o == nil || IsNil(o.Details) {
		var ret AccessReportDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReport) GetDetailsOk() (*AccessReportDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *AccessReport) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given AccessReportDetails and assigns it to the Details field.
func (o *AccessReport) SetDetails(v AccessReportDetails) *AccessReport {
	o.Details = &v
	return o
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AccessReport) GetStatus() AccessReportJobStatus {
	if o == nil || IsNil(o.Status) {
		var ret AccessReportJobStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReport) GetStatusOk() (*AccessReportJobStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AccessReport) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AccessReportJobStatus and assigns it to the Status field.
func (o *AccessReport) SetStatus(v AccessReportJobStatus) *AccessReport {
	o.Status = &v
	return o
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AccessReport) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReport) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AccessReport) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AccessReport) SetCreatedAt(v time.Time) *AccessReport {
	o.CreatedAt = &v
	return o
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AccessReport) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReport) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AccessReport) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AccessReport) SetUpdatedAt(v time.Time) *AccessReport {
	o.UpdatedAt = &v
	return o
}

func (o AccessReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAccessReport struct {
	value *AccessReport
	isSet bool
}

func (v NullableAccessReport) Get() *AccessReport {
	return v.value
}

func (v *NullableAccessReport) Set(val *AccessReport) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessReport) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessReport(val *AccessReport) *NullableAccessReport {
	return &NullableAccessReport{value: val, isSet: true}
}

func (v NullableAccessReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
