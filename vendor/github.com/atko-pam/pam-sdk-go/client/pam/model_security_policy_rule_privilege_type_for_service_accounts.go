/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// SecurityPolicyRulePrivilegeTypeForServiceAccounts The type of privilege granted to a user for a service account.
type SecurityPolicyRulePrivilegeTypeForServiceAccounts string

// List of SecurityPolicyRulePrivilegeTypeForServiceAccounts
const (
	SecurityPolicyRulePrivilegeTypeForServiceAccounts_REVEAL_PASSWORD SecurityPolicyRulePrivilegeTypeForServiceAccounts = "reveal_password"
	SecurityPolicyRulePrivilegeTypeForServiceAccounts_UPDATE_PASSWORD SecurityPolicyRulePrivilegeTypeForServiceAccounts = "update_password"
)

// All allowed values of SecurityPolicyRulePrivilegeTypeForServiceAccounts enum
var AllowedSecurityPolicyRulePrivilegeTypeForServiceAccountsEnumValues = []SecurityPolicyRulePrivilegeTypeForServiceAccounts{
	"reveal_password",
	"update_password",
}

func (v *SecurityPolicyRulePrivilegeTypeForServiceAccounts) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityPolicyRulePrivilegeTypeForServiceAccounts(value)

	*v = enumTypeValue

	return nil
}

// NewSecurityPolicyRulePrivilegeTypeForServiceAccountsFromValue returns a pointer to a valid SecurityPolicyRulePrivilegeTypeForServiceAccounts
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityPolicyRulePrivilegeTypeForServiceAccountsFromValue(v string) (*SecurityPolicyRulePrivilegeTypeForServiceAccounts, error) {
	ev := SecurityPolicyRulePrivilegeTypeForServiceAccounts(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityPolicyRulePrivilegeTypeForServiceAccounts) IsValid() bool {
	for _, existing := range AllowedSecurityPolicyRulePrivilegeTypeForServiceAccountsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityPolicyRulePrivilegeTypeForServiceAccounts value
func (v SecurityPolicyRulePrivilegeTypeForServiceAccounts) Ptr() *SecurityPolicyRulePrivilegeTypeForServiceAccounts {
	return &v
}

type NullableSecurityPolicyRulePrivilegeTypeForServiceAccounts struct {
	value *SecurityPolicyRulePrivilegeTypeForServiceAccounts
	isSet bool
}

func (v NullableSecurityPolicyRulePrivilegeTypeForServiceAccounts) Get() *SecurityPolicyRulePrivilegeTypeForServiceAccounts {
	return v.value
}

func (v *NullableSecurityPolicyRulePrivilegeTypeForServiceAccounts) Set(val *SecurityPolicyRulePrivilegeTypeForServiceAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRulePrivilegeTypeForServiceAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRulePrivilegeTypeForServiceAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRulePrivilegeTypeForServiceAccounts(val *SecurityPolicyRulePrivilegeTypeForServiceAccounts) *NullableSecurityPolicyRulePrivilegeTypeForServiceAccounts {
	return &NullableSecurityPolicyRulePrivilegeTypeForServiceAccounts{value: val, isSet: true}
}

func (v NullableSecurityPolicyRulePrivilegeTypeForServiceAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRulePrivilegeTypeForServiceAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
