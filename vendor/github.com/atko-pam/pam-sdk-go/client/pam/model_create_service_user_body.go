/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the CreateServiceUserBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateServiceUserBody{}

// CreateServiceUserBody struct for CreateServiceUserBody
type CreateServiceUserBody struct {
	// The name of the Service User
	Name string `json:"name"`
}

// NewCreateServiceUserBody instantiates a new CreateServiceUserBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateServiceUserBody(name string) *CreateServiceUserBody {
	this := CreateServiceUserBody{}
	this.Name = name
	return &this
}

// NewCreateServiceUserBodyWithDefaults instantiates a new CreateServiceUserBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateServiceUserBodyWithDefaults() *CreateServiceUserBody {
	this := CreateServiceUserBody{}
	return &this
}

// GetName returns the Name field value
func (o *CreateServiceUserBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateServiceUserBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateServiceUserBody) SetName(v string) *CreateServiceUserBody {
	o.Name = v
	return o
}

func (o CreateServiceUserBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateServiceUserBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableCreateServiceUserBody struct {
	value *CreateServiceUserBody
	isSet bool
}

func (v NullableCreateServiceUserBody) Get() *CreateServiceUserBody {
	return v.value
}

func (v *NullableCreateServiceUserBody) Set(val *CreateServiceUserBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateServiceUserBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateServiceUserBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateServiceUserBody(val *CreateServiceUserBody) *NullableCreateServiceUserBody {
	return &NullableCreateServiceUserBody{value: val, isSet: true}
}

func (v NullableCreateServiceUserBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateServiceUserBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
