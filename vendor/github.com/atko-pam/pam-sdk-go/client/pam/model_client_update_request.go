/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ClientUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientUpdateRequest{}

// ClientUpdateRequest struct for ClientUpdateRequest
type ClientUpdateRequest struct {
	// The state of the client: `ACTIVE`, `PENDING`, or `DELETED`
	State NullableString `json:"state,omitempty"`
	// The user associated with the client
	UserName NullableString `json:"user_name,omitempty"`
}

// NewClientUpdateRequest instantiates a new ClientUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientUpdateRequest() *ClientUpdateRequest {
	this := ClientUpdateRequest{}
	return &this
}

// NewClientUpdateRequestWithDefaults instantiates a new ClientUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientUpdateRequestWithDefaults() *ClientUpdateRequest {
	this := ClientUpdateRequest{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientUpdateRequest) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientUpdateRequest) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *ClientUpdateRequest) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *ClientUpdateRequest) SetState(v string) *ClientUpdateRequest {
	o.State.Set(&v)
	return o
}

// SetStateNil sets the value for State to be an explicit nil
func (o *ClientUpdateRequest) SetStateNil() *ClientUpdateRequest {
	o.State.Set(nil)
	return o
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *ClientUpdateRequest) UnsetState() *ClientUpdateRequest {
	o.State.Unset()
	return o
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientUpdateRequest) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientUpdateRequest) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *ClientUpdateRequest) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *ClientUpdateRequest) SetUserName(v string) *ClientUpdateRequest {
	o.UserName.Set(&v)
	return o
}

// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *ClientUpdateRequest) SetUserNameNil() *ClientUpdateRequest {
	o.UserName.Set(nil)
	return o
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *ClientUpdateRequest) UnsetUserName() *ClientUpdateRequest {
	o.UserName.Unset()
	return o
}

func (o ClientUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.UserName.IsSet() {
		toSerialize["user_name"] = o.UserName.Get()
	}
	return toSerialize, nil
}

type NullableClientUpdateRequest struct {
	value *ClientUpdateRequest
	isSet bool
}

func (v NullableClientUpdateRequest) Get() *ClientUpdateRequest {
	return v.value
}

func (v *NullableClientUpdateRequest) Set(val *ClientUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClientUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClientUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientUpdateRequest(val *ClientUpdateRequest) *NullableClientUpdateRequest {
	return &NullableClientUpdateRequest{value: val, isSet: true}
}

func (v NullableClientUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
