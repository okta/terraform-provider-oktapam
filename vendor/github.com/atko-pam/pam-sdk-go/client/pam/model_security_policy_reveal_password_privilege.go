/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRevealPasswordPrivilege type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRevealPasswordPrivilege{}

// SecurityPolicyRevealPasswordPrivilege Privilege to grant access to reveal password for an account
type SecurityPolicyRevealPasswordPrivilege struct {
	SecurityPolicyPrivilege
	RevealPassword bool `json:"reveal_password"`
}

// NewSecurityPolicyRevealPasswordPrivilege instantiates a new SecurityPolicyRevealPasswordPrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRevealPasswordPrivilege(revealPassword bool, type_ SecurityPolicyRulePrivilegeType) *SecurityPolicyRevealPasswordPrivilege {
	this := SecurityPolicyRevealPasswordPrivilege{}
	this.Type = type_
	this.RevealPassword = revealPassword
	return &this
}

// NewSecurityPolicyRevealPasswordPrivilegeWithDefaults instantiates a new SecurityPolicyRevealPasswordPrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRevealPasswordPrivilegeWithDefaults() *SecurityPolicyRevealPasswordPrivilege {
	this := SecurityPolicyRevealPasswordPrivilege{}
	return &this
}

// GetRevealPassword returns the RevealPassword field value
func (o *SecurityPolicyRevealPasswordPrivilege) GetRevealPassword() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RevealPassword
}

// GetRevealPasswordOk returns a tuple with the RevealPassword field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRevealPasswordPrivilege) GetRevealPasswordOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevealPassword, true
}

// SetRevealPassword sets field value
func (o *SecurityPolicyRevealPasswordPrivilege) SetRevealPassword(v bool) *SecurityPolicyRevealPasswordPrivilege {
	o.RevealPassword = v
	return o
}

func (o SecurityPolicyRevealPasswordPrivilege) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRevealPasswordPrivilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSecurityPolicyPrivilege, errSecurityPolicyPrivilege := json.Marshal(o.SecurityPolicyPrivilege)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	errSecurityPolicyPrivilege = json.Unmarshal([]byte(serializedSecurityPolicyPrivilege), &toSerialize)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	toSerialize["reveal_password"] = o.RevealPassword
	return toSerialize, nil
}

type NullableSecurityPolicyRevealPasswordPrivilege struct {
	value *SecurityPolicyRevealPasswordPrivilege
	isSet bool
}

func (v NullableSecurityPolicyRevealPasswordPrivilege) Get() *SecurityPolicyRevealPasswordPrivilege {
	return v.value
}

func (v *NullableSecurityPolicyRevealPasswordPrivilege) Set(val *SecurityPolicyRevealPasswordPrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRevealPasswordPrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRevealPasswordPrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRevealPasswordPrivilege(val *SecurityPolicyRevealPasswordPrivilege) *NullableSecurityPolicyRevealPasswordPrivilege {
	return &NullableSecurityPolicyRevealPasswordPrivilege{value: val, isSet: true}
}

func (v NullableSecurityPolicyRevealPasswordPrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRevealPasswordPrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
