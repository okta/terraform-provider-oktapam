/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ProjectCheckoutSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCheckoutSettings{}

// ProjectCheckoutSettings struct for ProjectCheckoutSettings
type ProjectCheckoutSettings struct {
	ServerBasedResourcesCheckoutSettings   *ResourceCheckoutSettings `json:"server_based_resources_checkout_settings,omitempty"`
	DatabaseBasedResourcesCheckoutSettings *ResourceCheckoutSettings `json:"database_based_resources_checkout_settings,omitempty"`
}

// NewProjectCheckoutSettings instantiates a new ProjectCheckoutSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCheckoutSettings() *ProjectCheckoutSettings {
	this := ProjectCheckoutSettings{}
	return &this
}

// NewProjectCheckoutSettingsWithDefaults instantiates a new ProjectCheckoutSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCheckoutSettingsWithDefaults() *ProjectCheckoutSettings {
	this := ProjectCheckoutSettings{}
	return &this
}

// GetServerBasedResourcesCheckoutSettings returns the ServerBasedResourcesCheckoutSettings field value if set, zero value otherwise.
func (o *ProjectCheckoutSettings) GetServerBasedResourcesCheckoutSettings() ResourceCheckoutSettings {
	if o == nil || IsNil(o.ServerBasedResourcesCheckoutSettings) {
		var ret ResourceCheckoutSettings
		return ret
	}
	return *o.ServerBasedResourcesCheckoutSettings
}

// GetServerBasedResourcesCheckoutSettingsOk returns a tuple with the ServerBasedResourcesCheckoutSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCheckoutSettings) GetServerBasedResourcesCheckoutSettingsOk() (*ResourceCheckoutSettings, bool) {
	if o == nil || IsNil(o.ServerBasedResourcesCheckoutSettings) {
		return nil, false
	}
	return o.ServerBasedResourcesCheckoutSettings, true
}

// HasServerBasedResourcesCheckoutSettings returns a boolean if a field has been set.
func (o *ProjectCheckoutSettings) HasServerBasedResourcesCheckoutSettings() bool {
	if o != nil && !IsNil(o.ServerBasedResourcesCheckoutSettings) {
		return true
	}

	return false
}

// SetServerBasedResourcesCheckoutSettings gets a reference to the given ResourceCheckoutSettings and assigns it to the ServerBasedResourcesCheckoutSettings field.
func (o *ProjectCheckoutSettings) SetServerBasedResourcesCheckoutSettings(v ResourceCheckoutSettings) *ProjectCheckoutSettings {
	o.ServerBasedResourcesCheckoutSettings = &v
	return o
}

// GetDatabaseBasedResourcesCheckoutSettings returns the DatabaseBasedResourcesCheckoutSettings field value if set, zero value otherwise.
func (o *ProjectCheckoutSettings) GetDatabaseBasedResourcesCheckoutSettings() ResourceCheckoutSettings {
	if o == nil || IsNil(o.DatabaseBasedResourcesCheckoutSettings) {
		var ret ResourceCheckoutSettings
		return ret
	}
	return *o.DatabaseBasedResourcesCheckoutSettings
}

// GetDatabaseBasedResourcesCheckoutSettingsOk returns a tuple with the DatabaseBasedResourcesCheckoutSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCheckoutSettings) GetDatabaseBasedResourcesCheckoutSettingsOk() (*ResourceCheckoutSettings, bool) {
	if o == nil || IsNil(o.DatabaseBasedResourcesCheckoutSettings) {
		return nil, false
	}
	return o.DatabaseBasedResourcesCheckoutSettings, true
}

// HasDatabaseBasedResourcesCheckoutSettings returns a boolean if a field has been set.
func (o *ProjectCheckoutSettings) HasDatabaseBasedResourcesCheckoutSettings() bool {
	if o != nil && !IsNil(o.DatabaseBasedResourcesCheckoutSettings) {
		return true
	}

	return false
}

// SetDatabaseBasedResourcesCheckoutSettings gets a reference to the given ResourceCheckoutSettings and assigns it to the DatabaseBasedResourcesCheckoutSettings field.
func (o *ProjectCheckoutSettings) SetDatabaseBasedResourcesCheckoutSettings(v ResourceCheckoutSettings) *ProjectCheckoutSettings {
	o.DatabaseBasedResourcesCheckoutSettings = &v
	return o
}

func (o ProjectCheckoutSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectCheckoutSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerBasedResourcesCheckoutSettings) {
		toSerialize["server_based_resources_checkout_settings"] = o.ServerBasedResourcesCheckoutSettings
	}
	if !IsNil(o.DatabaseBasedResourcesCheckoutSettings) {
		toSerialize["database_based_resources_checkout_settings"] = o.DatabaseBasedResourcesCheckoutSettings
	}
	return toSerialize, nil
}

type NullableProjectCheckoutSettings struct {
	value *ProjectCheckoutSettings
	isSet bool
}

func (v NullableProjectCheckoutSettings) Get() *ProjectCheckoutSettings {
	return v.value
}

func (v *NullableProjectCheckoutSettings) Set(val *ProjectCheckoutSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCheckoutSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCheckoutSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCheckoutSettings(val *ProjectCheckoutSettings) *NullableProjectCheckoutSettings {
	return &NullableProjectCheckoutSettings{value: val, isSet: true}
}

func (v NullableProjectCheckoutSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCheckoutSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
