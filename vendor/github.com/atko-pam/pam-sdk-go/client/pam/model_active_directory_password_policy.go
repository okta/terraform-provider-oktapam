/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the ActiveDirectoryPasswordPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryPasswordPolicy{}

// ActiveDirectoryPasswordPolicy struct for ActiveDirectoryPasswordPolicy
type ActiveDirectoryPasswordPolicy struct {
	// If `true`, rotates account passwords between the specified time period. You must also set the `periodic_rotation_duration_in_seconds` and `periodic_rotation_account_selector_mode` properties.
	EnablePeriodicRotation              bool                 `json:"enable_periodic_rotation"`
	PeriodicRotationAccountSelectorMode *AccountSelectorMode `json:"periodic_rotation_account_selector_mode,omitempty"`
	// If `periodic_rotation_account_selector_mode` is set to `INCLUDE`, only the actively managed accounts listed will have their password periodically rotated
	PeriodicRotationAccountIncludeList []ActiveDirectorySettingNameObject `json:"periodic_rotation_account_include_list,omitempty"`
	// If `periodic_rotation_account_selector_mode` is set to `EXCLUDE`, all of the actively managed accounts in the project except those listed will have their password periodically rotated
	PeriodicRotationAccountExcludeList []ActiveDirectorySettingNameObject `json:"periodic_rotation_account_exclude_list,omitempty"`
	// Specifies how often the Okta Privileged Access platform rotates account passwords
	PeriodicRotationDurationInSeconds *int32                                        `json:"periodic_rotation_duration_in_seconds,omitempty"`
	CharacterOptions                  ActiveDirectoryPasswordPolicyCharacterOptions `json:"character_options"`
	// The minimum length allowed for the password
	MinLengthInBytes int32 `json:"min_length_in_bytes"`
	// The maximum length allowed for the password
	MaxLengthInBytes int32 `json:"max_length_in_bytes"`
	// A timestamp indicating when the password policy was last modified
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// NewActiveDirectoryPasswordPolicy instantiates a new ActiveDirectoryPasswordPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryPasswordPolicy(enablePeriodicRotation bool, characterOptions ActiveDirectoryPasswordPolicyCharacterOptions, minLengthInBytes int32, maxLengthInBytes int32) *ActiveDirectoryPasswordPolicy {
	this := ActiveDirectoryPasswordPolicy{}
	this.EnablePeriodicRotation = enablePeriodicRotation
	this.CharacterOptions = characterOptions
	this.MinLengthInBytes = minLengthInBytes
	this.MaxLengthInBytes = maxLengthInBytes
	return &this
}

// NewActiveDirectoryPasswordPolicyWithDefaults instantiates a new ActiveDirectoryPasswordPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryPasswordPolicyWithDefaults() *ActiveDirectoryPasswordPolicy {
	this := ActiveDirectoryPasswordPolicy{}
	return &this
}

// GetEnablePeriodicRotation returns the EnablePeriodicRotation field value
func (o *ActiveDirectoryPasswordPolicy) GetEnablePeriodicRotation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnablePeriodicRotation
}

// GetEnablePeriodicRotationOk returns a tuple with the EnablePeriodicRotation field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicy) GetEnablePeriodicRotationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnablePeriodicRotation, true
}

// SetEnablePeriodicRotation sets field value
func (o *ActiveDirectoryPasswordPolicy) SetEnablePeriodicRotation(v bool) *ActiveDirectoryPasswordPolicy {
	o.EnablePeriodicRotation = v
	return o
}

// GetPeriodicRotationAccountSelectorMode returns the PeriodicRotationAccountSelectorMode field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicy) GetPeriodicRotationAccountSelectorMode() AccountSelectorMode {
	if o == nil || IsNil(o.PeriodicRotationAccountSelectorMode) {
		var ret AccountSelectorMode
		return ret
	}
	return *o.PeriodicRotationAccountSelectorMode
}

// GetPeriodicRotationAccountSelectorModeOk returns a tuple with the PeriodicRotationAccountSelectorMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicy) GetPeriodicRotationAccountSelectorModeOk() (*AccountSelectorMode, bool) {
	if o == nil || IsNil(o.PeriodicRotationAccountSelectorMode) {
		return nil, false
	}
	return o.PeriodicRotationAccountSelectorMode, true
}

// HasPeriodicRotationAccountSelectorMode returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicy) HasPeriodicRotationAccountSelectorMode() bool {
	if o != nil && !IsNil(o.PeriodicRotationAccountSelectorMode) {
		return true
	}

	return false
}

// SetPeriodicRotationAccountSelectorMode gets a reference to the given AccountSelectorMode and assigns it to the PeriodicRotationAccountSelectorMode field.
func (o *ActiveDirectoryPasswordPolicy) SetPeriodicRotationAccountSelectorMode(v AccountSelectorMode) *ActiveDirectoryPasswordPolicy {
	o.PeriodicRotationAccountSelectorMode = &v
	return o
}

// GetPeriodicRotationAccountIncludeList returns the PeriodicRotationAccountIncludeList field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicy) GetPeriodicRotationAccountIncludeList() []ActiveDirectorySettingNameObject {
	if o == nil || IsNil(o.PeriodicRotationAccountIncludeList) {
		var ret []ActiveDirectorySettingNameObject
		return ret
	}
	return o.PeriodicRotationAccountIncludeList
}

// GetPeriodicRotationAccountIncludeListOk returns a tuple with the PeriodicRotationAccountIncludeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicy) GetPeriodicRotationAccountIncludeListOk() ([]ActiveDirectorySettingNameObject, bool) {
	if o == nil || IsNil(o.PeriodicRotationAccountIncludeList) {
		return nil, false
	}
	return o.PeriodicRotationAccountIncludeList, true
}

// HasPeriodicRotationAccountIncludeList returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicy) HasPeriodicRotationAccountIncludeList() bool {
	if o != nil && !IsNil(o.PeriodicRotationAccountIncludeList) {
		return true
	}

	return false
}

// SetPeriodicRotationAccountIncludeList gets a reference to the given []ActiveDirectorySettingNameObject and assigns it to the PeriodicRotationAccountIncludeList field.
func (o *ActiveDirectoryPasswordPolicy) SetPeriodicRotationAccountIncludeList(v []ActiveDirectorySettingNameObject) *ActiveDirectoryPasswordPolicy {
	o.PeriodicRotationAccountIncludeList = v
	return o
}

// GetPeriodicRotationAccountExcludeList returns the PeriodicRotationAccountExcludeList field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicy) GetPeriodicRotationAccountExcludeList() []ActiveDirectorySettingNameObject {
	if o == nil || IsNil(o.PeriodicRotationAccountExcludeList) {
		var ret []ActiveDirectorySettingNameObject
		return ret
	}
	return o.PeriodicRotationAccountExcludeList
}

// GetPeriodicRotationAccountExcludeListOk returns a tuple with the PeriodicRotationAccountExcludeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicy) GetPeriodicRotationAccountExcludeListOk() ([]ActiveDirectorySettingNameObject, bool) {
	if o == nil || IsNil(o.PeriodicRotationAccountExcludeList) {
		return nil, false
	}
	return o.PeriodicRotationAccountExcludeList, true
}

// HasPeriodicRotationAccountExcludeList returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicy) HasPeriodicRotationAccountExcludeList() bool {
	if o != nil && !IsNil(o.PeriodicRotationAccountExcludeList) {
		return true
	}

	return false
}

// SetPeriodicRotationAccountExcludeList gets a reference to the given []ActiveDirectorySettingNameObject and assigns it to the PeriodicRotationAccountExcludeList field.
func (o *ActiveDirectoryPasswordPolicy) SetPeriodicRotationAccountExcludeList(v []ActiveDirectorySettingNameObject) *ActiveDirectoryPasswordPolicy {
	o.PeriodicRotationAccountExcludeList = v
	return o
}

// GetPeriodicRotationDurationInSeconds returns the PeriodicRotationDurationInSeconds field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicy) GetPeriodicRotationDurationInSeconds() int32 {
	if o == nil || IsNil(o.PeriodicRotationDurationInSeconds) {
		var ret int32
		return ret
	}
	return *o.PeriodicRotationDurationInSeconds
}

// GetPeriodicRotationDurationInSecondsOk returns a tuple with the PeriodicRotationDurationInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicy) GetPeriodicRotationDurationInSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.PeriodicRotationDurationInSeconds) {
		return nil, false
	}
	return o.PeriodicRotationDurationInSeconds, true
}

// HasPeriodicRotationDurationInSeconds returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicy) HasPeriodicRotationDurationInSeconds() bool {
	if o != nil && !IsNil(o.PeriodicRotationDurationInSeconds) {
		return true
	}

	return false
}

// SetPeriodicRotationDurationInSeconds gets a reference to the given int32 and assigns it to the PeriodicRotationDurationInSeconds field.
func (o *ActiveDirectoryPasswordPolicy) SetPeriodicRotationDurationInSeconds(v int32) *ActiveDirectoryPasswordPolicy {
	o.PeriodicRotationDurationInSeconds = &v
	return o
}

// GetCharacterOptions returns the CharacterOptions field value
func (o *ActiveDirectoryPasswordPolicy) GetCharacterOptions() ActiveDirectoryPasswordPolicyCharacterOptions {
	if o == nil {
		var ret ActiveDirectoryPasswordPolicyCharacterOptions
		return ret
	}

	return o.CharacterOptions
}

// GetCharacterOptionsOk returns a tuple with the CharacterOptions field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicy) GetCharacterOptionsOk() (*ActiveDirectoryPasswordPolicyCharacterOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CharacterOptions, true
}

// SetCharacterOptions sets field value
func (o *ActiveDirectoryPasswordPolicy) SetCharacterOptions(v ActiveDirectoryPasswordPolicyCharacterOptions) *ActiveDirectoryPasswordPolicy {
	o.CharacterOptions = v
	return o
}

// GetMinLengthInBytes returns the MinLengthInBytes field value
func (o *ActiveDirectoryPasswordPolicy) GetMinLengthInBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinLengthInBytes
}

// GetMinLengthInBytesOk returns a tuple with the MinLengthInBytes field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicy) GetMinLengthInBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinLengthInBytes, true
}

// SetMinLengthInBytes sets field value
func (o *ActiveDirectoryPasswordPolicy) SetMinLengthInBytes(v int32) *ActiveDirectoryPasswordPolicy {
	o.MinLengthInBytes = v
	return o
}

// GetMaxLengthInBytes returns the MaxLengthInBytes field value
func (o *ActiveDirectoryPasswordPolicy) GetMaxLengthInBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxLengthInBytes
}

// GetMaxLengthInBytesOk returns a tuple with the MaxLengthInBytes field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicy) GetMaxLengthInBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxLengthInBytes, true
}

// SetMaxLengthInBytes sets field value
func (o *ActiveDirectoryPasswordPolicy) SetMaxLengthInBytes(v int32) *ActiveDirectoryPasswordPolicy {
	o.MaxLengthInBytes = v
	return o
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicy) GetModifiedAt() time.Time {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicy) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicy) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *ActiveDirectoryPasswordPolicy) SetModifiedAt(v time.Time) *ActiveDirectoryPasswordPolicy {
	o.ModifiedAt = &v
	return o
}

func (o ActiveDirectoryPasswordPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryPasswordPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enable_periodic_rotation"] = o.EnablePeriodicRotation
	if !IsNil(o.PeriodicRotationAccountSelectorMode) {
		toSerialize["periodic_rotation_account_selector_mode"] = o.PeriodicRotationAccountSelectorMode
	}
	if !IsNil(o.PeriodicRotationAccountIncludeList) {
		toSerialize["periodic_rotation_account_include_list"] = o.PeriodicRotationAccountIncludeList
	}
	if !IsNil(o.PeriodicRotationAccountExcludeList) {
		toSerialize["periodic_rotation_account_exclude_list"] = o.PeriodicRotationAccountExcludeList
	}
	if !IsNil(o.PeriodicRotationDurationInSeconds) {
		toSerialize["periodic_rotation_duration_in_seconds"] = o.PeriodicRotationDurationInSeconds
	}
	toSerialize["character_options"] = o.CharacterOptions
	toSerialize["min_length_in_bytes"] = o.MinLengthInBytes
	toSerialize["max_length_in_bytes"] = o.MaxLengthInBytes
	if !IsNil(o.ModifiedAt) {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	return toSerialize, nil
}

type NullableActiveDirectoryPasswordPolicy struct {
	value *ActiveDirectoryPasswordPolicy
	isSet bool
}

func (v NullableActiveDirectoryPasswordPolicy) Get() *ActiveDirectoryPasswordPolicy {
	return v.value
}

func (v *NullableActiveDirectoryPasswordPolicy) Set(val *ActiveDirectoryPasswordPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryPasswordPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryPasswordPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryPasswordPolicy(val *ActiveDirectoryPasswordPolicy) *NullableActiveDirectoryPasswordPolicy {
	return &NullableActiveDirectoryPasswordPolicy{value: val, isSet: true}
}

func (v NullableActiveDirectoryPasswordPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryPasswordPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
