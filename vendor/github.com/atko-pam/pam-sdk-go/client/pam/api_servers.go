/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ServersAPIService ServersAPI service
type ServersAPIService service

type ApiDeleteResourceGroupProjectServerRequest struct {
	ctx             context.Context
	ApiService      *ServersAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	serverId        string
}

func (r ApiDeleteResourceGroupProjectServerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteResourceGroupProjectServerExecute(r)
}

/*
DeleteResourceGroupProjectServer Delete a server from a project

	Deletes a server from a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project
	@param serverId The UUID of an enrolled server

@return ApiDeleteResourceGroupProjectServerRequest
*/
func (a *ServersAPIService) DeleteResourceGroupProjectServer(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverId string) ApiDeleteResourceGroupProjectServerRequest {
	return ApiDeleteResourceGroupProjectServerRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		serverId:        serverId,
	}
}

// Execute executes the request
func (a *ServersAPIService) DeleteResourceGroupProjectServerExecute(r ApiDeleteResourceGroupProjectServerRequest) (*http.Response, error) {
	var (
		traceKey           = "serversapi.deleteResourceGroupProjectServer"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/servers/{server_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_id"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiGetResourceGroupProjectServerRequest struct {
	ctx             context.Context
	ApiService      *ServersAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	serverId        string
}

func (r ApiGetResourceGroupProjectServerRequest) Execute() (*Server, *http.Response, error) {
	return r.ApiService.GetResourceGroupProjectServerExecute(r)
}

/*
GetResourceGroupProjectServer Retrieve a server from a project

	Retrieves a server from a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project
	@param serverId The UUID of an enrolled server

@return ApiGetResourceGroupProjectServerRequest
*/
func (a *ServersAPIService) GetResourceGroupProjectServer(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverId string) ApiGetResourceGroupProjectServerRequest {
	return ApiGetResourceGroupProjectServerRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		serverId:        serverId,
	}
}

// Execute executes the request
//
//	@return Server
func (a *ServersAPIService) GetResourceGroupProjectServerExecute(r ApiGetResourceGroupProjectServerRequest) (*Server, *http.Response, error) {
	var (
		traceKey            = "serversapi.getResourceGroupProjectServer"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Server
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/servers/{server_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_id"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListAllServerAccountResourcesForDelegatedSecurityAdminRequest struct {
	ctx             context.Context
	ApiService      *ServersAPIService
	teamName        string
	resourceGroupId string
}

func (r ApiListAllServerAccountResourcesForDelegatedSecurityAdminRequest) Execute() (*ListAllServerAccountResourcesForDelegatedSecurityAdminResponse, *http.Response, error) {
	return r.ApiService.ListAllServerAccountResourcesForDelegatedSecurityAdminExecute(r)
}

/*
ListAllServerAccountResourcesForDelegatedSecurityAdmin List all server account Resources in a Resource group

	Lists all server account Resources in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group

@return ApiListAllServerAccountResourcesForDelegatedSecurityAdminRequest
*/
func (a *ServersAPIService) ListAllServerAccountResourcesForDelegatedSecurityAdmin(ctx context.Context, teamName string, resourceGroupId string) ApiListAllServerAccountResourcesForDelegatedSecurityAdminRequest {
	return ApiListAllServerAccountResourcesForDelegatedSecurityAdminRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return ListAllServerAccountResourcesForDelegatedSecurityAdminResponse
func (a *ServersAPIService) ListAllServerAccountResourcesForDelegatedSecurityAdminExecute(r ApiListAllServerAccountResourcesForDelegatedSecurityAdminRequest) (*ListAllServerAccountResourcesForDelegatedSecurityAdminResponse, *http.Response, error) {
	var (
		traceKey            = "serversapi.listAllServerAccountResourcesForDelegatedSecurityAdmin"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListAllServerAccountResourcesForDelegatedSecurityAdminResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/all_server_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListAllServerAccountResourcesForSecurityAdminRequest struct {
	ctx        context.Context
	ApiService *ServersAPIService
	teamName   string
}

func (r ApiListAllServerAccountResourcesForSecurityAdminRequest) Execute() (*ListAllServerAccountResourcesForSecurityAdminResponse, *http.Response, error) {
	return r.ApiService.ListAllServerAccountResourcesForSecurityAdminExecute(r)
}

/*
ListAllServerAccountResourcesForSecurityAdmin List all server account resources

	Lists all server account resources

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team

@return ApiListAllServerAccountResourcesForSecurityAdminRequest
*/
func (a *ServersAPIService) ListAllServerAccountResourcesForSecurityAdmin(ctx context.Context, teamName string) ApiListAllServerAccountResourcesForSecurityAdminRequest {
	return ApiListAllServerAccountResourcesForSecurityAdminRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListAllServerAccountResourcesForSecurityAdminResponse
func (a *ServersAPIService) ListAllServerAccountResourcesForSecurityAdminExecute(r ApiListAllServerAccountResourcesForSecurityAdminRequest) (*ListAllServerAccountResourcesForSecurityAdminResponse, *http.Response, error) {
	var (
		traceKey            = "serversapi.listAllServerAccountResourcesForSecurityAdmin"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListAllServerAccountResourcesForSecurityAdminResponse
	)

	localVarPath := "/v1/teams/{team_name}/all_server_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListAllServersForAdminRequest struct {
	ctx              context.Context
	ApiService       *ServersAPIService
	teamName         string
	hostnameContains *string
	osType           *string
}

// Only return servers whose hostname contains the specified string (case-insensitive)
func (r ApiListAllServersForAdminRequest) HostnameContains(hostnameContains string) ApiListAllServersForAdminRequest {
	r.hostnameContains = &hostnameContains
	return r
}

// Only return servers with the specified OS type. Possible values: &#x60;linux&#x60; or &#x60;windows&#x60;.
func (r ApiListAllServersForAdminRequest) OsType(osType string) ApiListAllServersForAdminRequest {
	r.osType = &osType
	return r
}

func (r ApiListAllServersForAdminRequest) Execute() (*ListAllServersForAdminResponse, *http.Response, error) {
	return r.ApiService.ListAllServersForAdminExecute(r)
}

/*
ListAllServersForAdmin List all servers

	Lists all servers for your team

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team

@return ApiListAllServersForAdminRequest
*/
func (a *ServersAPIService) ListAllServersForAdmin(ctx context.Context, teamName string) ApiListAllServersForAdminRequest {
	return ApiListAllServersForAdminRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListAllServersForAdminResponse
func (a *ServersAPIService) ListAllServersForAdminExecute(r ApiListAllServersForAdminRequest) (*ListAllServersForAdminResponse, *http.Response, error) {
	var (
		traceKey            = "serversapi.listAllServersForAdmin"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListAllServersForAdminResponse
	)

	localVarPath := "/v1/teams/{team_name}/all_servers"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hostnameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostname_contains", r.hostnameContains, "")
	}
	if r.osType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os_type", r.osType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListAllServersForResourceGroupRequest struct {
	ctx              context.Context
	ApiService       *ServersAPIService
	teamName         string
	resourceGroupId  string
	hostnameContains *string
	osType           *string
}

// Only return servers whose hostname contains the specified string (case-insensitive)
func (r ApiListAllServersForResourceGroupRequest) HostnameContains(hostnameContains string) ApiListAllServersForResourceGroupRequest {
	r.hostnameContains = &hostnameContains
	return r
}

// Only return servers with the specified OS type. Possible values: &#x60;linux&#x60; or &#x60;windows&#x60;.
func (r ApiListAllServersForResourceGroupRequest) OsType(osType string) ApiListAllServersForResourceGroupRequest {
	r.osType = &osType
	return r
}

func (r ApiListAllServersForResourceGroupRequest) Execute() (*ListResourceGroupServersResponse, *http.Response, error) {
	return r.ApiService.ListAllServersForResourceGroupExecute(r)
}

/*
ListAllServersForResourceGroup List all servers in a resource group

	Lists all servers in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group

@return ApiListAllServersForResourceGroupRequest
*/
func (a *ServersAPIService) ListAllServersForResourceGroup(ctx context.Context, teamName string, resourceGroupId string) ApiListAllServersForResourceGroupRequest {
	return ApiListAllServersForResourceGroupRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return ListResourceGroupServersResponse
func (a *ServersAPIService) ListAllServersForResourceGroupExecute(r ApiListAllServersForResourceGroupRequest) (*ListResourceGroupServersResponse, *http.Response, error) {
	var (
		traceKey            = "serversapi.listAllServersForResourceGroup"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListResourceGroupServersResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/all_servers"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hostnameContains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostname_contains", r.hostnameContains, "")
	}
	if r.osType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os_type", r.osType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListResourceGroupProjectServersRequest struct {
	ctx             context.Context
	ApiService      *ServersAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiListResourceGroupProjectServersRequest) Execute() (*ListResourceGroupProjectServersResponse, *http.Response, error) {
	return r.ApiService.ListResourceGroupProjectServersExecute(r)
}

/*
ListResourceGroupProjectServers List all servers in a project

	Lists all servers in a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiListResourceGroupProjectServersRequest
*/
func (a *ServersAPIService) ListResourceGroupProjectServers(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiListResourceGroupProjectServersRequest {
	return ApiListResourceGroupProjectServersRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ListResourceGroupProjectServersResponse
func (a *ServersAPIService) ListResourceGroupProjectServersExecute(r ApiListResourceGroupProjectServersRequest) (*ListResourceGroupProjectServersResponse, *http.Response, error) {
	var (
		traceKey            = "serversapi.listResourceGroupProjectServers"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListResourceGroupProjectServersResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/servers"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiResolveResourceRequest struct {
	ctx                         context.Context
	ApiService                  *ServersAPIService
	resolveResourceNamesRequest *ResolveResourceNamesRequest
}

func (r ApiResolveResourceRequest) ResolveResourceNamesRequest(resolveResourceNamesRequest ResolveResourceNamesRequest) ApiResolveResourceRequest {
	r.resolveResourceNamesRequest = &resolveResourceNamesRequest
	return r
}

func (r ApiResolveResourceRequest) Execute() (*ResolveResourceNamesResponse, *http.Response, error) {
	return r.ApiService.ResolveResourceExecute(r)
}

/*
ResolveResource Resolve Resource Names

	Resolves enrolled resource names and returns any associated information and user access methods (UAMs)

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiResolveResourceRequest
*/
func (a *ServersAPIService) ResolveResource(ctx context.Context) ApiResolveResourceRequest {
	return ApiResolveResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResolveResourceNamesResponse
func (a *ServersAPIService) ResolveResourceExecute(r ApiResolveResourceRequest) (*ResolveResourceNamesResponse, *http.Response, error) {
	var (
		traceKey            = "serversapi.resolveResource"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResolveResourceNamesResponse
	)

	localVarPath := "/v1/resolve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resolveResourceNamesRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
