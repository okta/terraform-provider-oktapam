/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the Server type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Server{}

// Server struct for Server
type Server struct {
	// The access address of the Server
	AccessAddress string `json:"access_address"`
	// Alternative names for the Server
	AltNames []string `json:"alt_names"`
	// The bastion host that Clients automatically use when connecting to this host
	Bastion string `json:"bastion"`
	// The name that Clients should use when connecting to this Server. Overrides the name found with hostname.
	CanonicalName string                    `json:"canonical_name"`
	CloudProvider NullableCloudProviderType `json:"cloud_provider,omitempty"`
	// A timestamp indicating when the Server was deleted from the Project
	DeletedAt time.Time `json:"deleted_at"`
	// The hostname of the Server
	Hostname string `json:"hostname"`
	// The UUID of the Server
	Id string `json:"id"`
	// The labels for this Server. Used by the PolicySync feature, see [PolicySync: Attribute-Based Access Control](https://help.okta.com/okta_help.htm?type=asa&id=ext-asa-policysync).
	Labels map[string]string `json:"labels"`
	// A timestamp indicating when the Server was last seen
	LastSeen time.Time `json:"last_seen"`
	// If `true`, the Server is managed by 'sftd'.
	Managed bool `json:"managed"`
	// The OS version of the Server, such as CentOS 6 or Debian 9.13
	Os string `json:"os"`
	// The OS family of the Server. Possible values: `linux` or `windows`.
	OsType string `json:"os_type"`
	// The name of the Project where the Server is enrolled
	ProjectName string `json:"project_name"`
	// A timestamp indicating when the Server was enrolled in the Project
	RegisteredAt time.Time `json:"registered_at"`
	// The service that Clients use to connect to the Server. Possible values: `ssh` or `rdp`.
	Services []string `json:"services"`
	// The version of 'sftd' running on the Server
	SftdVersion string `json:"sftd_version"`
	// The host keys used to authenticate the Server
	SshHostKeys []string `json:"ssh_host_keys"`
	// The state of the Server. Possible values: `ACTIVE` or `INACTIVE`.
	State string `json:"state"`
	// The name of the associated Team
	TeamName        string                 `json:"team_name"`
	InstanceDetails *ServerInstanceDetails `json:"instance_details,omitempty"`
}

// NewServer instantiates a new Server object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServer(accessAddress string, altNames []string, bastion string, canonicalName string, deletedAt time.Time, hostname string, id string, labels map[string]string, lastSeen time.Time, managed bool, os string, osType string, projectName string, registeredAt time.Time, services []string, sftdVersion string, sshHostKeys []string, state string, teamName string) *Server {
	this := Server{}
	this.AccessAddress = accessAddress
	this.AltNames = altNames
	this.Bastion = bastion
	this.CanonicalName = canonicalName
	this.DeletedAt = deletedAt
	this.Hostname = hostname
	this.Id = id
	this.Labels = labels
	this.LastSeen = lastSeen
	this.Managed = managed
	this.Os = os
	this.OsType = osType
	this.ProjectName = projectName
	this.RegisteredAt = registeredAt
	this.Services = services
	this.SftdVersion = sftdVersion
	this.SshHostKeys = sshHostKeys
	this.State = state
	this.TeamName = teamName
	return &this
}

// NewServerWithDefaults instantiates a new Server object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerWithDefaults() *Server {
	this := Server{}
	return &this
}

// GetAccessAddress returns the AccessAddress field value
func (o *Server) GetAccessAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessAddress
}

// GetAccessAddressOk returns a tuple with the AccessAddress field value
// and a boolean to check if the value has been set.
func (o *Server) GetAccessAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessAddress, true
}

// SetAccessAddress sets field value
func (o *Server) SetAccessAddress(v string) *Server {
	o.AccessAddress = v
	return o
}

// GetAltNames returns the AltNames field value
func (o *Server) GetAltNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AltNames
}

// GetAltNamesOk returns a tuple with the AltNames field value
// and a boolean to check if the value has been set.
func (o *Server) GetAltNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AltNames, true
}

// SetAltNames sets field value
func (o *Server) SetAltNames(v []string) *Server {
	o.AltNames = v
	return o
}

// GetBastion returns the Bastion field value
func (o *Server) GetBastion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bastion
}

// GetBastionOk returns a tuple with the Bastion field value
// and a boolean to check if the value has been set.
func (o *Server) GetBastionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bastion, true
}

// SetBastion sets field value
func (o *Server) SetBastion(v string) *Server {
	o.Bastion = v
	return o
}

// GetCanonicalName returns the CanonicalName field value
func (o *Server) GetCanonicalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CanonicalName
}

// GetCanonicalNameOk returns a tuple with the CanonicalName field value
// and a boolean to check if the value has been set.
func (o *Server) GetCanonicalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanonicalName, true
}

// SetCanonicalName sets field value
func (o *Server) SetCanonicalName(v string) *Server {
	o.CanonicalName = v
	return o
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Server) GetCloudProvider() CloudProviderType {
	if o == nil || IsNil(o.CloudProvider.Get()) {
		var ret CloudProviderType
		return ret
	}
	return *o.CloudProvider.Get()
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Server) GetCloudProviderOk() (*CloudProviderType, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudProvider.Get(), o.CloudProvider.IsSet()
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *Server) HasCloudProvider() bool {
	if o != nil && o.CloudProvider.IsSet() {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given NullableCloudProviderType and assigns it to the CloudProvider field.
func (o *Server) SetCloudProvider(v CloudProviderType) *Server {
	o.CloudProvider.Set(&v)
	return o
}

// SetCloudProviderNil sets the value for CloudProvider to be an explicit nil
func (o *Server) SetCloudProviderNil() *Server {
	o.CloudProvider.Set(nil)
	return o
}

// UnsetCloudProvider ensures that no value is present for CloudProvider, not even an explicit nil
func (o *Server) UnsetCloudProvider() *Server {
	o.CloudProvider.Unset()
	return o
}

// GetDeletedAt returns the DeletedAt field value
func (o *Server) GetDeletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value
// and a boolean to check if the value has been set.
func (o *Server) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeletedAt, true
}

// SetDeletedAt sets field value
func (o *Server) SetDeletedAt(v time.Time) *Server {
	o.DeletedAt = v
	return o
}

// GetHostname returns the Hostname field value
func (o *Server) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *Server) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *Server) SetHostname(v string) *Server {
	o.Hostname = v
	return o
}

// GetId returns the Id field value
func (o *Server) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Server) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Server) SetId(v string) *Server {
	o.Id = v
	return o
}

// GetLabels returns the Labels field value
func (o *Server) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *Server) GetLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *Server) SetLabels(v map[string]string) *Server {
	o.Labels = v
	return o
}

// GetLastSeen returns the LastSeen field value
func (o *Server) GetLastSeen() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value
// and a boolean to check if the value has been set.
func (o *Server) GetLastSeenOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeen, true
}

// SetLastSeen sets field value
func (o *Server) SetLastSeen(v time.Time) *Server {
	o.LastSeen = v
	return o
}

// GetManaged returns the Managed field value
func (o *Server) GetManaged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Managed
}

// GetManagedOk returns a tuple with the Managed field value
// and a boolean to check if the value has been set.
func (o *Server) GetManagedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Managed, true
}

// SetManaged sets field value
func (o *Server) SetManaged(v bool) *Server {
	o.Managed = v
	return o
}

// GetOs returns the Os field value
func (o *Server) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *Server) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *Server) SetOs(v string) *Server {
	o.Os = v
	return o
}

// GetOsType returns the OsType field value
func (o *Server) GetOsType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value
// and a boolean to check if the value has been set.
func (o *Server) GetOsTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OsType, true
}

// SetOsType sets field value
func (o *Server) SetOsType(v string) *Server {
	o.OsType = v
	return o
}

// GetProjectName returns the ProjectName field value
func (o *Server) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *Server) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *Server) SetProjectName(v string) *Server {
	o.ProjectName = v
	return o
}

// GetRegisteredAt returns the RegisteredAt field value
func (o *Server) GetRegisteredAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RegisteredAt
}

// GetRegisteredAtOk returns a tuple with the RegisteredAt field value
// and a boolean to check if the value has been set.
func (o *Server) GetRegisteredAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegisteredAt, true
}

// SetRegisteredAt sets field value
func (o *Server) SetRegisteredAt(v time.Time) *Server {
	o.RegisteredAt = v
	return o
}

// GetServices returns the Services field value
func (o *Server) GetServices() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Services
}

// GetServicesOk returns a tuple with the Services field value
// and a boolean to check if the value has been set.
func (o *Server) GetServicesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Services, true
}

// SetServices sets field value
func (o *Server) SetServices(v []string) *Server {
	o.Services = v
	return o
}

// GetSftdVersion returns the SftdVersion field value
func (o *Server) GetSftdVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SftdVersion
}

// GetSftdVersionOk returns a tuple with the SftdVersion field value
// and a boolean to check if the value has been set.
func (o *Server) GetSftdVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SftdVersion, true
}

// SetSftdVersion sets field value
func (o *Server) SetSftdVersion(v string) *Server {
	o.SftdVersion = v
	return o
}

// GetSshHostKeys returns the SshHostKeys field value
func (o *Server) GetSshHostKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SshHostKeys
}

// GetSshHostKeysOk returns a tuple with the SshHostKeys field value
// and a boolean to check if the value has been set.
func (o *Server) GetSshHostKeysOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshHostKeys, true
}

// SetSshHostKeys sets field value
func (o *Server) SetSshHostKeys(v []string) *Server {
	o.SshHostKeys = v
	return o
}

// GetState returns the State field value
func (o *Server) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Server) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Server) SetState(v string) *Server {
	o.State = v
	return o
}

// GetTeamName returns the TeamName field value
func (o *Server) GetTeamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value
// and a boolean to check if the value has been set.
func (o *Server) GetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamName, true
}

// SetTeamName sets field value
func (o *Server) SetTeamName(v string) *Server {
	o.TeamName = v
	return o
}

// GetInstanceDetails returns the InstanceDetails field value if set, zero value otherwise.
func (o *Server) GetInstanceDetails() ServerInstanceDetails {
	if o == nil || IsNil(o.InstanceDetails) {
		var ret ServerInstanceDetails
		return ret
	}
	return *o.InstanceDetails
}

// GetInstanceDetailsOk returns a tuple with the InstanceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetInstanceDetailsOk() (*ServerInstanceDetails, bool) {
	if o == nil || IsNil(o.InstanceDetails) {
		return nil, false
	}
	return o.InstanceDetails, true
}

// HasInstanceDetails returns a boolean if a field has been set.
func (o *Server) HasInstanceDetails() bool {
	if o != nil && !IsNil(o.InstanceDetails) {
		return true
	}

	return false
}

// SetInstanceDetails gets a reference to the given ServerInstanceDetails and assigns it to the InstanceDetails field.
func (o *Server) SetInstanceDetails(v ServerInstanceDetails) *Server {
	o.InstanceDetails = &v
	return o
}

func (o Server) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Server) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_address"] = o.AccessAddress
	toSerialize["alt_names"] = o.AltNames
	toSerialize["bastion"] = o.Bastion
	toSerialize["canonical_name"] = o.CanonicalName
	if o.CloudProvider.IsSet() {
		toSerialize["cloud_provider"] = o.CloudProvider.Get()
	}
	toSerialize["deleted_at"] = o.DeletedAt
	toSerialize["hostname"] = o.Hostname
	toSerialize["id"] = o.Id
	toSerialize["labels"] = o.Labels
	toSerialize["last_seen"] = o.LastSeen
	toSerialize["managed"] = o.Managed
	toSerialize["os"] = o.Os
	toSerialize["os_type"] = o.OsType
	toSerialize["project_name"] = o.ProjectName
	toSerialize["registered_at"] = o.RegisteredAt
	toSerialize["services"] = o.Services
	toSerialize["sftd_version"] = o.SftdVersion
	toSerialize["ssh_host_keys"] = o.SshHostKeys
	toSerialize["state"] = o.State
	toSerialize["team_name"] = o.TeamName
	if !IsNil(o.InstanceDetails) {
		toSerialize["instance_details"] = o.InstanceDetails
	}
	return toSerialize, nil
}

type NullableServer struct {
	value *Server
	isSet bool
}

func (v NullableServer) Get() *Server {
	return v.value
}

func (v *NullableServer) Set(val *Server) {
	v.value = val
	v.isSet = true
}

func (v NullableServer) IsSet() bool {
	return v.isSet
}

func (v *NullableServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServer(val *Server) *NullableServer {
	return &NullableServer{value: val, isSet: true}
}

func (v NullableServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
