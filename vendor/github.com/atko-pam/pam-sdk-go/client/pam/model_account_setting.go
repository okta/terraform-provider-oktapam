/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// AccountSetting A project level account setting that may be enabled for an account
type AccountSetting string

// List of AccountSetting
const (
	AccountSetting_CHECKOUT          AccountSetting = "CHECKOUT"
	AccountSetting_ROTATION_SCHEDULE AccountSetting = "ROTATION_SCHEDULE"
)

// All allowed values of AccountSetting enum
var AllowedAccountSettingEnumValues = []AccountSetting{
	"CHECKOUT",
	"ROTATION_SCHEDULE",
}

func (v *AccountSetting) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountSetting(value)

	*v = enumTypeValue

	return nil
}

// NewAccountSettingFromValue returns a pointer to a valid AccountSetting
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountSettingFromValue(v string) (*AccountSetting, error) {
	ev := AccountSetting(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountSetting) IsValid() bool {
	for _, existing := range AllowedAccountSettingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountSetting value
func (v AccountSetting) Ptr() *AccountSetting {
	return &v
}

type NullableAccountSetting struct {
	value *AccountSetting
	isSet bool
}

func (v NullableAccountSetting) Get() *AccountSetting {
	return v.value
}

func (v *NullableAccountSetting) Set(val *AccountSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSetting(val *AccountSetting) *NullableAccountSetting {
	return &NullableAccountSetting{value: val, isSet: true}
}

func (v NullableAccountSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
