/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the TeamSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamSettings{}

// TeamSettings struct for TeamSettings
type TeamSettings struct {
	// If `true`, devices are automatically approved for authenticated Users
	ApproveDeviceWithoutInteraction NullableBool `json:"approve_device_without_interaction,omitempty"`
	// The maximum time before a Client session expires. The duration can be from 3600 – 90000 seconds.
	ClientSessionDuration NullableInt32 `json:"client_session_duration,omitempty"`
	// If specified, redirects a User to the URL after they enroll a device
	PostDeviceEnrollmentUrl NullableString `json:"post_device_enrollment_url,omitempty"`
	// If specified, redirects a User to the URL after they authenticate through the IdP
	PostLoginUrl NullableString `json:"post_login_url,omitempty"`
	// If specified, redirects a User to the URL after they sign out
	PostLogoutUrl NullableString `json:"post_logout_url,omitempty"`
	// If `true`, previously deleted or disabled Users are reenabled if they authenticate through the IdP
	ReactivateUsersViaIdp NullableBool `json:"reactivate_users_via_idp,omitempty"`
	// The name of the Team
	Team string `json:"team"`
	// If `true`, Users maintain the exact username specified via SCIM
	UserProvisioningExactUsername NullableBool `json:"user_provisioning_exact_username,omitempty"`
	// The maximum time before a web session expires. The duration can be from 1800 – 90000 seconds.
	WebSessionDuration NullableInt32 `json:"web_session_duration,omitempty"`
}

// NewTeamSettings instantiates a new TeamSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamSettings(team string) *TeamSettings {
	this := TeamSettings{}
	this.Team = team
	return &this
}

// NewTeamSettingsWithDefaults instantiates a new TeamSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamSettingsWithDefaults() *TeamSettings {
	this := TeamSettings{}
	return &this
}

// GetApproveDeviceWithoutInteraction returns the ApproveDeviceWithoutInteraction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamSettings) GetApproveDeviceWithoutInteraction() bool {
	if o == nil || IsNil(o.ApproveDeviceWithoutInteraction.Get()) {
		var ret bool
		return ret
	}
	return *o.ApproveDeviceWithoutInteraction.Get()
}

// GetApproveDeviceWithoutInteractionOk returns a tuple with the ApproveDeviceWithoutInteraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamSettings) GetApproveDeviceWithoutInteractionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApproveDeviceWithoutInteraction.Get(), o.ApproveDeviceWithoutInteraction.IsSet()
}

// HasApproveDeviceWithoutInteraction returns a boolean if a field has been set.
func (o *TeamSettings) HasApproveDeviceWithoutInteraction() bool {
	if o != nil && o.ApproveDeviceWithoutInteraction.IsSet() {
		return true
	}

	return false
}

// SetApproveDeviceWithoutInteraction gets a reference to the given NullableBool and assigns it to the ApproveDeviceWithoutInteraction field.
func (o *TeamSettings) SetApproveDeviceWithoutInteraction(v bool) *TeamSettings {
	o.ApproveDeviceWithoutInteraction.Set(&v)
	return o
}

// SetApproveDeviceWithoutInteractionNil sets the value for ApproveDeviceWithoutInteraction to be an explicit nil
func (o *TeamSettings) SetApproveDeviceWithoutInteractionNil() *TeamSettings {
	o.ApproveDeviceWithoutInteraction.Set(nil)
	return o
}

// UnsetApproveDeviceWithoutInteraction ensures that no value is present for ApproveDeviceWithoutInteraction, not even an explicit nil
func (o *TeamSettings) UnsetApproveDeviceWithoutInteraction() *TeamSettings {
	o.ApproveDeviceWithoutInteraction.Unset()
	return o
}

// GetClientSessionDuration returns the ClientSessionDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamSettings) GetClientSessionDuration() int32 {
	if o == nil || IsNil(o.ClientSessionDuration.Get()) {
		var ret int32
		return ret
	}
	return *o.ClientSessionDuration.Get()
}

// GetClientSessionDurationOk returns a tuple with the ClientSessionDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamSettings) GetClientSessionDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientSessionDuration.Get(), o.ClientSessionDuration.IsSet()
}

// HasClientSessionDuration returns a boolean if a field has been set.
func (o *TeamSettings) HasClientSessionDuration() bool {
	if o != nil && o.ClientSessionDuration.IsSet() {
		return true
	}

	return false
}

// SetClientSessionDuration gets a reference to the given NullableInt32 and assigns it to the ClientSessionDuration field.
func (o *TeamSettings) SetClientSessionDuration(v int32) *TeamSettings {
	o.ClientSessionDuration.Set(&v)
	return o
}

// SetClientSessionDurationNil sets the value for ClientSessionDuration to be an explicit nil
func (o *TeamSettings) SetClientSessionDurationNil() *TeamSettings {
	o.ClientSessionDuration.Set(nil)
	return o
}

// UnsetClientSessionDuration ensures that no value is present for ClientSessionDuration, not even an explicit nil
func (o *TeamSettings) UnsetClientSessionDuration() *TeamSettings {
	o.ClientSessionDuration.Unset()
	return o
}

// GetPostDeviceEnrollmentUrl returns the PostDeviceEnrollmentUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamSettings) GetPostDeviceEnrollmentUrl() string {
	if o == nil || IsNil(o.PostDeviceEnrollmentUrl.Get()) {
		var ret string
		return ret
	}
	return *o.PostDeviceEnrollmentUrl.Get()
}

// GetPostDeviceEnrollmentUrlOk returns a tuple with the PostDeviceEnrollmentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamSettings) GetPostDeviceEnrollmentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostDeviceEnrollmentUrl.Get(), o.PostDeviceEnrollmentUrl.IsSet()
}

// HasPostDeviceEnrollmentUrl returns a boolean if a field has been set.
func (o *TeamSettings) HasPostDeviceEnrollmentUrl() bool {
	if o != nil && o.PostDeviceEnrollmentUrl.IsSet() {
		return true
	}

	return false
}

// SetPostDeviceEnrollmentUrl gets a reference to the given NullableString and assigns it to the PostDeviceEnrollmentUrl field.
func (o *TeamSettings) SetPostDeviceEnrollmentUrl(v string) *TeamSettings {
	o.PostDeviceEnrollmentUrl.Set(&v)
	return o
}

// SetPostDeviceEnrollmentUrlNil sets the value for PostDeviceEnrollmentUrl to be an explicit nil
func (o *TeamSettings) SetPostDeviceEnrollmentUrlNil() *TeamSettings {
	o.PostDeviceEnrollmentUrl.Set(nil)
	return o
}

// UnsetPostDeviceEnrollmentUrl ensures that no value is present for PostDeviceEnrollmentUrl, not even an explicit nil
func (o *TeamSettings) UnsetPostDeviceEnrollmentUrl() *TeamSettings {
	o.PostDeviceEnrollmentUrl.Unset()
	return o
}

// GetPostLoginUrl returns the PostLoginUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamSettings) GetPostLoginUrl() string {
	if o == nil || IsNil(o.PostLoginUrl.Get()) {
		var ret string
		return ret
	}
	return *o.PostLoginUrl.Get()
}

// GetPostLoginUrlOk returns a tuple with the PostLoginUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamSettings) GetPostLoginUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostLoginUrl.Get(), o.PostLoginUrl.IsSet()
}

// HasPostLoginUrl returns a boolean if a field has been set.
func (o *TeamSettings) HasPostLoginUrl() bool {
	if o != nil && o.PostLoginUrl.IsSet() {
		return true
	}

	return false
}

// SetPostLoginUrl gets a reference to the given NullableString and assigns it to the PostLoginUrl field.
func (o *TeamSettings) SetPostLoginUrl(v string) *TeamSettings {
	o.PostLoginUrl.Set(&v)
	return o
}

// SetPostLoginUrlNil sets the value for PostLoginUrl to be an explicit nil
func (o *TeamSettings) SetPostLoginUrlNil() *TeamSettings {
	o.PostLoginUrl.Set(nil)
	return o
}

// UnsetPostLoginUrl ensures that no value is present for PostLoginUrl, not even an explicit nil
func (o *TeamSettings) UnsetPostLoginUrl() *TeamSettings {
	o.PostLoginUrl.Unset()
	return o
}

// GetPostLogoutUrl returns the PostLogoutUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamSettings) GetPostLogoutUrl() string {
	if o == nil || IsNil(o.PostLogoutUrl.Get()) {
		var ret string
		return ret
	}
	return *o.PostLogoutUrl.Get()
}

// GetPostLogoutUrlOk returns a tuple with the PostLogoutUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamSettings) GetPostLogoutUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostLogoutUrl.Get(), o.PostLogoutUrl.IsSet()
}

// HasPostLogoutUrl returns a boolean if a field has been set.
func (o *TeamSettings) HasPostLogoutUrl() bool {
	if o != nil && o.PostLogoutUrl.IsSet() {
		return true
	}

	return false
}

// SetPostLogoutUrl gets a reference to the given NullableString and assigns it to the PostLogoutUrl field.
func (o *TeamSettings) SetPostLogoutUrl(v string) *TeamSettings {
	o.PostLogoutUrl.Set(&v)
	return o
}

// SetPostLogoutUrlNil sets the value for PostLogoutUrl to be an explicit nil
func (o *TeamSettings) SetPostLogoutUrlNil() *TeamSettings {
	o.PostLogoutUrl.Set(nil)
	return o
}

// UnsetPostLogoutUrl ensures that no value is present for PostLogoutUrl, not even an explicit nil
func (o *TeamSettings) UnsetPostLogoutUrl() *TeamSettings {
	o.PostLogoutUrl.Unset()
	return o
}

// GetReactivateUsersViaIdp returns the ReactivateUsersViaIdp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamSettings) GetReactivateUsersViaIdp() bool {
	if o == nil || IsNil(o.ReactivateUsersViaIdp.Get()) {
		var ret bool
		return ret
	}
	return *o.ReactivateUsersViaIdp.Get()
}

// GetReactivateUsersViaIdpOk returns a tuple with the ReactivateUsersViaIdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamSettings) GetReactivateUsersViaIdpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReactivateUsersViaIdp.Get(), o.ReactivateUsersViaIdp.IsSet()
}

// HasReactivateUsersViaIdp returns a boolean if a field has been set.
func (o *TeamSettings) HasReactivateUsersViaIdp() bool {
	if o != nil && o.ReactivateUsersViaIdp.IsSet() {
		return true
	}

	return false
}

// SetReactivateUsersViaIdp gets a reference to the given NullableBool and assigns it to the ReactivateUsersViaIdp field.
func (o *TeamSettings) SetReactivateUsersViaIdp(v bool) *TeamSettings {
	o.ReactivateUsersViaIdp.Set(&v)
	return o
}

// SetReactivateUsersViaIdpNil sets the value for ReactivateUsersViaIdp to be an explicit nil
func (o *TeamSettings) SetReactivateUsersViaIdpNil() *TeamSettings {
	o.ReactivateUsersViaIdp.Set(nil)
	return o
}

// UnsetReactivateUsersViaIdp ensures that no value is present for ReactivateUsersViaIdp, not even an explicit nil
func (o *TeamSettings) UnsetReactivateUsersViaIdp() *TeamSettings {
	o.ReactivateUsersViaIdp.Unset()
	return o
}

// GetTeam returns the Team field value
func (o *TeamSettings) GetTeam() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *TeamSettings) GetTeamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *TeamSettings) SetTeam(v string) *TeamSettings {
	o.Team = v
	return o
}

// GetUserProvisioningExactUsername returns the UserProvisioningExactUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamSettings) GetUserProvisioningExactUsername() bool {
	if o == nil || IsNil(o.UserProvisioningExactUsername.Get()) {
		var ret bool
		return ret
	}
	return *o.UserProvisioningExactUsername.Get()
}

// GetUserProvisioningExactUsernameOk returns a tuple with the UserProvisioningExactUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamSettings) GetUserProvisioningExactUsernameOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserProvisioningExactUsername.Get(), o.UserProvisioningExactUsername.IsSet()
}

// HasUserProvisioningExactUsername returns a boolean if a field has been set.
func (o *TeamSettings) HasUserProvisioningExactUsername() bool {
	if o != nil && o.UserProvisioningExactUsername.IsSet() {
		return true
	}

	return false
}

// SetUserProvisioningExactUsername gets a reference to the given NullableBool and assigns it to the UserProvisioningExactUsername field.
func (o *TeamSettings) SetUserProvisioningExactUsername(v bool) *TeamSettings {
	o.UserProvisioningExactUsername.Set(&v)
	return o
}

// SetUserProvisioningExactUsernameNil sets the value for UserProvisioningExactUsername to be an explicit nil
func (o *TeamSettings) SetUserProvisioningExactUsernameNil() *TeamSettings {
	o.UserProvisioningExactUsername.Set(nil)
	return o
}

// UnsetUserProvisioningExactUsername ensures that no value is present for UserProvisioningExactUsername, not even an explicit nil
func (o *TeamSettings) UnsetUserProvisioningExactUsername() *TeamSettings {
	o.UserProvisioningExactUsername.Unset()
	return o
}

// GetWebSessionDuration returns the WebSessionDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamSettings) GetWebSessionDuration() int32 {
	if o == nil || IsNil(o.WebSessionDuration.Get()) {
		var ret int32
		return ret
	}
	return *o.WebSessionDuration.Get()
}

// GetWebSessionDurationOk returns a tuple with the WebSessionDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamSettings) GetWebSessionDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebSessionDuration.Get(), o.WebSessionDuration.IsSet()
}

// HasWebSessionDuration returns a boolean if a field has been set.
func (o *TeamSettings) HasWebSessionDuration() bool {
	if o != nil && o.WebSessionDuration.IsSet() {
		return true
	}

	return false
}

// SetWebSessionDuration gets a reference to the given NullableInt32 and assigns it to the WebSessionDuration field.
func (o *TeamSettings) SetWebSessionDuration(v int32) *TeamSettings {
	o.WebSessionDuration.Set(&v)
	return o
}

// SetWebSessionDurationNil sets the value for WebSessionDuration to be an explicit nil
func (o *TeamSettings) SetWebSessionDurationNil() *TeamSettings {
	o.WebSessionDuration.Set(nil)
	return o
}

// UnsetWebSessionDuration ensures that no value is present for WebSessionDuration, not even an explicit nil
func (o *TeamSettings) UnsetWebSessionDuration() *TeamSettings {
	o.WebSessionDuration.Unset()
	return o
}

func (o TeamSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ApproveDeviceWithoutInteraction.IsSet() {
		toSerialize["approve_device_without_interaction"] = o.ApproveDeviceWithoutInteraction.Get()
	}
	if o.ClientSessionDuration.IsSet() {
		toSerialize["client_session_duration"] = o.ClientSessionDuration.Get()
	}
	if o.PostDeviceEnrollmentUrl.IsSet() {
		toSerialize["post_device_enrollment_url"] = o.PostDeviceEnrollmentUrl.Get()
	}
	if o.PostLoginUrl.IsSet() {
		toSerialize["post_login_url"] = o.PostLoginUrl.Get()
	}
	if o.PostLogoutUrl.IsSet() {
		toSerialize["post_logout_url"] = o.PostLogoutUrl.Get()
	}
	if o.ReactivateUsersViaIdp.IsSet() {
		toSerialize["reactivate_users_via_idp"] = o.ReactivateUsersViaIdp.Get()
	}
	toSerialize["team"] = o.Team
	if o.UserProvisioningExactUsername.IsSet() {
		toSerialize["user_provisioning_exact_username"] = o.UserProvisioningExactUsername.Get()
	}
	if o.WebSessionDuration.IsSet() {
		toSerialize["web_session_duration"] = o.WebSessionDuration.Get()
	}
	return toSerialize, nil
}

type NullableTeamSettings struct {
	value *TeamSettings
	isSet bool
}

func (v NullableTeamSettings) Get() *TeamSettings {
	return v.value
}

func (v *NullableTeamSettings) Set(val *TeamSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamSettings(val *TeamSettings) *NullableTeamSettings {
	return &NullableTeamSettings{value: val, isSet: true}
}

func (v NullableTeamSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
