/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecretFolderCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretFolderCreateRequest{}

// SecretFolderCreateRequest struct for SecretFolderCreateRequest
type SecretFolderCreateRequest struct {
	// The name of the Secret Folder
	Name string `json:"name"`
	// A description of the Secret Folder
	Description NullableString `json:"description,omitempty"`
	// The UUID of Secret Folder's parent folder
	ParentFolderId *string `json:"parent_folder_id,omitempty"`
}

// NewSecretFolderCreateRequest instantiates a new SecretFolderCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretFolderCreateRequest(name string) *SecretFolderCreateRequest {
	this := SecretFolderCreateRequest{}
	this.Name = name
	return &this
}

// NewSecretFolderCreateRequestWithDefaults instantiates a new SecretFolderCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretFolderCreateRequestWithDefaults() *SecretFolderCreateRequest {
	this := SecretFolderCreateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *SecretFolderCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecretFolderCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SecretFolderCreateRequest) SetName(v string) *SecretFolderCreateRequest {
	o.Name = v
	return o
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecretFolderCreateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecretFolderCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *SecretFolderCreateRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *SecretFolderCreateRequest) SetDescription(v string) *SecretFolderCreateRequest {
	o.Description.Set(&v)
	return o
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *SecretFolderCreateRequest) SetDescriptionNil() *SecretFolderCreateRequest {
	o.Description.Set(nil)
	return o
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *SecretFolderCreateRequest) UnsetDescription() *SecretFolderCreateRequest {
	o.Description.Unset()
	return o
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise.
func (o *SecretFolderCreateRequest) GetParentFolderId() string {
	if o == nil || IsNil(o.ParentFolderId) {
		var ret string
		return ret
	}
	return *o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretFolderCreateRequest) GetParentFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderId) {
		return nil, false
	}
	return o.ParentFolderId, true
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *SecretFolderCreateRequest) HasParentFolderId() bool {
	if o != nil && !IsNil(o.ParentFolderId) {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given string and assigns it to the ParentFolderId field.
func (o *SecretFolderCreateRequest) SetParentFolderId(v string) *SecretFolderCreateRequest {
	o.ParentFolderId = &v
	return o
}

func (o SecretFolderCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretFolderCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.ParentFolderId) {
		toSerialize["parent_folder_id"] = o.ParentFolderId
	}
	return toSerialize, nil
}

type NullableSecretFolderCreateRequest struct {
	value *SecretFolderCreateRequest
	isSet bool
}

func (v NullableSecretFolderCreateRequest) Get() *SecretFolderCreateRequest {
	return v.value
}

func (v *NullableSecretFolderCreateRequest) Set(val *SecretFolderCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretFolderCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretFolderCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretFolderCreateRequest(val *SecretFolderCreateRequest) *NullableSecretFolderCreateRequest {
	return &NullableSecretFolderCreateRequest{value: val, isSet: true}
}

func (v NullableSecretFolderCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretFolderCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
