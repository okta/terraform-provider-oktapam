/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer{}

// SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer struct for SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer
type SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer struct {
	SelectorType SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelectorType `json:"selector_type"`
	Selector     SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector     `json:"selector"`
}

// NewSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer instantiates a new SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer(selectorType SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelectorType, selector SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer {
	this := SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer{}
	this.SelectorType = selectorType
	this.Selector = selector
	return &this
}

// NewSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainerWithDefaults instantiates a new SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainerWithDefaults() *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer {
	this := SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer{}
	return &this
}

// GetSelectorType returns the SelectorType field value
func (o *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) GetSelectorType() SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelectorType {
	if o == nil {
		var ret SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelectorType
		return ret
	}

	return o.SelectorType
}

// GetSelectorTypeOk returns a tuple with the SelectorType field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) GetSelectorTypeOk() (*SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelectorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SelectorType, true
}

// SetSelectorType sets field value
func (o *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) SetSelectorType(v SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelectorType) *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer {
	o.SelectorType = v
	return o
}

// GetSelector returns the Selector field value
func (o *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) GetSelector() SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector {
	if o == nil {
		var ret SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector
		return ret
	}

	return o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) GetSelectorOk() (*SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selector, true
}

// SetSelector sets field value
func (o *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) SetSelector(v SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer {
	o.Selector = v
	return o
}

func (o SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["selector_type"] = o.SelectorType
	toSerialize["selector"] = o.Selector
	return toSerialize, nil
}

type NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer struct {
	value *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer
	isSet bool
}

func (v NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) Get() *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer {
	return v.value
}

func (v *NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) Set(val *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer(val *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) *NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer {
	return &NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSelectorContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
