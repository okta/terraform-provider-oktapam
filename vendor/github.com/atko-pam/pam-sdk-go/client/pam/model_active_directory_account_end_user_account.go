/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryAccountEndUserAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAccountEndUserAccount{}

// ActiveDirectoryAccountEndUserAccount Active Directory account details
type ActiveDirectoryAccountEndUserAccount struct {
	Id *string `json:"id,omitempty"`
	// The username of the Active Directory account
	Username            *string                       `json:"username,omitempty"`
	AccountType         *ActiveDirectoryAccountType   `json:"account_type,omitempty"`
	AvailabilityStatus  *ActiveDirectoryAccountStatus `json:"availability_status,omitempty"`
	AccountStatusDetail *ServiceAccountStatusDetail   `json:"account_status_detail,omitempty"`
}

// NewActiveDirectoryAccountEndUserAccount instantiates a new ActiveDirectoryAccountEndUserAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAccountEndUserAccount() *ActiveDirectoryAccountEndUserAccount {
	this := ActiveDirectoryAccountEndUserAccount{}
	return &this
}

// NewActiveDirectoryAccountEndUserAccountWithDefaults instantiates a new ActiveDirectoryAccountEndUserAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAccountEndUserAccountWithDefaults() *ActiveDirectoryAccountEndUserAccount {
	this := ActiveDirectoryAccountEndUserAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountEndUserAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountEndUserAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountEndUserAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActiveDirectoryAccountEndUserAccount) SetId(v string) *ActiveDirectoryAccountEndUserAccount {
	o.Id = &v
	return o
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountEndUserAccount) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountEndUserAccount) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountEndUserAccount) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ActiveDirectoryAccountEndUserAccount) SetUsername(v string) *ActiveDirectoryAccountEndUserAccount {
	o.Username = &v
	return o
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountEndUserAccount) GetAccountType() ActiveDirectoryAccountType {
	if o == nil || IsNil(o.AccountType) {
		var ret ActiveDirectoryAccountType
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountEndUserAccount) GetAccountTypeOk() (*ActiveDirectoryAccountType, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountEndUserAccount) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given ActiveDirectoryAccountType and assigns it to the AccountType field.
func (o *ActiveDirectoryAccountEndUserAccount) SetAccountType(v ActiveDirectoryAccountType) *ActiveDirectoryAccountEndUserAccount {
	o.AccountType = &v
	return o
}

// GetAvailabilityStatus returns the AvailabilityStatus field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountEndUserAccount) GetAvailabilityStatus() ActiveDirectoryAccountStatus {
	if o == nil || IsNil(o.AvailabilityStatus) {
		var ret ActiveDirectoryAccountStatus
		return ret
	}
	return *o.AvailabilityStatus
}

// GetAvailabilityStatusOk returns a tuple with the AvailabilityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountEndUserAccount) GetAvailabilityStatusOk() (*ActiveDirectoryAccountStatus, bool) {
	if o == nil || IsNil(o.AvailabilityStatus) {
		return nil, false
	}
	return o.AvailabilityStatus, true
}

// HasAvailabilityStatus returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountEndUserAccount) HasAvailabilityStatus() bool {
	if o != nil && !IsNil(o.AvailabilityStatus) {
		return true
	}

	return false
}

// SetAvailabilityStatus gets a reference to the given ActiveDirectoryAccountStatus and assigns it to the AvailabilityStatus field.
func (o *ActiveDirectoryAccountEndUserAccount) SetAvailabilityStatus(v ActiveDirectoryAccountStatus) *ActiveDirectoryAccountEndUserAccount {
	o.AvailabilityStatus = &v
	return o
}

// GetAccountStatusDetail returns the AccountStatusDetail field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountEndUserAccount) GetAccountStatusDetail() ServiceAccountStatusDetail {
	if o == nil || IsNil(o.AccountStatusDetail) {
		var ret ServiceAccountStatusDetail
		return ret
	}
	return *o.AccountStatusDetail
}

// GetAccountStatusDetailOk returns a tuple with the AccountStatusDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountEndUserAccount) GetAccountStatusDetailOk() (*ServiceAccountStatusDetail, bool) {
	if o == nil || IsNil(o.AccountStatusDetail) {
		return nil, false
	}
	return o.AccountStatusDetail, true
}

// HasAccountStatusDetail returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountEndUserAccount) HasAccountStatusDetail() bool {
	if o != nil && !IsNil(o.AccountStatusDetail) {
		return true
	}

	return false
}

// SetAccountStatusDetail gets a reference to the given ServiceAccountStatusDetail and assigns it to the AccountStatusDetail field.
func (o *ActiveDirectoryAccountEndUserAccount) SetAccountStatusDetail(v ServiceAccountStatusDetail) *ActiveDirectoryAccountEndUserAccount {
	o.AccountStatusDetail = &v
	return o
}

func (o ActiveDirectoryAccountEndUserAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAccountEndUserAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.AccountType) {
		toSerialize["account_type"] = o.AccountType
	}
	if !IsNil(o.AvailabilityStatus) {
		toSerialize["availability_status"] = o.AvailabilityStatus
	}
	if !IsNil(o.AccountStatusDetail) {
		toSerialize["account_status_detail"] = o.AccountStatusDetail
	}
	return toSerialize, nil
}

type NullableActiveDirectoryAccountEndUserAccount struct {
	value *ActiveDirectoryAccountEndUserAccount
	isSet bool
}

func (v NullableActiveDirectoryAccountEndUserAccount) Get() *ActiveDirectoryAccountEndUserAccount {
	return v.value
}

func (v *NullableActiveDirectoryAccountEndUserAccount) Set(val *ActiveDirectoryAccountEndUserAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountEndUserAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountEndUserAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountEndUserAccount(val *ActiveDirectoryAccountEndUserAccount) *NullableActiveDirectoryAccountEndUserAccount {
	return &NullableActiveDirectoryAccountEndUserAccount{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountEndUserAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountEndUserAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
