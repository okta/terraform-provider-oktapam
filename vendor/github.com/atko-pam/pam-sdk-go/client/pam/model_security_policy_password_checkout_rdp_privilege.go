/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyPasswordCheckoutRDPPrivilege type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyPasswordCheckoutRDPPrivilege{}

// SecurityPolicyPasswordCheckoutRDPPrivilege SecurityPolicyPasswordCheckoutRDPPrivilege indicates that the principal will be allowed to check out passwords for RDPing to servers for accounts specified via a ServerBasedResourceSelector
type SecurityPolicyPasswordCheckoutRDPPrivilege struct {
	SecurityPolicyPrivilege
	PasswordCheckoutRdp bool `json:"password_checkout_rdp"`
}

// NewSecurityPolicyPasswordCheckoutRDPPrivilege instantiates a new SecurityPolicyPasswordCheckoutRDPPrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyPasswordCheckoutRDPPrivilege(passwordCheckoutRdp bool, type_ SecurityPolicyRulePrivilegeType) *SecurityPolicyPasswordCheckoutRDPPrivilege {
	this := SecurityPolicyPasswordCheckoutRDPPrivilege{}
	this.Type = type_
	this.PasswordCheckoutRdp = passwordCheckoutRdp
	return &this
}

// NewSecurityPolicyPasswordCheckoutRDPPrivilegeWithDefaults instantiates a new SecurityPolicyPasswordCheckoutRDPPrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyPasswordCheckoutRDPPrivilegeWithDefaults() *SecurityPolicyPasswordCheckoutRDPPrivilege {
	this := SecurityPolicyPasswordCheckoutRDPPrivilege{}
	return &this
}

// GetPasswordCheckoutRdp returns the PasswordCheckoutRdp field value
func (o *SecurityPolicyPasswordCheckoutRDPPrivilege) GetPasswordCheckoutRdp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PasswordCheckoutRdp
}

// GetPasswordCheckoutRdpOk returns a tuple with the PasswordCheckoutRdp field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyPasswordCheckoutRDPPrivilege) GetPasswordCheckoutRdpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordCheckoutRdp, true
}

// SetPasswordCheckoutRdp sets field value
func (o *SecurityPolicyPasswordCheckoutRDPPrivilege) SetPasswordCheckoutRdp(v bool) *SecurityPolicyPasswordCheckoutRDPPrivilege {
	o.PasswordCheckoutRdp = v
	return o
}

func (o SecurityPolicyPasswordCheckoutRDPPrivilege) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyPasswordCheckoutRDPPrivilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSecurityPolicyPrivilege, errSecurityPolicyPrivilege := json.Marshal(o.SecurityPolicyPrivilege)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	errSecurityPolicyPrivilege = json.Unmarshal([]byte(serializedSecurityPolicyPrivilege), &toSerialize)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	toSerialize["password_checkout_rdp"] = o.PasswordCheckoutRdp
	return toSerialize, nil
}

type NullableSecurityPolicyPasswordCheckoutRDPPrivilege struct {
	value *SecurityPolicyPasswordCheckoutRDPPrivilege
	isSet bool
}

func (v NullableSecurityPolicyPasswordCheckoutRDPPrivilege) Get() *SecurityPolicyPasswordCheckoutRDPPrivilege {
	return v.value
}

func (v *NullableSecurityPolicyPasswordCheckoutRDPPrivilege) Set(val *SecurityPolicyPasswordCheckoutRDPPrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyPasswordCheckoutRDPPrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyPasswordCheckoutRDPPrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyPasswordCheckoutRDPPrivilege(val *SecurityPolicyPasswordCheckoutRDPPrivilege) *NullableSecurityPolicyPasswordCheckoutRDPPrivilege {
	return &NullableSecurityPolicyPasswordCheckoutRDPPrivilege{value: val, isSet: true}
}

func (v NullableSecurityPolicyPasswordCheckoutRDPPrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyPasswordCheckoutRDPPrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
