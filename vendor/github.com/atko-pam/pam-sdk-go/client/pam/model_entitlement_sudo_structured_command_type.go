/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// EntitlementSudoStructuredCommandType Sudo entitlements command type.
type EntitlementSudoStructuredCommandType string

// List of EntitlementSudoStructuredCommandType
const (
	EntitlementSudoStructuredCommandType_DIRECTORY  EntitlementSudoStructuredCommandType = "directory"
	EntitlementSudoStructuredCommandType_EXECUTABLE EntitlementSudoStructuredCommandType = "executable"
	EntitlementSudoStructuredCommandType_RAW        EntitlementSudoStructuredCommandType = "raw"
)

// All allowed values of EntitlementSudoStructuredCommandType enum
var AllowedEntitlementSudoStructuredCommandTypeEnumValues = []EntitlementSudoStructuredCommandType{
	"directory",
	"executable",
	"raw",
}

func (v *EntitlementSudoStructuredCommandType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitlementSudoStructuredCommandType(value)
	for _, existing := range AllowedEntitlementSudoStructuredCommandTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitlementSudoStructuredCommandType", value)
}

// NewEntitlementSudoStructuredCommandTypeFromValue returns a pointer to a valid EntitlementSudoStructuredCommandType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitlementSudoStructuredCommandTypeFromValue(v string) (*EntitlementSudoStructuredCommandType, error) {
	ev := EntitlementSudoStructuredCommandType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitlementSudoStructuredCommandType: valid values are %v", v, AllowedEntitlementSudoStructuredCommandTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitlementSudoStructuredCommandType) IsValid() bool {
	for _, existing := range AllowedEntitlementSudoStructuredCommandTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntitlementSudoStructuredCommandType value
func (v EntitlementSudoStructuredCommandType) Ptr() *EntitlementSudoStructuredCommandType {
	return &v
}

type NullableEntitlementSudoStructuredCommandType struct {
	value *EntitlementSudoStructuredCommandType
	isSet bool
}

func (v NullableEntitlementSudoStructuredCommandType) Get() *EntitlementSudoStructuredCommandType {
	return v.value
}

func (v *NullableEntitlementSudoStructuredCommandType) Set(val *EntitlementSudoStructuredCommandType) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementSudoStructuredCommandType) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementSudoStructuredCommandType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementSudoStructuredCommandType(val *EntitlementSudoStructuredCommandType) *NullableEntitlementSudoStructuredCommandType {
	return &NullableEntitlementSudoStructuredCommandType{value: val, isSet: true}
}

func (v NullableEntitlementSudoStructuredCommandType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementSudoStructuredCommandType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
