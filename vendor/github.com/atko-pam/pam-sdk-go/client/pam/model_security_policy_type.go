/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// SecurityPolicyType The type of the policy. Determines which resource types are allowed in security policy rules. - 'default': Any valid resource type is allowed except 'okta_app_based_resource' - 'okta_service_account': Only 'okta_app_based_resource' resource type is allowed. Only users with Okta Super Admin role can create policies of this type.
type SecurityPolicyType string

// List of SecurityPolicyType
const (
	SecurityPolicyType_DEFAULT              SecurityPolicyType = "default"
	SecurityPolicyType_OKTA_SERVICE_ACCOUNT SecurityPolicyType = "okta_service_account"
)

// All allowed values of SecurityPolicyType enum
var AllowedSecurityPolicyTypeEnumValues = []SecurityPolicyType{
	"default",
	"okta_service_account",
}

func (v *SecurityPolicyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityPolicyType(value)

	*v = enumTypeValue

	return nil
}

// NewSecurityPolicyTypeFromValue returns a pointer to a valid SecurityPolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityPolicyTypeFromValue(v string) (*SecurityPolicyType, error) {
	ev := SecurityPolicyType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityPolicyType) IsValid() bool {
	for _, existing := range AllowedSecurityPolicyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityPolicyType value
func (v SecurityPolicyType) Ptr() *SecurityPolicyType {
	return &v
}

type NullableSecurityPolicyType struct {
	value *SecurityPolicyType
	isSet bool
}

func (v NullableSecurityPolicyType) Get() *SecurityPolicyType {
	return v.value
}

func (v *NullableSecurityPolicyType) Set(val *SecurityPolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyType(val *SecurityPolicyType) *NullableSecurityPolicyType {
	return &NullableSecurityPolicyType{value: val, isSet: true}
}

func (v NullableSecurityPolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
