/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// SSHCertificateType (Optional) The type of signature algorithm used for authentication keys. Default is `CERT_TYPE_ED25519_01`.
type SSHCertificateType string

// List of SSHCertificateType
const (
	SSHCertificateType_ED25519_01      SSHCertificateType = "CERT_TYPE_ED25519_01"
	SSHCertificateType_ECDSA_384_01    SSHCertificateType = "CERT_TYPE_ECDSA_384_01"
	SSHCertificateType_ECDSA_256_01    SSHCertificateType = "CERT_TYPE_ECDSA_256_01"
	SSHCertificateType_ECDSA_521_01    SSHCertificateType = "CERT_TYPE_ECDSA_521_01"
	SSHCertificateType_RSA_01          SSHCertificateType = "CERT_TYPE_RSA_01"
	SSHCertificateType_RSA_SHA2_256_01 SSHCertificateType = "CERT_TYPE_RSA_SHA2_256_01"
	SSHCertificateType_RSA_SHA2_512_01 SSHCertificateType = "CERT_TYPE_RSA_SHA2_512_01"
)

// All allowed values of SSHCertificateType enum
var AllowedSSHCertificateTypeEnumValues = []SSHCertificateType{
	"CERT_TYPE_ED25519_01",
	"CERT_TYPE_ECDSA_384_01",
	"CERT_TYPE_ECDSA_256_01",
	"CERT_TYPE_ECDSA_521_01",
	"CERT_TYPE_RSA_01",
	"CERT_TYPE_RSA_SHA2_256_01",
	"CERT_TYPE_RSA_SHA2_512_01",
}

func (v *SSHCertificateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SSHCertificateType(value)
	for _, existing := range AllowedSSHCertificateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SSHCertificateType", value)
}

// NewSSHCertificateTypeFromValue returns a pointer to a valid SSHCertificateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSSHCertificateTypeFromValue(v string) (*SSHCertificateType, error) {
	ev := SSHCertificateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SSHCertificateType: valid values are %v", v, AllowedSSHCertificateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SSHCertificateType) IsValid() bool {
	for _, existing := range AllowedSSHCertificateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SSHCertificateType value
func (v SSHCertificateType) Ptr() *SSHCertificateType {
	return &v
}

type NullableSSHCertificateType struct {
	value *SSHCertificateType
	isSet bool
}

func (v NullableSSHCertificateType) Get() *SSHCertificateType {
	return v.value
}

func (v *NullableSSHCertificateType) Set(val *SSHCertificateType) {
	v.value = val
	v.isSet = true
}

func (v NullableSSHCertificateType) IsSet() bool {
	return v.isSet
}

func (v *NullableSSHCertificateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSHCertificateType(val *SSHCertificateType) *NullableSSHCertificateType {
	return &NullableSSHCertificateType{value: val, isSet: true}
}

func (v NullableSSHCertificateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSHCertificateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
