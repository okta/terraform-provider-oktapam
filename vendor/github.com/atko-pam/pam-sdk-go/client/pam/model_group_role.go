/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// GroupRole the model 'GroupRole'
type GroupRole string

// List of GroupRole
const (
	GroupRole_PAM_ADMIN                GroupRole = "pam_admin"
	GroupRole_RESOURCE_ADMIN           GroupRole = "resource_admin"
	GroupRole_DELEGATED_RESOURCE_ADMIN GroupRole = "delegated_resource_admin"
	GroupRole_SECURITY_ADMIN           GroupRole = "security_admin"
)

// All allowed values of GroupRole enum
var AllowedGroupRoleEnumValues = []GroupRole{
	"pam_admin",
	"resource_admin",
	"delegated_resource_admin",
	"security_admin",
}

func (v *GroupRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupRole(value)

	*v = enumTypeValue

	return nil
}

// NewGroupRoleFromValue returns a pointer to a valid GroupRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupRoleFromValue(v string) (*GroupRole, error) {
	ev := GroupRole(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupRole) IsValid() bool {
	for _, existing := range AllowedGroupRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupRole value
func (v GroupRole) Ptr() *GroupRole {
	return &v
}

type NullableGroupRole struct {
	value *GroupRole
	isSet bool
}

func (v NullableGroupRole) Get() *GroupRole {
	return v.value
}

func (v *NullableGroupRole) Set(val *GroupRole) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupRole) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupRole(val *GroupRole) *NullableGroupRole {
	return &NullableGroupRole{value: val, isSet: true}
}

func (v NullableGroupRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
