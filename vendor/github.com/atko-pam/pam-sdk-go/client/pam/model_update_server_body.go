/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the UpdateServerBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateServerBody{}

// UpdateServerBody struct for UpdateServerBody
type UpdateServerBody struct {
	// A map of key value pairs. These labels overwrite all labels previously supplied through the API for this server. You can only update labels from other sources using that source. If you don't supply the prefix 'api.', it is automatically prepended.
	Labels map[string]string `json:"labels,omitempty"`
}

// NewUpdateServerBody instantiates a new UpdateServerBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateServerBody() *UpdateServerBody {
	this := UpdateServerBody{}
	return &this
}

// NewUpdateServerBodyWithDefaults instantiates a new UpdateServerBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServerBodyWithDefaults() *UpdateServerBody {
	this := UpdateServerBody{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateServerBody) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateServerBody) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *UpdateServerBody) HasLabels() bool {
	if o != nil && IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *UpdateServerBody) SetLabels(v map[string]string) *UpdateServerBody {
	o.Labels = v
	return o
}

func (o UpdateServerBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateServerBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableUpdateServerBody struct {
	value *UpdateServerBody
	isSet bool
}

func (v NullableUpdateServerBody) Get() *UpdateServerBody {
	return v.value
}

func (v *NullableUpdateServerBody) Set(val *UpdateServerBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateServerBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateServerBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateServerBody(val *UpdateServerBody) *NullableUpdateServerBody {
	return &NullableUpdateServerBody{value: val, isSet: true}
}

func (v NullableUpdateServerBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateServerBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
