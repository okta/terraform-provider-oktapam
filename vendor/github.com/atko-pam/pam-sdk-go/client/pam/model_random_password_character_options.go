/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the RandomPasswordCharacterOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RandomPasswordCharacterOptions{}

// RandomPasswordCharacterOptions struct for RandomPasswordCharacterOptions
type RandomPasswordCharacterOptions struct {
	// If `true`, passwords include one or more uppercase letters
	UpperCase *bool `json:"upper_case,omitempty"`
	// If `true`, passwords include one or more lowercase letters
	LowerCase *bool `json:"lower_case,omitempty"`
	// If `true`, passwords include one or more numbers
	Digits *bool `json:"digits,omitempty"`
	// If `true`, passwords include one or more symbols
	SpecialCharacters *bool `json:"special_characters,omitempty"`
}

// NewRandomPasswordCharacterOptions instantiates a new RandomPasswordCharacterOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandomPasswordCharacterOptions() *RandomPasswordCharacterOptions {
	this := RandomPasswordCharacterOptions{}
	return &this
}

// NewRandomPasswordCharacterOptionsWithDefaults instantiates a new RandomPasswordCharacterOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandomPasswordCharacterOptionsWithDefaults() *RandomPasswordCharacterOptions {
	this := RandomPasswordCharacterOptions{}
	return &this
}

// GetUpperCase returns the UpperCase field value if set, zero value otherwise.
func (o *RandomPasswordCharacterOptions) GetUpperCase() bool {
	if o == nil || IsNil(o.UpperCase) {
		var ret bool
		return ret
	}
	return *o.UpperCase
}

// GetUpperCaseOk returns a tuple with the UpperCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomPasswordCharacterOptions) GetUpperCaseOk() (*bool, bool) {
	if o == nil || IsNil(o.UpperCase) {
		return nil, false
	}
	return o.UpperCase, true
}

// HasUpperCase returns a boolean if a field has been set.
func (o *RandomPasswordCharacterOptions) HasUpperCase() bool {
	if o != nil && !IsNil(o.UpperCase) {
		return true
	}

	return false
}

// SetUpperCase gets a reference to the given bool and assigns it to the UpperCase field.
func (o *RandomPasswordCharacterOptions) SetUpperCase(v bool) *RandomPasswordCharacterOptions {
	o.UpperCase = &v
	return o
}

// GetLowerCase returns the LowerCase field value if set, zero value otherwise.
func (o *RandomPasswordCharacterOptions) GetLowerCase() bool {
	if o == nil || IsNil(o.LowerCase) {
		var ret bool
		return ret
	}
	return *o.LowerCase
}

// GetLowerCaseOk returns a tuple with the LowerCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomPasswordCharacterOptions) GetLowerCaseOk() (*bool, bool) {
	if o == nil || IsNil(o.LowerCase) {
		return nil, false
	}
	return o.LowerCase, true
}

// HasLowerCase returns a boolean if a field has been set.
func (o *RandomPasswordCharacterOptions) HasLowerCase() bool {
	if o != nil && !IsNil(o.LowerCase) {
		return true
	}

	return false
}

// SetLowerCase gets a reference to the given bool and assigns it to the LowerCase field.
func (o *RandomPasswordCharacterOptions) SetLowerCase(v bool) *RandomPasswordCharacterOptions {
	o.LowerCase = &v
	return o
}

// GetDigits returns the Digits field value if set, zero value otherwise.
func (o *RandomPasswordCharacterOptions) GetDigits() bool {
	if o == nil || IsNil(o.Digits) {
		var ret bool
		return ret
	}
	return *o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomPasswordCharacterOptions) GetDigitsOk() (*bool, bool) {
	if o == nil || IsNil(o.Digits) {
		return nil, false
	}
	return o.Digits, true
}

// HasDigits returns a boolean if a field has been set.
func (o *RandomPasswordCharacterOptions) HasDigits() bool {
	if o != nil && !IsNil(o.Digits) {
		return true
	}

	return false
}

// SetDigits gets a reference to the given bool and assigns it to the Digits field.
func (o *RandomPasswordCharacterOptions) SetDigits(v bool) *RandomPasswordCharacterOptions {
	o.Digits = &v
	return o
}

// GetSpecialCharacters returns the SpecialCharacters field value if set, zero value otherwise.
func (o *RandomPasswordCharacterOptions) GetSpecialCharacters() bool {
	if o == nil || IsNil(o.SpecialCharacters) {
		var ret bool
		return ret
	}
	return *o.SpecialCharacters
}

// GetSpecialCharactersOk returns a tuple with the SpecialCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomPasswordCharacterOptions) GetSpecialCharactersOk() (*bool, bool) {
	if o == nil || IsNil(o.SpecialCharacters) {
		return nil, false
	}
	return o.SpecialCharacters, true
}

// HasSpecialCharacters returns a boolean if a field has been set.
func (o *RandomPasswordCharacterOptions) HasSpecialCharacters() bool {
	if o != nil && !IsNil(o.SpecialCharacters) {
		return true
	}

	return false
}

// SetSpecialCharacters gets a reference to the given bool and assigns it to the SpecialCharacters field.
func (o *RandomPasswordCharacterOptions) SetSpecialCharacters(v bool) *RandomPasswordCharacterOptions {
	o.SpecialCharacters = &v
	return o
}

func (o RandomPasswordCharacterOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RandomPasswordCharacterOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpperCase) {
		toSerialize["upper_case"] = o.UpperCase
	}
	if !IsNil(o.LowerCase) {
		toSerialize["lower_case"] = o.LowerCase
	}
	if !IsNil(o.Digits) {
		toSerialize["digits"] = o.Digits
	}
	if !IsNil(o.SpecialCharacters) {
		toSerialize["special_characters"] = o.SpecialCharacters
	}
	return toSerialize, nil
}

type NullableRandomPasswordCharacterOptions struct {
	value *RandomPasswordCharacterOptions
	isSet bool
}

func (v NullableRandomPasswordCharacterOptions) Get() *RandomPasswordCharacterOptions {
	return v.value
}

func (v *NullableRandomPasswordCharacterOptions) Set(val *RandomPasswordCharacterOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRandomPasswordCharacterOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRandomPasswordCharacterOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandomPasswordCharacterOptions(val *RandomPasswordCharacterOptions) *NullableRandomPasswordCharacterOptions {
	return &NullableRandomPasswordCharacterOptions{value: val, isSet: true}
}

func (v NullableRandomPasswordCharacterOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandomPasswordCharacterOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
