/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryPartialMatchingCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryPartialMatchingCondition{}

// ActiveDirectoryPartialMatchingCondition Partial matching condition
type ActiveDirectoryPartialMatchingCondition struct {
	Operator *ActiveDirectoryPartialMatchingOperator `json:"operator,omitempty"`
	// String value for the partial matching condition
	MatchValue *string `json:"match_value,omitempty"`
}

// NewActiveDirectoryPartialMatchingCondition instantiates a new ActiveDirectoryPartialMatchingCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryPartialMatchingCondition() *ActiveDirectoryPartialMatchingCondition {
	this := ActiveDirectoryPartialMatchingCondition{}
	return &this
}

// NewActiveDirectoryPartialMatchingConditionWithDefaults instantiates a new ActiveDirectoryPartialMatchingCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryPartialMatchingConditionWithDefaults() *ActiveDirectoryPartialMatchingCondition {
	this := ActiveDirectoryPartialMatchingCondition{}
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *ActiveDirectoryPartialMatchingCondition) GetOperator() ActiveDirectoryPartialMatchingOperator {
	if o == nil || IsNil(o.Operator) {
		var ret ActiveDirectoryPartialMatchingOperator
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPartialMatchingCondition) GetOperatorOk() (*ActiveDirectoryPartialMatchingOperator, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *ActiveDirectoryPartialMatchingCondition) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given ActiveDirectoryPartialMatchingOperator and assigns it to the Operator field.
func (o *ActiveDirectoryPartialMatchingCondition) SetOperator(v ActiveDirectoryPartialMatchingOperator) *ActiveDirectoryPartialMatchingCondition {
	o.Operator = &v
	return o
}

// GetMatchValue returns the MatchValue field value if set, zero value otherwise.
func (o *ActiveDirectoryPartialMatchingCondition) GetMatchValue() string {
	if o == nil || IsNil(o.MatchValue) {
		var ret string
		return ret
	}
	return *o.MatchValue
}

// GetMatchValueOk returns a tuple with the MatchValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPartialMatchingCondition) GetMatchValueOk() (*string, bool) {
	if o == nil || IsNil(o.MatchValue) {
		return nil, false
	}
	return o.MatchValue, true
}

// HasMatchValue returns a boolean if a field has been set.
func (o *ActiveDirectoryPartialMatchingCondition) HasMatchValue() bool {
	if o != nil && !IsNil(o.MatchValue) {
		return true
	}

	return false
}

// SetMatchValue gets a reference to the given string and assigns it to the MatchValue field.
func (o *ActiveDirectoryPartialMatchingCondition) SetMatchValue(v string) *ActiveDirectoryPartialMatchingCondition {
	o.MatchValue = &v
	return o
}

func (o ActiveDirectoryPartialMatchingCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryPartialMatchingCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.MatchValue) {
		toSerialize["match_value"] = o.MatchValue
	}
	return toSerialize, nil
}

type NullableActiveDirectoryPartialMatchingCondition struct {
	value *ActiveDirectoryPartialMatchingCondition
	isSet bool
}

func (v NullableActiveDirectoryPartialMatchingCondition) Get() *ActiveDirectoryPartialMatchingCondition {
	return v.value
}

func (v *NullableActiveDirectoryPartialMatchingCondition) Set(val *ActiveDirectoryPartialMatchingCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryPartialMatchingCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryPartialMatchingCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryPartialMatchingCondition(val *ActiveDirectoryPartialMatchingCondition) *NullableActiveDirectoryPartialMatchingCondition {
	return &NullableActiveDirectoryPartialMatchingCondition{value: val, isSet: true}
}

func (v NullableActiveDirectoryPartialMatchingCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryPartialMatchingCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
