/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// GroupCreateRole the model 'GroupCreateRole'
type GroupCreateRole string

// List of GroupCreateRole
const (
	GroupCreateRole_PAM_ADMIN      GroupCreateRole = "pam_admin"
	GroupCreateRole_RESOURCE_ADMIN GroupCreateRole = "resource_admin"
	GroupCreateRole_SECURITY_ADMIN GroupCreateRole = "security_admin"
)

// All allowed values of GroupCreateRole enum
var AllowedGroupCreateRoleEnumValues = []GroupCreateRole{
	"pam_admin",
	"resource_admin",
	"security_admin",
}

func (v *GroupCreateRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupCreateRole(value)
	for _, existing := range AllowedGroupCreateRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupCreateRole", value)
}

// NewGroupCreateRoleFromValue returns a pointer to a valid GroupCreateRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupCreateRoleFromValue(v string) (*GroupCreateRole, error) {
	ev := GroupCreateRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupCreateRole: valid values are %v", v, AllowedGroupCreateRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupCreateRole) IsValid() bool {
	for _, existing := range AllowedGroupCreateRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupCreateRole value
func (v GroupCreateRole) Ptr() *GroupCreateRole {
	return &v
}

type NullableGroupCreateRole struct {
	value *GroupCreateRole
	isSet bool
}

func (v NullableGroupCreateRole) Get() *GroupCreateRole {
	return v.value
}

func (v *NullableGroupCreateRole) Set(val *GroupCreateRole) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupCreateRole) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupCreateRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupCreateRole(val *GroupCreateRole) *NullableGroupCreateRole {
	return &NullableGroupCreateRole{value: val, isSet: true}
}

func (v NullableGroupCreateRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupCreateRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
