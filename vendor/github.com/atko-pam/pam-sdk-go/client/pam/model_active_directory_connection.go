/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryConnection{}

// ActiveDirectoryConnection struct for ActiveDirectoryConnection
type ActiveDirectoryConnection struct {
	Id string `json:"id"`
	// The name of the Active Directory connection
	Name string `json:"name"`
	// The name of the domain
	Domain string `json:"domain"`
	// The instance ID of the Active Directory app in your Okta org. This is a unique identifier assigned to each app in your Okta org.
	AppInstanceId string             `json:"app_instance_id"`
	Status        ADConnectionStatus `json:"status"`
}

// NewActiveDirectoryConnection instantiates a new ActiveDirectoryConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryConnection(id string, name string, domain string, appInstanceId string, status ADConnectionStatus) *ActiveDirectoryConnection {
	this := ActiveDirectoryConnection{}
	this.Id = id
	this.Name = name
	this.Domain = domain
	this.AppInstanceId = appInstanceId
	this.Status = status
	return &this
}

// NewActiveDirectoryConnectionWithDefaults instantiates a new ActiveDirectoryConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryConnectionWithDefaults() *ActiveDirectoryConnection {
	this := ActiveDirectoryConnection{}
	return &this
}

// GetId returns the Id field value
func (o *ActiveDirectoryConnection) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnection) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActiveDirectoryConnection) SetId(v string) *ActiveDirectoryConnection {
	o.Id = v
	return o
}

// GetName returns the Name field value
func (o *ActiveDirectoryConnection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ActiveDirectoryConnection) SetName(v string) *ActiveDirectoryConnection {
	o.Name = v
	return o
}

// GetDomain returns the Domain field value
func (o *ActiveDirectoryConnection) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnection) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ActiveDirectoryConnection) SetDomain(v string) *ActiveDirectoryConnection {
	o.Domain = v
	return o
}

// GetAppInstanceId returns the AppInstanceId field value
func (o *ActiveDirectoryConnection) GetAppInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppInstanceId
}

// GetAppInstanceIdOk returns a tuple with the AppInstanceId field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnection) GetAppInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppInstanceId, true
}

// SetAppInstanceId sets field value
func (o *ActiveDirectoryConnection) SetAppInstanceId(v string) *ActiveDirectoryConnection {
	o.AppInstanceId = v
	return o
}

// GetStatus returns the Status field value
func (o *ActiveDirectoryConnection) GetStatus() ADConnectionStatus {
	if o == nil {
		var ret ADConnectionStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnection) GetStatusOk() (*ADConnectionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ActiveDirectoryConnection) SetStatus(v ADConnectionStatus) *ActiveDirectoryConnection {
	o.Status = v
	return o
}

func (o ActiveDirectoryConnection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["domain"] = o.Domain
	toSerialize["app_instance_id"] = o.AppInstanceId
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullableActiveDirectoryConnection struct {
	value *ActiveDirectoryConnection
	isSet bool
}

func (v NullableActiveDirectoryConnection) Get() *ActiveDirectoryConnection {
	return v.value
}

func (v *NullableActiveDirectoryConnection) Set(val *ActiveDirectoryConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryConnection(val *ActiveDirectoryConnection) *NullableActiveDirectoryConnection {
	return &NullableActiveDirectoryConnection{value: val, isSet: true}
}

func (v NullableActiveDirectoryConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
