/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ServiceAccountSettingNameObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceAccountSettingNameObject{}

// ServiceAccountSettingNameObject struct for ServiceAccountSettingNameObject
type ServiceAccountSettingNameObject struct {
	// The unique identifier of the service account setting
	Id string `json:"id"`
	// The username of the service account
	ServiceAccountUserName *string `json:"service_account_user_name,omitempty"`
	// The name of the SaaS application instance
	SaasAppInstanceName *string `json:"saas_app_instance_name,omitempty"`
}

// NewServiceAccountSettingNameObject instantiates a new ServiceAccountSettingNameObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceAccountSettingNameObject(id string) *ServiceAccountSettingNameObject {
	this := ServiceAccountSettingNameObject{}
	this.Id = id
	return &this
}

// NewServiceAccountSettingNameObjectWithDefaults instantiates a new ServiceAccountSettingNameObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceAccountSettingNameObjectWithDefaults() *ServiceAccountSettingNameObject {
	this := ServiceAccountSettingNameObject{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceAccountSettingNameObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceAccountSettingNameObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceAccountSettingNameObject) SetId(v string) *ServiceAccountSettingNameObject {
	o.Id = v
	return o
}

// GetServiceAccountUserName returns the ServiceAccountUserName field value if set, zero value otherwise.
func (o *ServiceAccountSettingNameObject) GetServiceAccountUserName() string {
	if o == nil || IsNil(o.ServiceAccountUserName) {
		var ret string
		return ret
	}
	return *o.ServiceAccountUserName
}

// GetServiceAccountUserNameOk returns a tuple with the ServiceAccountUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAccountSettingNameObject) GetServiceAccountUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAccountUserName) {
		return nil, false
	}
	return o.ServiceAccountUserName, true
}

// HasServiceAccountUserName returns a boolean if a field has been set.
func (o *ServiceAccountSettingNameObject) HasServiceAccountUserName() bool {
	if o != nil && !IsNil(o.ServiceAccountUserName) {
		return true
	}

	return false
}

// SetServiceAccountUserName gets a reference to the given string and assigns it to the ServiceAccountUserName field.
func (o *ServiceAccountSettingNameObject) SetServiceAccountUserName(v string) *ServiceAccountSettingNameObject {
	o.ServiceAccountUserName = &v
	return o
}

// GetSaasAppInstanceName returns the SaasAppInstanceName field value if set, zero value otherwise.
func (o *ServiceAccountSettingNameObject) GetSaasAppInstanceName() string {
	if o == nil || IsNil(o.SaasAppInstanceName) {
		var ret string
		return ret
	}
	return *o.SaasAppInstanceName
}

// GetSaasAppInstanceNameOk returns a tuple with the SaasAppInstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAccountSettingNameObject) GetSaasAppInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SaasAppInstanceName) {
		return nil, false
	}
	return o.SaasAppInstanceName, true
}

// HasSaasAppInstanceName returns a boolean if a field has been set.
func (o *ServiceAccountSettingNameObject) HasSaasAppInstanceName() bool {
	if o != nil && !IsNil(o.SaasAppInstanceName) {
		return true
	}

	return false
}

// SetSaasAppInstanceName gets a reference to the given string and assigns it to the SaasAppInstanceName field.
func (o *ServiceAccountSettingNameObject) SetSaasAppInstanceName(v string) *ServiceAccountSettingNameObject {
	o.SaasAppInstanceName = &v
	return o
}

func (o ServiceAccountSettingNameObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceAccountSettingNameObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ServiceAccountUserName) {
		toSerialize["service_account_user_name"] = o.ServiceAccountUserName
	}
	if !IsNil(o.SaasAppInstanceName) {
		toSerialize["saas_app_instance_name"] = o.SaasAppInstanceName
	}
	return toSerialize, nil
}

type NullableServiceAccountSettingNameObject struct {
	value *ServiceAccountSettingNameObject
	isSet bool
}

func (v NullableServiceAccountSettingNameObject) Get() *ServiceAccountSettingNameObject {
	return v.value
}

func (v *NullableServiceAccountSettingNameObject) Set(val *ServiceAccountSettingNameObject) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAccountSettingNameObject) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAccountSettingNameObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAccountSettingNameObject(val *ServiceAccountSettingNameObject) *NullableServiceAccountSettingNameObject {
	return &NullableServiceAccountSettingNameObject{value: val, isSet: true}
}

func (v NullableServiceAccountSettingNameObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAccountSettingNameObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
