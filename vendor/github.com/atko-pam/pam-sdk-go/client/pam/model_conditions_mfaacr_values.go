/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// ConditionsMFAACRValues Defines the authentication context class reference (ACR) for this policy. See [Step-up authentication using ACR values](https://developer.okta.com/docs/guides/step-up-authentication/main/).
type ConditionsMFAACRValues string

// List of ConditionsMFAACRValues
const (
	ConditionsMFAACRValues_URNOKTALOA2FAANY ConditionsMFAACRValues = "urn:okta:loa:2fa:any"
	ConditionsMFAACRValues_PHR              ConditionsMFAACRValues = "phr"
)

// All allowed values of ConditionsMFAACRValues enum
var AllowedConditionsMFAACRValuesEnumValues = []ConditionsMFAACRValues{
	"urn:okta:loa:2fa:any",
	"phr",
}

func (v *ConditionsMFAACRValues) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConditionsMFAACRValues(value)

	*v = enumTypeValue

	return nil
}

// NewConditionsMFAACRValuesFromValue returns a pointer to a valid ConditionsMFAACRValues
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConditionsMFAACRValuesFromValue(v string) (*ConditionsMFAACRValues, error) {
	ev := ConditionsMFAACRValues(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConditionsMFAACRValues) IsValid() bool {
	for _, existing := range AllowedConditionsMFAACRValuesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConditionsMFAACRValues value
func (v ConditionsMFAACRValues) Ptr() *ConditionsMFAACRValues {
	return &v
}

type NullableConditionsMFAACRValues struct {
	value *ConditionsMFAACRValues
	isSet bool
}

func (v NullableConditionsMFAACRValues) Get() *ConditionsMFAACRValues {
	return v.value
}

func (v *NullableConditionsMFAACRValues) Set(val *ConditionsMFAACRValues) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionsMFAACRValues) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionsMFAACRValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionsMFAACRValues(val *ConditionsMFAACRValues) *NullableConditionsMFAACRValues {
	return &NullableConditionsMFAACRValues{value: val, isSet: true}
}

func (v NullableConditionsMFAACRValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionsMFAACRValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
