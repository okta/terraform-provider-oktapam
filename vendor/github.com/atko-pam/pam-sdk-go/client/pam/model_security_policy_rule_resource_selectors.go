/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRuleResourceSelectors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRuleResourceSelectors{}

// SecurityPolicyRuleResourceSelectors The selector that defines resources targeted by this Security policy.
type SecurityPolicyRuleResourceSelectors struct {
	Selectors []SecurityPolicyRuleResourceSelectorContainer `json:"selectors,omitempty"`
}

// NewSecurityPolicyRuleResourceSelectors instantiates a new SecurityPolicyRuleResourceSelectors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRuleResourceSelectors() *SecurityPolicyRuleResourceSelectors {
	this := SecurityPolicyRuleResourceSelectors{}
	return &this
}

// NewSecurityPolicyRuleResourceSelectorsWithDefaults instantiates a new SecurityPolicyRuleResourceSelectors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRuleResourceSelectorsWithDefaults() *SecurityPolicyRuleResourceSelectors {
	this := SecurityPolicyRuleResourceSelectors{}
	return &this
}

// GetSelectors returns the Selectors field value if set, zero value otherwise.
func (o *SecurityPolicyRuleResourceSelectors) GetSelectors() []SecurityPolicyRuleResourceSelectorContainer {
	if o == nil || IsNil(o.Selectors) {
		var ret []SecurityPolicyRuleResourceSelectorContainer
		return ret
	}
	return o.Selectors
}

// GetSelectorsOk returns a tuple with the Selectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleResourceSelectors) GetSelectorsOk() ([]SecurityPolicyRuleResourceSelectorContainer, bool) {
	if o == nil || IsNil(o.Selectors) {
		return nil, false
	}
	return o.Selectors, true
}

// HasSelectors returns a boolean if a field has been set.
func (o *SecurityPolicyRuleResourceSelectors) HasSelectors() bool {
	if o != nil && !IsNil(o.Selectors) {
		return true
	}

	return false
}

// SetSelectors gets a reference to the given []SecurityPolicyRuleResourceSelectorContainer and assigns it to the Selectors field.
func (o *SecurityPolicyRuleResourceSelectors) SetSelectors(v []SecurityPolicyRuleResourceSelectorContainer) *SecurityPolicyRuleResourceSelectors {
	o.Selectors = v
	return o
}

func (o SecurityPolicyRuleResourceSelectors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRuleResourceSelectors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selectors) {
		toSerialize["selectors"] = o.Selectors
	}
	return toSerialize, nil
}

type NullableSecurityPolicyRuleResourceSelectors struct {
	value *SecurityPolicyRuleResourceSelectors
	isSet bool
}

func (v NullableSecurityPolicyRuleResourceSelectors) Get() *SecurityPolicyRuleResourceSelectors {
	return v.value
}

func (v *NullableSecurityPolicyRuleResourceSelectors) Set(val *SecurityPolicyRuleResourceSelectors) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleResourceSelectors) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleResourceSelectors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleResourceSelectors(val *SecurityPolicyRuleResourceSelectors) *NullableSecurityPolicyRuleResourceSelectors {
	return &NullableSecurityPolicyRuleResourceSelectors{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleResourceSelectors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleResourceSelectors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
