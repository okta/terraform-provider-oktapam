/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// ServiceAccountStatus Describes the current status of a service account
type ServiceAccountStatus string

// List of ServiceAccountStatus
const (
	ServiceAccountStatus_NO_ISSUES ServiceAccountStatus = "NO_ISSUES"
	ServiceAccountStatus_UNSECURED ServiceAccountStatus = "UNSECURED"
	ServiceAccountStatus_INFO      ServiceAccountStatus = "INFO"
	ServiceAccountStatus_ALERT     ServiceAccountStatus = "ALERT"
	ServiceAccountStatus_ERROR     ServiceAccountStatus = "ERROR"
)

// All allowed values of ServiceAccountStatus enum
var AllowedServiceAccountStatusEnumValues = []ServiceAccountStatus{
	"NO_ISSUES",
	"UNSECURED",
	"INFO",
	"ALERT",
	"ERROR",
}

func (v *ServiceAccountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceAccountStatus(value)

	*v = enumTypeValue

	return nil
}

// NewServiceAccountStatusFromValue returns a pointer to a valid ServiceAccountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceAccountStatusFromValue(v string) (*ServiceAccountStatus, error) {
	ev := ServiceAccountStatus(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceAccountStatus) IsValid() bool {
	for _, existing := range AllowedServiceAccountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceAccountStatus value
func (v ServiceAccountStatus) Ptr() *ServiceAccountStatus {
	return &v
}

type NullableServiceAccountStatus struct {
	value *ServiceAccountStatus
	isSet bool
}

func (v NullableServiceAccountStatus) Get() *ServiceAccountStatus {
	return v.value
}

func (v *NullableServiceAccountStatus) Set(val *ServiceAccountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAccountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAccountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAccountStatus(val *ServiceAccountStatus) *NullableServiceAccountStatus {
	return &NullableServiceAccountStatus{value: val, isSet: true}
}

func (v NullableServiceAccountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAccountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
