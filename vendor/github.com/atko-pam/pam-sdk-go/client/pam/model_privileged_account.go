/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the PrivilegedAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivilegedAccount{}

// PrivilegedAccount struct for PrivilegedAccount
type PrivilegedAccount struct {
	// The UUID of the Privileged Account
	Id *string `json:"id,omitempty"`
	// The status of the Privileged Account
	Status *string `json:"status,omitempty"`
	// The human-readable name for the Privileged Account
	Name string `json:"name"`
	// The description of the Privileged Account
	Description string                `json:"description"`
	AccountType PrivilegedAccountType `json:"account_type"`
	// A list of IDs for the Okta users who own the Privileged Account
	OwnerUserIds []string `json:"owner_user_ids"`
	// A list of IDs for the Okta groups who own the Privileged Account
	OwnerGroupIds []string `json:"owner_group_ids"`
}

// NewPrivilegedAccount instantiates a new PrivilegedAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegedAccount(name string, description string, accountType PrivilegedAccountType, ownerUserIds []string, ownerGroupIds []string) *PrivilegedAccount {
	this := PrivilegedAccount{}
	this.Name = name
	this.Description = description
	this.AccountType = accountType
	this.OwnerUserIds = ownerUserIds
	this.OwnerGroupIds = ownerGroupIds
	return &this
}

// NewPrivilegedAccountWithDefaults instantiates a new PrivilegedAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegedAccountWithDefaults() *PrivilegedAccount {
	this := PrivilegedAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PrivilegedAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegedAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PrivilegedAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PrivilegedAccount) SetId(v string) *PrivilegedAccount {
	o.Id = &v
	return o
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PrivilegedAccount) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegedAccount) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PrivilegedAccount) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PrivilegedAccount) SetStatus(v string) *PrivilegedAccount {
	o.Status = &v
	return o
}

// GetName returns the Name field value
func (o *PrivilegedAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PrivilegedAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PrivilegedAccount) SetName(v string) *PrivilegedAccount {
	o.Name = v
	return o
}

// GetDescription returns the Description field value
func (o *PrivilegedAccount) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PrivilegedAccount) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PrivilegedAccount) SetDescription(v string) *PrivilegedAccount {
	o.Description = v
	return o
}

// GetAccountType returns the AccountType field value
func (o *PrivilegedAccount) GetAccountType() PrivilegedAccountType {
	if o == nil {
		var ret PrivilegedAccountType
		return ret
	}

	return o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value
// and a boolean to check if the value has been set.
func (o *PrivilegedAccount) GetAccountTypeOk() (*PrivilegedAccountType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountType, true
}

// SetAccountType sets field value
func (o *PrivilegedAccount) SetAccountType(v PrivilegedAccountType) *PrivilegedAccount {
	o.AccountType = v
	return o
}

// GetOwnerUserIds returns the OwnerUserIds field value
func (o *PrivilegedAccount) GetOwnerUserIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OwnerUserIds
}

// GetOwnerUserIdsOk returns a tuple with the OwnerUserIds field value
// and a boolean to check if the value has been set.
func (o *PrivilegedAccount) GetOwnerUserIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerUserIds, true
}

// SetOwnerUserIds sets field value
func (o *PrivilegedAccount) SetOwnerUserIds(v []string) *PrivilegedAccount {
	o.OwnerUserIds = v
	return o
}

// GetOwnerGroupIds returns the OwnerGroupIds field value
func (o *PrivilegedAccount) GetOwnerGroupIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OwnerGroupIds
}

// GetOwnerGroupIdsOk returns a tuple with the OwnerGroupIds field value
// and a boolean to check if the value has been set.
func (o *PrivilegedAccount) GetOwnerGroupIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerGroupIds, true
}

// SetOwnerGroupIds sets field value
func (o *PrivilegedAccount) SetOwnerGroupIds(v []string) *PrivilegedAccount {
	o.OwnerGroupIds = v
	return o
}

func (o PrivilegedAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivilegedAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["account_type"] = o.AccountType
	toSerialize["owner_user_ids"] = o.OwnerUserIds
	toSerialize["owner_group_ids"] = o.OwnerGroupIds
	return toSerialize, nil
}

type NullablePrivilegedAccount struct {
	value *PrivilegedAccount
	isSet bool
}

func (v NullablePrivilegedAccount) Get() *PrivilegedAccount {
	return v.value
}

func (v *NullablePrivilegedAccount) Set(val *PrivilegedAccount) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegedAccount) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegedAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegedAccount(val *PrivilegedAccount) *NullablePrivilegedAccount {
	return &NullablePrivilegedAccount{value: val, isSet: true}
}

func (v NullablePrivilegedAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegedAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
