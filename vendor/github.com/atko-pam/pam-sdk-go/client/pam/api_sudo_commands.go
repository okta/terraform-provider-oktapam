/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SudoCommandsAPIService SudoCommandsAPI service
type SudoCommandsAPIService service

type ApiCreateSudoCommandBundleRequest struct {
	ctx               context.Context
	ApiService        *SudoCommandsAPIService
	teamName          string
	sudoCommandBundle *SudoCommandBundle
}

func (r ApiCreateSudoCommandBundleRequest) SudoCommandBundle(sudoCommandBundle SudoCommandBundle) ApiCreateSudoCommandBundleRequest {
	r.sudoCommandBundle = &sudoCommandBundle
	return r
}

func (r ApiCreateSudoCommandBundleRequest) Execute() (*SudoCommandBundle, *http.Response, error) {
	return r.ApiService.CreateSudoCommandBundleExecute(r)
}

/*
CreateSudoCommandBundle Create a sudo command bundle

	Creates a sudo command bundle

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team

@return ApiCreateSudoCommandBundleRequest
*/
func (a *SudoCommandsAPIService) CreateSudoCommandBundle(ctx context.Context, teamName string) ApiCreateSudoCommandBundleRequest {
	return ApiCreateSudoCommandBundleRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return SudoCommandBundle
func (a *SudoCommandsAPIService) CreateSudoCommandBundleExecute(r ApiCreateSudoCommandBundleRequest) (*SudoCommandBundle, *http.Response, error) {
	var (
		traceKey            = "sudocommandsapi.createSudoCommandBundle"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SudoCommandBundle
	)

	localVarPath := "/v1/teams/{team_name}/sudo_command_bundles"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sudoCommandBundle
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiDeleteSudoCommandBundleRequest struct {
	ctx                 context.Context
	ApiService          *SudoCommandsAPIService
	teamName            string
	sudoCommandBundleId string
}

func (r ApiDeleteSudoCommandBundleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSudoCommandBundleExecute(r)
}

/*
DeleteSudoCommandBundle Delete a sudo command bundle

	Deletes the specified sudo command bundle. You can't delete a sudo command bundle that's referenced by an Okta Privileged Access security policy.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param sudoCommandBundleId The UUID of a sudo command bundle

@return ApiDeleteSudoCommandBundleRequest
*/
func (a *SudoCommandsAPIService) DeleteSudoCommandBundle(ctx context.Context, teamName string, sudoCommandBundleId string) ApiDeleteSudoCommandBundleRequest {
	return ApiDeleteSudoCommandBundleRequest{
		ApiService:          a,
		ctx:                 ctx,
		teamName:            teamName,
		sudoCommandBundleId: sudoCommandBundleId,
	}
}

// Execute executes the request
func (a *SudoCommandsAPIService) DeleteSudoCommandBundleExecute(r ApiDeleteSudoCommandBundleRequest) (*http.Response, error) {
	var (
		traceKey           = "sudocommandsapi.deleteSudoCommandBundle"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/sudo_command_bundles/{sudo_command_bundle_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sudo_command_bundle_id"+"}", url.PathEscape(parameterValueToString(r.sudoCommandBundleId, "sudoCommandBundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiGetSudoCommandBundleRequest struct {
	ctx                 context.Context
	ApiService          *SudoCommandsAPIService
	teamName            string
	sudoCommandBundleId string
}

func (r ApiGetSudoCommandBundleRequest) Execute() (*SudoCommandBundle, *http.Response, error) {
	return r.ApiService.GetSudoCommandBundleExecute(r)
}

/*
GetSudoCommandBundle Retrieve a sudo command bundle

	Retrieves a specified sudo command bundle

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param sudoCommandBundleId The UUID of a sudo command bundle

@return ApiGetSudoCommandBundleRequest
*/
func (a *SudoCommandsAPIService) GetSudoCommandBundle(ctx context.Context, teamName string, sudoCommandBundleId string) ApiGetSudoCommandBundleRequest {
	return ApiGetSudoCommandBundleRequest{
		ApiService:          a,
		ctx:                 ctx,
		teamName:            teamName,
		sudoCommandBundleId: sudoCommandBundleId,
	}
}

// Execute executes the request
//
//	@return SudoCommandBundle
func (a *SudoCommandsAPIService) GetSudoCommandBundleExecute(r ApiGetSudoCommandBundleRequest) (*SudoCommandBundle, *http.Response, error) {
	var (
		traceKey            = "sudocommandsapi.getSudoCommandBundle"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SudoCommandBundle
	)

	localVarPath := "/v1/teams/{team_name}/sudo_command_bundles/{sudo_command_bundle_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sudo_command_bundle_id"+"}", url.PathEscape(parameterValueToString(r.sudoCommandBundleId, "sudoCommandBundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListSudoCommandBundlesRequest struct {
	ctx        context.Context
	ApiService *SudoCommandsAPIService
	teamName   string
	count      *int32
	descending *bool
	offset     *string
	prev       *bool
}

// The number of objects per page
func (r ApiListSudoCommandBundlesRequest) Count(count int32) ApiListSudoCommandBundlesRequest {
	r.count = &count
	return r
}

// The object order
func (r ApiListSudoCommandBundlesRequest) Descending(descending bool) ApiListSudoCommandBundlesRequest {
	r.descending = &descending
	return r
}

// The offset value for pagination. The **rel&#x3D;\&quot;next\&quot;** and **rel&#x3D;\&quot;prev\&quot;** &#x60;Link&#x60; headers define the offset for subsequent or previous pages.
func (r ApiListSudoCommandBundlesRequest) Offset(offset string) ApiListSudoCommandBundlesRequest {
	r.offset = &offset
	return r
}

// The direction of paging
func (r ApiListSudoCommandBundlesRequest) Prev(prev bool) ApiListSudoCommandBundlesRequest {
	r.prev = &prev
	return r
}

func (r ApiListSudoCommandBundlesRequest) Execute() (*ListSudoCommandBundleResponse, *http.Response, error) {
	return r.ApiService.ListSudoCommandBundlesExecute(r)
}

/*
ListSudoCommandBundles List all sudo command bundles

	Lists all sudo command bundles for your team

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team

@return ApiListSudoCommandBundlesRequest
*/
func (a *SudoCommandsAPIService) ListSudoCommandBundles(ctx context.Context, teamName string) ApiListSudoCommandBundlesRequest {
	return ApiListSudoCommandBundlesRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListSudoCommandBundleResponse
func (a *SudoCommandsAPIService) ListSudoCommandBundlesExecute(r ApiListSudoCommandBundlesRequest) (*ListSudoCommandBundleResponse, *http.Response, error) {
	var (
		traceKey            = "sudocommandsapi.listSudoCommandBundles"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListSudoCommandBundleResponse
	)

	localVarPath := "/v1/teams/{team_name}/sudo_command_bundles"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.descending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "descending", r.descending, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.prev != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prev", r.prev, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateSudoCommandBundleRequest struct {
	ctx                 context.Context
	ApiService          *SudoCommandsAPIService
	teamName            string
	sudoCommandBundleId string
	sudoCommandBundle   *SudoCommandBundle
}

func (r ApiUpdateSudoCommandBundleRequest) SudoCommandBundle(sudoCommandBundle SudoCommandBundle) ApiUpdateSudoCommandBundleRequest {
	r.sudoCommandBundle = &sudoCommandBundle
	return r
}

func (r ApiUpdateSudoCommandBundleRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateSudoCommandBundleExecute(r)
}

/*
UpdateSudoCommandBundle Update a sudo command bundle

	Updates a specified sudo command bundle. You cannot modify a sudo command bundle that's referenced by an Okta Privileged Access security policy.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param sudoCommandBundleId The UUID of a sudo command bundle

@return ApiUpdateSudoCommandBundleRequest
*/
func (a *SudoCommandsAPIService) UpdateSudoCommandBundle(ctx context.Context, teamName string, sudoCommandBundleId string) ApiUpdateSudoCommandBundleRequest {
	return ApiUpdateSudoCommandBundleRequest{
		ApiService:          a,
		ctx:                 ctx,
		teamName:            teamName,
		sudoCommandBundleId: sudoCommandBundleId,
	}
}

// Execute executes the request
func (a *SudoCommandsAPIService) UpdateSudoCommandBundleExecute(r ApiUpdateSudoCommandBundleRequest) (*http.Response, error) {
	var (
		traceKey           = "sudocommandsapi.updateSudoCommandBundle"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/sudo_command_bundles/{sudo_command_bundle_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sudo_command_bundle_id"+"}", url.PathEscape(parameterValueToString(r.sudoCommandBundleId, "sudoCommandBundleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sudoCommandBundle == nil {
		return nil, reportError("sudoCommandBundle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sudoCommandBundle
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}
