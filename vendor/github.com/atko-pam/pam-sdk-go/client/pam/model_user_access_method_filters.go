/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the UserAccessMethodFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAccessMethodFilters{}

// UserAccessMethodFilters struct for UserAccessMethodFilters
type UserAccessMethodFilters struct {
	// If provided, only return user access methods that use this account to access the server
	Identity *string `json:"identity,omitempty"`
	// If provided, only return user access methods associated with this sudo command bundle.  The command bundle is a grouping of sudo command sets defined in policies, identified by its display name.
	SudoDisplayName *string `json:"sudo_display_name,omitempty"`
}

// NewUserAccessMethodFilters instantiates a new UserAccessMethodFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccessMethodFilters() *UserAccessMethodFilters {
	this := UserAccessMethodFilters{}
	return &this
}

// NewUserAccessMethodFiltersWithDefaults instantiates a new UserAccessMethodFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccessMethodFiltersWithDefaults() *UserAccessMethodFilters {
	this := UserAccessMethodFilters{}
	return &this
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *UserAccessMethodFilters) GetIdentity() string {
	if o == nil || IsNil(o.Identity) {
		var ret string
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccessMethodFilters) GetIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *UserAccessMethodFilters) HasIdentity() bool {
	if o != nil && !IsNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given string and assigns it to the Identity field.
func (o *UserAccessMethodFilters) SetIdentity(v string) *UserAccessMethodFilters {
	o.Identity = &v
	return o
}

// GetSudoDisplayName returns the SudoDisplayName field value if set, zero value otherwise.
func (o *UserAccessMethodFilters) GetSudoDisplayName() string {
	if o == nil || IsNil(o.SudoDisplayName) {
		var ret string
		return ret
	}
	return *o.SudoDisplayName
}

// GetSudoDisplayNameOk returns a tuple with the SudoDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccessMethodFilters) GetSudoDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.SudoDisplayName) {
		return nil, false
	}
	return o.SudoDisplayName, true
}

// HasSudoDisplayName returns a boolean if a field has been set.
func (o *UserAccessMethodFilters) HasSudoDisplayName() bool {
	if o != nil && !IsNil(o.SudoDisplayName) {
		return true
	}

	return false
}

// SetSudoDisplayName gets a reference to the given string and assigns it to the SudoDisplayName field.
func (o *UserAccessMethodFilters) SetSudoDisplayName(v string) *UserAccessMethodFilters {
	o.SudoDisplayName = &v
	return o
}

func (o UserAccessMethodFilters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAccessMethodFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identity) {
		toSerialize["identity"] = o.Identity
	}
	if !IsNil(o.SudoDisplayName) {
		toSerialize["sudo_display_name"] = o.SudoDisplayName
	}
	return toSerialize, nil
}

type NullableUserAccessMethodFilters struct {
	value *UserAccessMethodFilters
	isSet bool
}

func (v NullableUserAccessMethodFilters) Get() *UserAccessMethodFilters {
	return v.value
}

func (v *NullableUserAccessMethodFilters) Set(val *UserAccessMethodFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccessMethodFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccessMethodFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccessMethodFilters(val *UserAccessMethodFilters) *NullableUserAccessMethodFilters {
	return &NullableUserAccessMethodFilters{value: val, isSet: true}
}

func (v NullableUserAccessMethodFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccessMethodFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
