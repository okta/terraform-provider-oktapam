/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the StagedPrivilegedAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StagedPrivilegedAccount{}

// StagedPrivilegedAccount struct for StagedPrivilegedAccount
type StagedPrivilegedAccount struct {
	// The UUID of the Privileged Account
	Id          *string                `json:"id,omitempty"`
	AccountType *PrivilegedAccountType `json:"account_type,omitempty"`
	// A URL pointing to the logo of the app associated with the Privileged Account
	LogoUrl *string `json:"logo_url,omitempty"`
	// The name of the app associated with the Privileged Account
	ApplicationName *string `json:"application_name,omitempty"`
	// A human-readable name for the Privileged Account
	Name *string `json:"name,omitempty"`
	// A brief description of the Privileged Account
	Description *string `json:"description,omitempty"`
	// Whether the password for the Privileged Account can be rotated using Okta Lifecycle Management
	LcmSyncPossible *bool `json:"lcm_sync_possible,omitempty"`
}

// NewStagedPrivilegedAccount instantiates a new StagedPrivilegedAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStagedPrivilegedAccount() *StagedPrivilegedAccount {
	this := StagedPrivilegedAccount{}
	return &this
}

// NewStagedPrivilegedAccountWithDefaults instantiates a new StagedPrivilegedAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStagedPrivilegedAccountWithDefaults() *StagedPrivilegedAccount {
	this := StagedPrivilegedAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StagedPrivilegedAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedPrivilegedAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StagedPrivilegedAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StagedPrivilegedAccount) SetId(v string) *StagedPrivilegedAccount {
	o.Id = &v
	return o
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *StagedPrivilegedAccount) GetAccountType() PrivilegedAccountType {
	if o == nil || IsNil(o.AccountType) {
		var ret PrivilegedAccountType
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedPrivilegedAccount) GetAccountTypeOk() (*PrivilegedAccountType, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *StagedPrivilegedAccount) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given PrivilegedAccountType and assigns it to the AccountType field.
func (o *StagedPrivilegedAccount) SetAccountType(v PrivilegedAccountType) *StagedPrivilegedAccount {
	o.AccountType = &v
	return o
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *StagedPrivilegedAccount) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedPrivilegedAccount) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *StagedPrivilegedAccount) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *StagedPrivilegedAccount) SetLogoUrl(v string) *StagedPrivilegedAccount {
	o.LogoUrl = &v
	return o
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *StagedPrivilegedAccount) GetApplicationName() string {
	if o == nil || IsNil(o.ApplicationName) {
		var ret string
		return ret
	}
	return *o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedPrivilegedAccount) GetApplicationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationName) {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *StagedPrivilegedAccount) HasApplicationName() bool {
	if o != nil && !IsNil(o.ApplicationName) {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given string and assigns it to the ApplicationName field.
func (o *StagedPrivilegedAccount) SetApplicationName(v string) *StagedPrivilegedAccount {
	o.ApplicationName = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StagedPrivilegedAccount) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedPrivilegedAccount) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StagedPrivilegedAccount) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StagedPrivilegedAccount) SetName(v string) *StagedPrivilegedAccount {
	o.Name = &v
	return o
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StagedPrivilegedAccount) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedPrivilegedAccount) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StagedPrivilegedAccount) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StagedPrivilegedAccount) SetDescription(v string) *StagedPrivilegedAccount {
	o.Description = &v
	return o
}

// GetLcmSyncPossible returns the LcmSyncPossible field value if set, zero value otherwise.
func (o *StagedPrivilegedAccount) GetLcmSyncPossible() bool {
	if o == nil || IsNil(o.LcmSyncPossible) {
		var ret bool
		return ret
	}
	return *o.LcmSyncPossible
}

// GetLcmSyncPossibleOk returns a tuple with the LcmSyncPossible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedPrivilegedAccount) GetLcmSyncPossibleOk() (*bool, bool) {
	if o == nil || IsNil(o.LcmSyncPossible) {
		return nil, false
	}
	return o.LcmSyncPossible, true
}

// HasLcmSyncPossible returns a boolean if a field has been set.
func (o *StagedPrivilegedAccount) HasLcmSyncPossible() bool {
	if o != nil && !IsNil(o.LcmSyncPossible) {
		return true
	}

	return false
}

// SetLcmSyncPossible gets a reference to the given bool and assigns it to the LcmSyncPossible field.
func (o *StagedPrivilegedAccount) SetLcmSyncPossible(v bool) *StagedPrivilegedAccount {
	o.LcmSyncPossible = &v
	return o
}

func (o StagedPrivilegedAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StagedPrivilegedAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AccountType) {
		toSerialize["account_type"] = o.AccountType
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["logo_url"] = o.LogoUrl
	}
	if !IsNil(o.ApplicationName) {
		toSerialize["application_name"] = o.ApplicationName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LcmSyncPossible) {
		toSerialize["lcm_sync_possible"] = o.LcmSyncPossible
	}
	return toSerialize, nil
}

type NullableStagedPrivilegedAccount struct {
	value *StagedPrivilegedAccount
	isSet bool
}

func (v NullableStagedPrivilegedAccount) Get() *StagedPrivilegedAccount {
	return v.value
}

func (v *NullableStagedPrivilegedAccount) Set(val *StagedPrivilegedAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableStagedPrivilegedAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableStagedPrivilegedAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStagedPrivilegedAccount(val *StagedPrivilegedAccount) *NullableStagedPrivilegedAccount {
	return &NullableStagedPrivilegedAccount{value: val, isSet: true}
}

func (v NullableStagedPrivilegedAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStagedPrivilegedAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
