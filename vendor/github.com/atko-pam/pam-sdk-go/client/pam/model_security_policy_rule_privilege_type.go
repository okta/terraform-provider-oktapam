/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// SecurityPolicyRulePrivilegeType The type of privilege granted to a Principal. You can't specify both SSH and RDP options within the same rule.
type SecurityPolicyRulePrivilegeType string

// List of SecurityPolicyRulePrivilegeType
const (
	SecurityPolicyRulePrivilegeType_PASSWORD_CHECKOUT_DATABASE SecurityPolicyRulePrivilegeType = "password_checkout_database"
	SecurityPolicyRulePrivilegeType_PRINCIPAL_ACCOUNT_SSH      SecurityPolicyRulePrivilegeType = "principal_account_ssh"
	SecurityPolicyRulePrivilegeType_PRINCIPAL_ACCOUNT_RDP      SecurityPolicyRulePrivilegeType = "principal_account_rdp"
	SecurityPolicyRulePrivilegeType_PASSWORD_CHECKOUT_SSH      SecurityPolicyRulePrivilegeType = "password_checkout_ssh"
	SecurityPolicyRulePrivilegeType_PASSWORD_CHECKOUT_RDP      SecurityPolicyRulePrivilegeType = "password_checkout_rdp"
	SecurityPolicyRulePrivilegeType_REVEAL_PASSWORD            SecurityPolicyRulePrivilegeType = "reveal_password"
	SecurityPolicyRulePrivilegeType_UPDATE_PASSWORD            SecurityPolicyRulePrivilegeType = "update_password"
	SecurityPolicyRulePrivilegeType_SECRET                     SecurityPolicyRulePrivilegeType = "secret"
	SecurityPolicyRulePrivilegeType_ROTATE_PASSWORD            SecurityPolicyRulePrivilegeType = "rotate_password"
)

// All allowed values of SecurityPolicyRulePrivilegeType enum
var AllowedSecurityPolicyRulePrivilegeTypeEnumValues = []SecurityPolicyRulePrivilegeType{
	"password_checkout_database",
	"principal_account_ssh",
	"principal_account_rdp",
	"password_checkout_ssh",
	"password_checkout_rdp",
	"reveal_password",
	"update_password",
	"secret",
	"rotate_password",
}

func (v *SecurityPolicyRulePrivilegeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityPolicyRulePrivilegeType(value)

	*v = enumTypeValue

	return nil
}

// NewSecurityPolicyRulePrivilegeTypeFromValue returns a pointer to a valid SecurityPolicyRulePrivilegeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityPolicyRulePrivilegeTypeFromValue(v string) (*SecurityPolicyRulePrivilegeType, error) {
	ev := SecurityPolicyRulePrivilegeType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityPolicyRulePrivilegeType) IsValid() bool {
	for _, existing := range AllowedSecurityPolicyRulePrivilegeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityPolicyRulePrivilegeType value
func (v SecurityPolicyRulePrivilegeType) Ptr() *SecurityPolicyRulePrivilegeType {
	return &v
}

type NullableSecurityPolicyRulePrivilegeType struct {
	value *SecurityPolicyRulePrivilegeType
	isSet bool
}

func (v NullableSecurityPolicyRulePrivilegeType) Get() *SecurityPolicyRulePrivilegeType {
	return v.value
}

func (v *NullableSecurityPolicyRulePrivilegeType) Set(val *SecurityPolicyRulePrivilegeType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRulePrivilegeType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRulePrivilegeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRulePrivilegeType(val *SecurityPolicyRulePrivilegeType) *NullableSecurityPolicyRulePrivilegeType {
	return &NullableSecurityPolicyRulePrivilegeType{value: val, isSet: true}
}

func (v NullableSecurityPolicyRulePrivilegeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRulePrivilegeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
