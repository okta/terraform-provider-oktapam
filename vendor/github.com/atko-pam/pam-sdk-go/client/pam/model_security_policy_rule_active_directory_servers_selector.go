/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRuleActiveDirectoryServersSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRuleActiveDirectoryServersSelector{}

// SecurityPolicyRuleActiveDirectoryServersSelector The selector that defines resources targeted by this Security Policy for server based resources
type SecurityPolicyRuleActiveDirectoryServersSelector struct {
	Selectors []SecurityPolicyRuleActiveDirectoryServersSelectorContainer `json:"selectors,omitempty"`
}

// NewSecurityPolicyRuleActiveDirectoryServersSelector instantiates a new SecurityPolicyRuleActiveDirectoryServersSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRuleActiveDirectoryServersSelector() *SecurityPolicyRuleActiveDirectoryServersSelector {
	this := SecurityPolicyRuleActiveDirectoryServersSelector{}
	return &this
}

// NewSecurityPolicyRuleActiveDirectoryServersSelectorWithDefaults instantiates a new SecurityPolicyRuleActiveDirectoryServersSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRuleActiveDirectoryServersSelectorWithDefaults() *SecurityPolicyRuleActiveDirectoryServersSelector {
	this := SecurityPolicyRuleActiveDirectoryServersSelector{}
	return &this
}

// GetSelectors returns the Selectors field value if set, zero value otherwise.
func (o *SecurityPolicyRuleActiveDirectoryServersSelector) GetSelectors() []SecurityPolicyRuleActiveDirectoryServersSelectorContainer {
	if o == nil || IsNil(o.Selectors) {
		var ret []SecurityPolicyRuleActiveDirectoryServersSelectorContainer
		return ret
	}
	return o.Selectors
}

// GetSelectorsOk returns a tuple with the Selectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleActiveDirectoryServersSelector) GetSelectorsOk() ([]SecurityPolicyRuleActiveDirectoryServersSelectorContainer, bool) {
	if o == nil || IsNil(o.Selectors) {
		return nil, false
	}
	return o.Selectors, true
}

// HasSelectors returns a boolean if a field has been set.
func (o *SecurityPolicyRuleActiveDirectoryServersSelector) HasSelectors() bool {
	if o != nil && !IsNil(o.Selectors) {
		return true
	}

	return false
}

// SetSelectors gets a reference to the given []SecurityPolicyRuleActiveDirectoryServersSelectorContainer and assigns it to the Selectors field.
func (o *SecurityPolicyRuleActiveDirectoryServersSelector) SetSelectors(v []SecurityPolicyRuleActiveDirectoryServersSelectorContainer) *SecurityPolicyRuleActiveDirectoryServersSelector {
	o.Selectors = v
	return o
}

func (o SecurityPolicyRuleActiveDirectoryServersSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRuleActiveDirectoryServersSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selectors) {
		toSerialize["selectors"] = o.Selectors
	}
	return toSerialize, nil
}

type NullableSecurityPolicyRuleActiveDirectoryServersSelector struct {
	value *SecurityPolicyRuleActiveDirectoryServersSelector
	isSet bool
}

func (v NullableSecurityPolicyRuleActiveDirectoryServersSelector) Get() *SecurityPolicyRuleActiveDirectoryServersSelector {
	return v.value
}

func (v *NullableSecurityPolicyRuleActiveDirectoryServersSelector) Set(val *SecurityPolicyRuleActiveDirectoryServersSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleActiveDirectoryServersSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleActiveDirectoryServersSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleActiveDirectoryServersSelector(val *SecurityPolicyRuleActiveDirectoryServersSelector) *NullableSecurityPolicyRuleActiveDirectoryServersSelector {
	return &NullableSecurityPolicyRuleActiveDirectoryServersSelector{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleActiveDirectoryServersSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleActiveDirectoryServersSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
