/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
)

// InternalAPIService InternalAPI service
type InternalAPIService service

type ApiCreatePAMTeamRequest struct {
	ctx        context.Context
	ApiService *InternalAPIService
	body       *Team
}

func (r ApiCreatePAMTeamRequest) Body(body Team) ApiCreatePAMTeamRequest {
	r.body = &body
	return r
}

func (r ApiCreatePAMTeamRequest) Execute() (*TeamResponse, *http.Response, error) {
	return r.ApiService.CreatePAMTeamExecute(r)
}

/*
CreatePAMTeam Create a team from an Okta org

	Creates a new OPA team that's connected to an Okta org

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiCreatePAMTeamRequest
*/
func (a *InternalAPIService) CreatePAMTeam(ctx context.Context) ApiCreatePAMTeamRequest {
	return ApiCreatePAMTeamRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TeamResponse
func (a *InternalAPIService) CreatePAMTeamExecute(r ApiCreatePAMTeamRequest) (*TeamResponse, *http.Response, error) {
	var (
		traceKey            = "internalapi.createPAMTeam"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamResponse
	)

	localVarPath := "/v1/internal/pam_teams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiValidatePAMTeamnameRequest struct {
	ctx        context.Context
	ApiService *InternalAPIService
	body       *TeamnameValidateInput
}

func (r ApiValidatePAMTeamnameRequest) Body(body TeamnameValidateInput) ApiValidatePAMTeamnameRequest {
	r.body = &body
	return r
}

func (r ApiValidatePAMTeamnameRequest) Execute() (*http.Response, error) {
	return r.ApiService.ValidatePAMTeamnameExecute(r)
}

/*
ValidatePAMTeamname Validate a team name

	Validates the existence of a team with `teamName`

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiValidatePAMTeamnameRequest
*/
func (a *InternalAPIService) ValidatePAMTeamname(ctx context.Context) ApiValidatePAMTeamnameRequest {
	return ApiValidatePAMTeamnameRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *InternalAPIService) ValidatePAMTeamnameExecute(r ApiValidatePAMTeamnameRequest) (*http.Response, error) {
	var (
		traceKey           = "internalapi.validatePAMTeamname"
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/internal/teamname-validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}
