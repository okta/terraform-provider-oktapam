/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the ProjectGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectGroup{}

// ProjectGroup struct for ProjectGroup
type ProjectGroup struct {
	// If `true`, a local (unix or windows) group is created on the Server and all relevant users are added to the local group. This does not impact user creation. Server Users are always created as long as `create_server_users` is set to `true` for the Project.
	CreateServerGroup NullableBool `json:"create_server_group,omitempty"`
	// A timestamp indicating when the Group was deleted from the Project. `null` if not deleted.
	DeletedAt time.Time `json:"deleted_at"`
	// The name of the Group
	Group string `json:"group"`
	// The UUID of the Group
	GroupId string `json:"group_id"`
	// The UUID of the Group
	Id string `json:"id"`
	// The name of the Group. A non-editable duplicate of the `group` param.
	Name string `json:"name"`
	// A timestamp indicating when the Group was removed from the Project. `null` if not removed.
	RemovedAt time.Time `json:"removed_at"`
	// If `true`, members of this Group have access to the Servers in the Project
	ServerAccess bool `json:"server_access"`
	// If `true`, members of this Group have sudo or Administrator permissions on the Project Servers
	ServerAdmin bool `json:"server_admin"`
	// If `create_server_group` is `true`, indicates the name of the associated Server Group
	ServerGroupName NullableString `json:"server_group_name,omitempty"`
	// Kubernetes-style selector for Servers in the Project. Members of this Group can only access Servers that are assigned this selector.
	ServersSelector NullableString `json:"servers_selector,omitempty"`
	// If `create_server_group` is `true`, indicates the GID of the associated Server Group
	UnixGid NullableInt64 `json:"unix_gid,omitempty"`
}

// NewProjectGroup instantiates a new ProjectGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectGroup(deletedAt time.Time, group string, groupId string, id string, name string, removedAt time.Time, serverAccess bool, serverAdmin bool) *ProjectGroup {
	this := ProjectGroup{}
	this.DeletedAt = deletedAt
	this.Group = group
	this.GroupId = groupId
	this.Id = id
	this.Name = name
	this.RemovedAt = removedAt
	this.ServerAccess = serverAccess
	this.ServerAdmin = serverAdmin
	return &this
}

// NewProjectGroupWithDefaults instantiates a new ProjectGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectGroupWithDefaults() *ProjectGroup {
	this := ProjectGroup{}
	return &this
}

// GetCreateServerGroup returns the CreateServerGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectGroup) GetCreateServerGroup() bool {
	if o == nil || IsNil(o.CreateServerGroup.Get()) {
		var ret bool
		return ret
	}
	return *o.CreateServerGroup.Get()
}

// GetCreateServerGroupOk returns a tuple with the CreateServerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectGroup) GetCreateServerGroupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreateServerGroup.Get(), o.CreateServerGroup.IsSet()
}

// HasCreateServerGroup returns a boolean if a field has been set.
func (o *ProjectGroup) HasCreateServerGroup() bool {
	if o != nil && o.CreateServerGroup.IsSet() {
		return true
	}

	return false
}

// SetCreateServerGroup gets a reference to the given NullableBool and assigns it to the CreateServerGroup field.
func (o *ProjectGroup) SetCreateServerGroup(v bool) *ProjectGroup {
	o.CreateServerGroup.Set(&v)
	return o
}

// SetCreateServerGroupNil sets the value for CreateServerGroup to be an explicit nil
func (o *ProjectGroup) SetCreateServerGroupNil() *ProjectGroup {
	o.CreateServerGroup.Set(nil)
	return o
}

// UnsetCreateServerGroup ensures that no value is present for CreateServerGroup, not even an explicit nil
func (o *ProjectGroup) UnsetCreateServerGroup() *ProjectGroup {
	o.CreateServerGroup.Unset()
	return o
}

// GetDeletedAt returns the DeletedAt field value
func (o *ProjectGroup) GetDeletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value
// and a boolean to check if the value has been set.
func (o *ProjectGroup) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeletedAt, true
}

// SetDeletedAt sets field value
func (o *ProjectGroup) SetDeletedAt(v time.Time) *ProjectGroup {
	o.DeletedAt = v
	return o
}

// GetGroup returns the Group field value
func (o *ProjectGroup) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *ProjectGroup) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *ProjectGroup) SetGroup(v string) *ProjectGroup {
	o.Group = v
	return o
}

// GetGroupId returns the GroupId field value
func (o *ProjectGroup) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *ProjectGroup) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *ProjectGroup) SetGroupId(v string) *ProjectGroup {
	o.GroupId = v
	return o
}

// GetId returns the Id field value
func (o *ProjectGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProjectGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProjectGroup) SetId(v string) *ProjectGroup {
	o.Id = v
	return o
}

// GetName returns the Name field value
func (o *ProjectGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectGroup) SetName(v string) *ProjectGroup {
	o.Name = v
	return o
}

// GetRemovedAt returns the RemovedAt field value
func (o *ProjectGroup) GetRemovedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RemovedAt
}

// GetRemovedAtOk returns a tuple with the RemovedAt field value
// and a boolean to check if the value has been set.
func (o *ProjectGroup) GetRemovedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemovedAt, true
}

// SetRemovedAt sets field value
func (o *ProjectGroup) SetRemovedAt(v time.Time) *ProjectGroup {
	o.RemovedAt = v
	return o
}

// GetServerAccess returns the ServerAccess field value
func (o *ProjectGroup) GetServerAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ServerAccess
}

// GetServerAccessOk returns a tuple with the ServerAccess field value
// and a boolean to check if the value has been set.
func (o *ProjectGroup) GetServerAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerAccess, true
}

// SetServerAccess sets field value
func (o *ProjectGroup) SetServerAccess(v bool) *ProjectGroup {
	o.ServerAccess = v
	return o
}

// GetServerAdmin returns the ServerAdmin field value
func (o *ProjectGroup) GetServerAdmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ServerAdmin
}

// GetServerAdminOk returns a tuple with the ServerAdmin field value
// and a boolean to check if the value has been set.
func (o *ProjectGroup) GetServerAdminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerAdmin, true
}

// SetServerAdmin sets field value
func (o *ProjectGroup) SetServerAdmin(v bool) *ProjectGroup {
	o.ServerAdmin = v
	return o
}

// GetServerGroupName returns the ServerGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectGroup) GetServerGroupName() string {
	if o == nil || IsNil(o.ServerGroupName.Get()) {
		var ret string
		return ret
	}
	return *o.ServerGroupName.Get()
}

// GetServerGroupNameOk returns a tuple with the ServerGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectGroup) GetServerGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerGroupName.Get(), o.ServerGroupName.IsSet()
}

// HasServerGroupName returns a boolean if a field has been set.
func (o *ProjectGroup) HasServerGroupName() bool {
	if o != nil && o.ServerGroupName.IsSet() {
		return true
	}

	return false
}

// SetServerGroupName gets a reference to the given NullableString and assigns it to the ServerGroupName field.
func (o *ProjectGroup) SetServerGroupName(v string) *ProjectGroup {
	o.ServerGroupName.Set(&v)
	return o
}

// SetServerGroupNameNil sets the value for ServerGroupName to be an explicit nil
func (o *ProjectGroup) SetServerGroupNameNil() *ProjectGroup {
	o.ServerGroupName.Set(nil)
	return o
}

// UnsetServerGroupName ensures that no value is present for ServerGroupName, not even an explicit nil
func (o *ProjectGroup) UnsetServerGroupName() *ProjectGroup {
	o.ServerGroupName.Unset()
	return o
}

// GetServersSelector returns the ServersSelector field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectGroup) GetServersSelector() string {
	if o == nil || IsNil(o.ServersSelector.Get()) {
		var ret string
		return ret
	}
	return *o.ServersSelector.Get()
}

// GetServersSelectorOk returns a tuple with the ServersSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectGroup) GetServersSelectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServersSelector.Get(), o.ServersSelector.IsSet()
}

// HasServersSelector returns a boolean if a field has been set.
func (o *ProjectGroup) HasServersSelector() bool {
	if o != nil && o.ServersSelector.IsSet() {
		return true
	}

	return false
}

// SetServersSelector gets a reference to the given NullableString and assigns it to the ServersSelector field.
func (o *ProjectGroup) SetServersSelector(v string) *ProjectGroup {
	o.ServersSelector.Set(&v)
	return o
}

// SetServersSelectorNil sets the value for ServersSelector to be an explicit nil
func (o *ProjectGroup) SetServersSelectorNil() *ProjectGroup {
	o.ServersSelector.Set(nil)
	return o
}

// UnsetServersSelector ensures that no value is present for ServersSelector, not even an explicit nil
func (o *ProjectGroup) UnsetServersSelector() *ProjectGroup {
	o.ServersSelector.Unset()
	return o
}

// GetUnixGid returns the UnixGid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectGroup) GetUnixGid() int64 {
	if o == nil || IsNil(o.UnixGid.Get()) {
		var ret int64
		return ret
	}
	return *o.UnixGid.Get()
}

// GetUnixGidOk returns a tuple with the UnixGid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectGroup) GetUnixGidOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnixGid.Get(), o.UnixGid.IsSet()
}

// HasUnixGid returns a boolean if a field has been set.
func (o *ProjectGroup) HasUnixGid() bool {
	if o != nil && o.UnixGid.IsSet() {
		return true
	}

	return false
}

// SetUnixGid gets a reference to the given NullableInt64 and assigns it to the UnixGid field.
func (o *ProjectGroup) SetUnixGid(v int64) *ProjectGroup {
	o.UnixGid.Set(&v)
	return o
}

// SetUnixGidNil sets the value for UnixGid to be an explicit nil
func (o *ProjectGroup) SetUnixGidNil() *ProjectGroup {
	o.UnixGid.Set(nil)
	return o
}

// UnsetUnixGid ensures that no value is present for UnixGid, not even an explicit nil
func (o *ProjectGroup) UnsetUnixGid() *ProjectGroup {
	o.UnixGid.Unset()
	return o
}

func (o ProjectGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CreateServerGroup.IsSet() {
		toSerialize["create_server_group"] = o.CreateServerGroup.Get()
	}
	toSerialize["deleted_at"] = o.DeletedAt
	toSerialize["group"] = o.Group
	toSerialize["group_id"] = o.GroupId
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["removed_at"] = o.RemovedAt
	toSerialize["server_access"] = o.ServerAccess
	toSerialize["server_admin"] = o.ServerAdmin
	if o.ServerGroupName.IsSet() {
		toSerialize["server_group_name"] = o.ServerGroupName.Get()
	}
	if o.ServersSelector.IsSet() {
		toSerialize["servers_selector"] = o.ServersSelector.Get()
	}
	if o.UnixGid.IsSet() {
		toSerialize["unix_gid"] = o.UnixGid.Get()
	}
	return toSerialize, nil
}

type NullableProjectGroup struct {
	value *ProjectGroup
	isSet bool
}

func (v NullableProjectGroup) Get() *ProjectGroup {
	return v.value
}

func (v *NullableProjectGroup) Set(val *ProjectGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectGroup(val *ProjectGroup) *NullableProjectGroup {
	return &NullableProjectGroup{value: val, isSet: true}
}

func (v NullableProjectGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
