/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyPrincipalAccountRDPPrivilege type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyPrincipalAccountRDPPrivilege{}

// SecurityPolicyPrincipalAccountRDPPrivilege SecurityPolicyPrincipalAccountRDPPrivilege is like PrincipalAccountSSHPrivilege, but for RDP
type SecurityPolicyPrincipalAccountRDPPrivilege struct {
	SecurityPolicyPrivilege
	PrincipalAccountRdp bool `json:"principal_account_rdp"`
	// If enabled, the Okta user will get the equivalent of the ability to run any/all commands as root via Sudo.
	AdminLevelPermissions *bool `json:"admin_level_permissions,omitempty"`
}

// NewSecurityPolicyPrincipalAccountRDPPrivilege instantiates a new SecurityPolicyPrincipalAccountRDPPrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyPrincipalAccountRDPPrivilege(principalAccountRdp bool, type_ SecurityPolicyRulePrivilegeType) *SecurityPolicyPrincipalAccountRDPPrivilege {
	this := SecurityPolicyPrincipalAccountRDPPrivilege{}
	this.Type = type_
	this.PrincipalAccountRdp = principalAccountRdp
	return &this
}

// NewSecurityPolicyPrincipalAccountRDPPrivilegeWithDefaults instantiates a new SecurityPolicyPrincipalAccountRDPPrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyPrincipalAccountRDPPrivilegeWithDefaults() *SecurityPolicyPrincipalAccountRDPPrivilege {
	this := SecurityPolicyPrincipalAccountRDPPrivilege{}
	return &this
}

// GetPrincipalAccountRdp returns the PrincipalAccountRdp field value
func (o *SecurityPolicyPrincipalAccountRDPPrivilege) GetPrincipalAccountRdp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PrincipalAccountRdp
}

// GetPrincipalAccountRdpOk returns a tuple with the PrincipalAccountRdp field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyPrincipalAccountRDPPrivilege) GetPrincipalAccountRdpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrincipalAccountRdp, true
}

// SetPrincipalAccountRdp sets field value
func (o *SecurityPolicyPrincipalAccountRDPPrivilege) SetPrincipalAccountRdp(v bool) *SecurityPolicyPrincipalAccountRDPPrivilege {
	o.PrincipalAccountRdp = v
	return o
}

// GetAdminLevelPermissions returns the AdminLevelPermissions field value if set, zero value otherwise.
func (o *SecurityPolicyPrincipalAccountRDPPrivilege) GetAdminLevelPermissions() bool {
	if o == nil || IsNil(o.AdminLevelPermissions) {
		var ret bool
		return ret
	}
	return *o.AdminLevelPermissions
}

// GetAdminLevelPermissionsOk returns a tuple with the AdminLevelPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyPrincipalAccountRDPPrivilege) GetAdminLevelPermissionsOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminLevelPermissions) {
		return nil, false
	}
	return o.AdminLevelPermissions, true
}

// HasAdminLevelPermissions returns a boolean if a field has been set.
func (o *SecurityPolicyPrincipalAccountRDPPrivilege) HasAdminLevelPermissions() bool {
	if o != nil && !IsNil(o.AdminLevelPermissions) {
		return true
	}

	return false
}

// SetAdminLevelPermissions gets a reference to the given bool and assigns it to the AdminLevelPermissions field.
func (o *SecurityPolicyPrincipalAccountRDPPrivilege) SetAdminLevelPermissions(v bool) *SecurityPolicyPrincipalAccountRDPPrivilege {
	o.AdminLevelPermissions = &v
	return o
}

func (o SecurityPolicyPrincipalAccountRDPPrivilege) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyPrincipalAccountRDPPrivilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSecurityPolicyPrivilege, errSecurityPolicyPrivilege := json.Marshal(o.SecurityPolicyPrivilege)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	errSecurityPolicyPrivilege = json.Unmarshal([]byte(serializedSecurityPolicyPrivilege), &toSerialize)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	toSerialize["principal_account_rdp"] = o.PrincipalAccountRdp
	if !IsNil(o.AdminLevelPermissions) {
		toSerialize["admin_level_permissions"] = o.AdminLevelPermissions
	}
	return toSerialize, nil
}

type NullableSecurityPolicyPrincipalAccountRDPPrivilege struct {
	value *SecurityPolicyPrincipalAccountRDPPrivilege
	isSet bool
}

func (v NullableSecurityPolicyPrincipalAccountRDPPrivilege) Get() *SecurityPolicyPrincipalAccountRDPPrivilege {
	return v.value
}

func (v *NullableSecurityPolicyPrincipalAccountRDPPrivilege) Set(val *SecurityPolicyPrincipalAccountRDPPrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyPrincipalAccountRDPPrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyPrincipalAccountRDPPrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyPrincipalAccountRDPPrivilege(val *SecurityPolicyPrincipalAccountRDPPrivilege) *NullableSecurityPolicyPrincipalAccountRDPPrivilege {
	return &NullableSecurityPolicyPrincipalAccountRDPPrivilege{value: val, isSet: true}
}

func (v NullableSecurityPolicyPrincipalAccountRDPPrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyPrincipalAccountRDPPrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
