/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SelectorServerLabelAccountSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectorServerLabelAccountSelector{}

// SelectorServerLabelAccountSelector Defines existing Server accounts available for use by the Principals
type SelectorServerLabelAccountSelector struct {
	// A list of Server accounts
	Usernames []string `json:"usernames,omitempty"`
}

// NewSelectorServerLabelAccountSelector instantiates a new SelectorServerLabelAccountSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorServerLabelAccountSelector() *SelectorServerLabelAccountSelector {
	this := SelectorServerLabelAccountSelector{}
	return &this
}

// NewSelectorServerLabelAccountSelectorWithDefaults instantiates a new SelectorServerLabelAccountSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorServerLabelAccountSelectorWithDefaults() *SelectorServerLabelAccountSelector {
	this := SelectorServerLabelAccountSelector{}
	return &this
}

// GetUsernames returns the Usernames field value if set, zero value otherwise.
func (o *SelectorServerLabelAccountSelector) GetUsernames() []string {
	if o == nil || IsNil(o.Usernames) {
		var ret []string
		return ret
	}
	return o.Usernames
}

// GetUsernamesOk returns a tuple with the Usernames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorServerLabelAccountSelector) GetUsernamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Usernames) {
		return nil, false
	}
	return o.Usernames, true
}

// HasUsernames returns a boolean if a field has been set.
func (o *SelectorServerLabelAccountSelector) HasUsernames() bool {
	if o != nil && !IsNil(o.Usernames) {
		return true
	}

	return false
}

// SetUsernames gets a reference to the given []string and assigns it to the Usernames field.
func (o *SelectorServerLabelAccountSelector) SetUsernames(v []string) *SelectorServerLabelAccountSelector {
	o.Usernames = v
	return o
}

func (o SelectorServerLabelAccountSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectorServerLabelAccountSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Usernames) {
		toSerialize["usernames"] = o.Usernames
	}
	return toSerialize, nil
}

type NullableSelectorServerLabelAccountSelector struct {
	value *SelectorServerLabelAccountSelector
	isSet bool
}

func (v NullableSelectorServerLabelAccountSelector) Get() *SelectorServerLabelAccountSelector {
	return v.value
}

func (v *NullableSelectorServerLabelAccountSelector) Set(val *SelectorServerLabelAccountSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorServerLabelAccountSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorServerLabelAccountSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorServerLabelAccountSelector(val *SelectorServerLabelAccountSelector) *NullableSelectorServerLabelAccountSelector {
	return &NullableSelectorServerLabelAccountSelector{value: val, isSet: true}
}

func (v NullableSelectorServerLabelAccountSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorServerLabelAccountSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
