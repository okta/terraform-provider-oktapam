/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// SelectorServerLabelAccountSelector - struct for SelectorServerLabelAccountSelector
type SelectorServerLabelAccountSelector struct {
	SecurityPolicyNoneAccountSelector     *SecurityPolicyNoneAccountSelector
	SecurityPolicyUsernameAccountSelector *SecurityPolicyUsernameAccountSelector
}

// SecurityPolicyNoneAccountSelectorAsSelectorServerLabelAccountSelector is a convenience function that returns SecurityPolicyNoneAccountSelector wrapped in SelectorServerLabelAccountSelector
func SecurityPolicyNoneAccountSelectorAsSelectorServerLabelAccountSelector(v *SecurityPolicyNoneAccountSelector) SelectorServerLabelAccountSelector {
	return SelectorServerLabelAccountSelector{
		SecurityPolicyNoneAccountSelector: v,
	}
}

// SecurityPolicyUsernameAccountSelectorAsSelectorServerLabelAccountSelector is a convenience function that returns SecurityPolicyUsernameAccountSelector wrapped in SelectorServerLabelAccountSelector
func SecurityPolicyUsernameAccountSelectorAsSelectorServerLabelAccountSelector(v *SecurityPolicyUsernameAccountSelector) SelectorServerLabelAccountSelector {
	return SelectorServerLabelAccountSelector{
		SecurityPolicyUsernameAccountSelector: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SelectorServerLabelAccountSelector) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'SecurityPolicyNoneAccountSelector'
	if jsonDict["_type"] == "SecurityPolicyNoneAccountSelector" {
		// try to unmarshal JSON data into SecurityPolicyNoneAccountSelector
		err = json.Unmarshal(data, &dst.SecurityPolicyNoneAccountSelector)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyNoneAccountSelector, return on the first match
		} else {
			dst.SecurityPolicyNoneAccountSelector = nil
			return fmt.Errorf("failed to unmarshal SelectorServerLabelAccountSelector as SecurityPolicyNoneAccountSelector: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SecurityPolicyUsernameAccountSelector'
	if jsonDict["_type"] == "SecurityPolicyUsernameAccountSelector" {
		// try to unmarshal JSON data into SecurityPolicyUsernameAccountSelector
		err = json.Unmarshal(data, &dst.SecurityPolicyUsernameAccountSelector)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyUsernameAccountSelector, return on the first match
		} else {
			dst.SecurityPolicyUsernameAccountSelector = nil
			return fmt.Errorf("failed to unmarshal SelectorServerLabelAccountSelector as SecurityPolicyUsernameAccountSelector: %s", err.Error())
		}
	}

	// check if the discriminator value is 'none'
	if jsonDict["_type"] == "none" {
		// try to unmarshal JSON data into SecurityPolicyNoneAccountSelector
		err = json.Unmarshal(data, &dst.SecurityPolicyNoneAccountSelector)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyNoneAccountSelector, return on the first match
		} else {
			dst.SecurityPolicyNoneAccountSelector = nil
			return fmt.Errorf("failed to unmarshal SelectorServerLabelAccountSelector as SecurityPolicyNoneAccountSelector: %s", err.Error())
		}
	}

	// check if the discriminator value is 'username'
	if jsonDict["_type"] == "username" {
		// try to unmarshal JSON data into SecurityPolicyUsernameAccountSelector
		err = json.Unmarshal(data, &dst.SecurityPolicyUsernameAccountSelector)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyUsernameAccountSelector, return on the first match
		} else {
			dst.SecurityPolicyUsernameAccountSelector = nil
			return fmt.Errorf("failed to unmarshal SelectorServerLabelAccountSelector as SecurityPolicyUsernameAccountSelector: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SelectorServerLabelAccountSelector) MarshalJSON() ([]byte, error) {
	if src.SecurityPolicyNoneAccountSelector != nil {
		return json.Marshal(&src.SecurityPolicyNoneAccountSelector)
	}

	if src.SecurityPolicyUsernameAccountSelector != nil {
		return json.Marshal(&src.SecurityPolicyUsernameAccountSelector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SelectorServerLabelAccountSelector) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SecurityPolicyNoneAccountSelector != nil {
		return obj.SecurityPolicyNoneAccountSelector
	}

	if obj.SecurityPolicyUsernameAccountSelector != nil {
		return obj.SecurityPolicyUsernameAccountSelector
	}

	// all schemas are nil
	return nil
}

type NullableSelectorServerLabelAccountSelector struct {
	value *SelectorServerLabelAccountSelector
	isSet bool
}

func (v NullableSelectorServerLabelAccountSelector) Get() *SelectorServerLabelAccountSelector {
	return v.value
}

func (v *NullableSelectorServerLabelAccountSelector) Set(val *SelectorServerLabelAccountSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorServerLabelAccountSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorServerLabelAccountSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorServerLabelAccountSelector(val *SelectorServerLabelAccountSelector) *NullableSelectorServerLabelAccountSelector {
	return &NullableSelectorServerLabelAccountSelector{value: val, isSet: true}
}

func (v NullableSelectorServerLabelAccountSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorServerLabelAccountSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
