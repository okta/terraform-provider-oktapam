/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the IssueServiceTokenRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueServiceTokenRequestBody{}

// IssueServiceTokenRequestBody struct for IssueServiceTokenRequestBody
type IssueServiceTokenRequestBody struct {
	// The ID of the API key
	KeyId string `json:"key_id"`
	// The secret associated with the API key
	KeySecret string `json:"key_secret"`
}

// NewIssueServiceTokenRequestBody instantiates a new IssueServiceTokenRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueServiceTokenRequestBody(keyId string, keySecret string) *IssueServiceTokenRequestBody {
	this := IssueServiceTokenRequestBody{}
	this.KeyId = keyId
	this.KeySecret = keySecret
	return &this
}

// NewIssueServiceTokenRequestBodyWithDefaults instantiates a new IssueServiceTokenRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueServiceTokenRequestBodyWithDefaults() *IssueServiceTokenRequestBody {
	this := IssueServiceTokenRequestBody{}
	return &this
}

// GetKeyId returns the KeyId field value
func (o *IssueServiceTokenRequestBody) GetKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value
// and a boolean to check if the value has been set.
func (o *IssueServiceTokenRequestBody) GetKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyId, true
}

// SetKeyId sets field value
func (o *IssueServiceTokenRequestBody) SetKeyId(v string) *IssueServiceTokenRequestBody {
	o.KeyId = v
	return o
}

// GetKeySecret returns the KeySecret field value
func (o *IssueServiceTokenRequestBody) GetKeySecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeySecret
}

// GetKeySecretOk returns a tuple with the KeySecret field value
// and a boolean to check if the value has been set.
func (o *IssueServiceTokenRequestBody) GetKeySecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeySecret, true
}

// SetKeySecret sets field value
func (o *IssueServiceTokenRequestBody) SetKeySecret(v string) *IssueServiceTokenRequestBody {
	o.KeySecret = v
	return o
}

func (o IssueServiceTokenRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueServiceTokenRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key_id"] = o.KeyId
	toSerialize["key_secret"] = o.KeySecret
	return toSerialize, nil
}

type NullableIssueServiceTokenRequestBody struct {
	value *IssueServiceTokenRequestBody
	isSet bool
}

func (v NullableIssueServiceTokenRequestBody) Get() *IssueServiceTokenRequestBody {
	return v.value
}

func (v *NullableIssueServiceTokenRequestBody) Set(val *IssueServiceTokenRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueServiceTokenRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueServiceTokenRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueServiceTokenRequestBody(val *IssueServiceTokenRequestBody) *NullableIssueServiceTokenRequestBody {
	return &NullableIssueServiceTokenRequestBody{value: val, isSet: true}
}

func (v NullableIssueServiceTokenRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueServiceTokenRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
