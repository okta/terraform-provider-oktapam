/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// TeamUserAttributeAttributeValue - struct for TeamUserAttributeAttributeValue
type TeamUserAttributeAttributeValue struct {
	Int32  *int32
	String *string
}

// int32AsTeamUserAttributeAttributeValue is a convenience function that returns int32 wrapped in TeamUserAttributeAttributeValue
func Int32AsTeamUserAttributeAttributeValue(v *int32) TeamUserAttributeAttributeValue {
	return TeamUserAttributeAttributeValue{
		Int32: v,
	}
}

// stringAsTeamUserAttributeAttributeValue is a convenience function that returns string wrapped in TeamUserAttributeAttributeValue
func StringAsTeamUserAttributeAttributeValue(v *string) TeamUserAttributeAttributeValue {
	return TeamUserAttributeAttributeValue{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TeamUserAttributeAttributeValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Int32
	err = json.Unmarshal(data, &dst.Int32)
	if err == nil {
		jsonint32, _ := json.Marshal(dst.Int32)
		if string(jsonint32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			match++
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.String)
		if string(jsonstring) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Int32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TeamUserAttributeAttributeValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TeamUserAttributeAttributeValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TeamUserAttributeAttributeValue) MarshalJSON() ([]byte, error) {
	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TeamUserAttributeAttributeValue) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableTeamUserAttributeAttributeValue struct {
	value *TeamUserAttributeAttributeValue
	isSet bool
}

func (v NullableTeamUserAttributeAttributeValue) Get() *TeamUserAttributeAttributeValue {
	return v.value
}

func (v *NullableTeamUserAttributeAttributeValue) Set(val *TeamUserAttributeAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamUserAttributeAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamUserAttributeAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamUserAttributeAttributeValue(val *TeamUserAttributeAttributeValue) *NullableTeamUserAttributeAttributeValue {
	return &NullableTeamUserAttributeAttributeValue{value: val, isSet: true}
}

func (v NullableTeamUserAttributeAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamUserAttributeAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
