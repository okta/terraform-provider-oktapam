/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryAccountMatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAccountMatchRequest{}

// ActiveDirectoryAccountMatchRequest Details about how the resource administrator would like to update the match between an Active Directory account and an Okta Privileged Access user
type ActiveDirectoryAccountMatchRequest struct {
	// The resource admin OPA user ID that you want to match to the specified AD account. If this property is null, empty, or unset, any existing override on the AD account is removed. You can only set one of `match_override_user_id` or `force_no_match`.
	MatchOverrideUserId *string `json:"match_override_user_id,omitempty"`
	// If true, don't match an OPA user to this Active Directory account. If `match_override_user_id` is set, this property must be unset or false.
	ForceNoMatch *bool `json:"force_no_match,omitempty"`
}

// NewActiveDirectoryAccountMatchRequest instantiates a new ActiveDirectoryAccountMatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAccountMatchRequest() *ActiveDirectoryAccountMatchRequest {
	this := ActiveDirectoryAccountMatchRequest{}
	return &this
}

// NewActiveDirectoryAccountMatchRequestWithDefaults instantiates a new ActiveDirectoryAccountMatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAccountMatchRequestWithDefaults() *ActiveDirectoryAccountMatchRequest {
	this := ActiveDirectoryAccountMatchRequest{}
	return &this
}

// GetMatchOverrideUserId returns the MatchOverrideUserId field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountMatchRequest) GetMatchOverrideUserId() string {
	if o == nil || IsNil(o.MatchOverrideUserId) {
		var ret string
		return ret
	}
	return *o.MatchOverrideUserId
}

// GetMatchOverrideUserIdOk returns a tuple with the MatchOverrideUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountMatchRequest) GetMatchOverrideUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.MatchOverrideUserId) {
		return nil, false
	}
	return o.MatchOverrideUserId, true
}

// HasMatchOverrideUserId returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountMatchRequest) HasMatchOverrideUserId() bool {
	if o != nil && !IsNil(o.MatchOverrideUserId) {
		return true
	}

	return false
}

// SetMatchOverrideUserId gets a reference to the given string and assigns it to the MatchOverrideUserId field.
func (o *ActiveDirectoryAccountMatchRequest) SetMatchOverrideUserId(v string) *ActiveDirectoryAccountMatchRequest {
	o.MatchOverrideUserId = &v
	return o
}

// GetForceNoMatch returns the ForceNoMatch field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountMatchRequest) GetForceNoMatch() bool {
	if o == nil || IsNil(o.ForceNoMatch) {
		var ret bool
		return ret
	}
	return *o.ForceNoMatch
}

// GetForceNoMatchOk returns a tuple with the ForceNoMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountMatchRequest) GetForceNoMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceNoMatch) {
		return nil, false
	}
	return o.ForceNoMatch, true
}

// HasForceNoMatch returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountMatchRequest) HasForceNoMatch() bool {
	if o != nil && !IsNil(o.ForceNoMatch) {
		return true
	}

	return false
}

// SetForceNoMatch gets a reference to the given bool and assigns it to the ForceNoMatch field.
func (o *ActiveDirectoryAccountMatchRequest) SetForceNoMatch(v bool) *ActiveDirectoryAccountMatchRequest {
	o.ForceNoMatch = &v
	return o
}

func (o ActiveDirectoryAccountMatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAccountMatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchOverrideUserId) {
		toSerialize["match_override_user_id"] = o.MatchOverrideUserId
	}
	if !IsNil(o.ForceNoMatch) {
		toSerialize["force_no_match"] = o.ForceNoMatch
	}
	return toSerialize, nil
}

type NullableActiveDirectoryAccountMatchRequest struct {
	value *ActiveDirectoryAccountMatchRequest
	isSet bool
}

func (v NullableActiveDirectoryAccountMatchRequest) Get() *ActiveDirectoryAccountMatchRequest {
	return v.value
}

func (v *NullableActiveDirectoryAccountMatchRequest) Set(val *ActiveDirectoryAccountMatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountMatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountMatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountMatchRequest(val *ActiveDirectoryAccountMatchRequest) *NullableActiveDirectoryAccountMatchRequest {
	return &NullableActiveDirectoryAccountMatchRequest{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountMatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountMatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
