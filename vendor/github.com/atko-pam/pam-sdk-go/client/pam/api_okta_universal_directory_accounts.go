/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OktaUniversalDirectoryAccountsAPIService OktaUniversalDirectoryAccountsAPI service
type OktaUniversalDirectoryAccountsAPIService service

type ApiListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminRequest struct {
	ctx             context.Context
	ApiService      *OktaUniversalDirectoryAccountsAPIService
	teamName        string
	resourceGroupId string
	contains        *string
}

// Only return results that include the specified value
func (r ApiListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminRequest) Contains(contains string) ApiListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminRequest {
	r.contains = &contains
	return r
}

func (r ApiListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminRequest) Execute() (*ListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminResponse, *http.Response, error) {
	return r.ApiService.ListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminExecute(r)
}

/*
	ListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdmin List all Okta Universal Directory Account in a Resource Group

	    Lists all Okta Universal Directory Accounts for the current Security Admin or Delegated Security Admin for the Resource Group

This endpoint requires one of the following roles: `security_admin`, `delegated_security_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	@return ApiListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminRequest
*/
func (a *OktaUniversalDirectoryAccountsAPIService) ListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdmin(ctx context.Context, teamName string, resourceGroupId string) ApiListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminRequest {
	return ApiListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return ListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminResponse
func (a *OktaUniversalDirectoryAccountsAPIService) ListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminExecute(r ApiListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminRequest) (*ListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminResponse, *http.Response, error) {
	var (
		traceKey            = "oktauniversaldirectoryaccountsapi.listAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdmin"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListAllOktaUniversalDirectoryAccountsForDelegatedSecurityAdminResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/all_okta_universal_directory_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contains", r.contains, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListAllOktaUniversalDirectoryAccountsForSecurityAdminRequest struct {
	ctx        context.Context
	ApiService *OktaUniversalDirectoryAccountsAPIService
	teamName   string
	contains   *string
}

// Only return results that include the specified value
func (r ApiListAllOktaUniversalDirectoryAccountsForSecurityAdminRequest) Contains(contains string) ApiListAllOktaUniversalDirectoryAccountsForSecurityAdminRequest {
	r.contains = &contains
	return r
}

func (r ApiListAllOktaUniversalDirectoryAccountsForSecurityAdminRequest) Execute() (*ListAllOktaUniversalDirectoryAccountsForSecurityAdminResponse, *http.Response, error) {
	return r.ApiService.ListAllOktaUniversalDirectoryAccountsForSecurityAdminExecute(r)
}

/*
	ListAllOktaUniversalDirectoryAccountsForSecurityAdmin List all Okta Universal Directory Accounts

	    Lists all Okta Universal Directory Accounts for the current Security Admin

This endpoint requires the following role: `security_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiListAllOktaUniversalDirectoryAccountsForSecurityAdminRequest
*/
func (a *OktaUniversalDirectoryAccountsAPIService) ListAllOktaUniversalDirectoryAccountsForSecurityAdmin(ctx context.Context, teamName string) ApiListAllOktaUniversalDirectoryAccountsForSecurityAdminRequest {
	return ApiListAllOktaUniversalDirectoryAccountsForSecurityAdminRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListAllOktaUniversalDirectoryAccountsForSecurityAdminResponse
func (a *OktaUniversalDirectoryAccountsAPIService) ListAllOktaUniversalDirectoryAccountsForSecurityAdminExecute(r ApiListAllOktaUniversalDirectoryAccountsForSecurityAdminRequest) (*ListAllOktaUniversalDirectoryAccountsForSecurityAdminResponse, *http.Response, error) {
	var (
		traceKey            = "oktauniversaldirectoryaccountsapi.listAllOktaUniversalDirectoryAccountsForSecurityAdmin"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListAllOktaUniversalDirectoryAccountsForSecurityAdminResponse
	)

	localVarPath := "/v1/teams/{team_name}/all_okta_universal_directory_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contains", r.contains, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListResourceGroupProjectOktaUniversalDirectoryAccountsRequest struct {
	ctx             context.Context
	ApiService      *OktaUniversalDirectoryAccountsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	contains        *string
}

// Only return results that include the specified value
func (r ApiListResourceGroupProjectOktaUniversalDirectoryAccountsRequest) Contains(contains string) ApiListResourceGroupProjectOktaUniversalDirectoryAccountsRequest {
	r.contains = &contains
	return r
}

func (r ApiListResourceGroupProjectOktaUniversalDirectoryAccountsRequest) Execute() (*ListResourceGroupProjectOktaUniversalDirectoryAccountsResponse, *http.Response, error) {
	return r.ApiService.ListResourceGroupProjectOktaUniversalDirectoryAccountsExecute(r)
}

/*
	ListResourceGroupProjectOktaUniversalDirectoryAccounts List all Okta Universal Directory Accounts in a Project

	    Lists all Okta Universal Directory Accounts in a Project in a Resource Group.

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiListResourceGroupProjectOktaUniversalDirectoryAccountsRequest
*/
func (a *OktaUniversalDirectoryAccountsAPIService) ListResourceGroupProjectOktaUniversalDirectoryAccounts(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiListResourceGroupProjectOktaUniversalDirectoryAccountsRequest {
	return ApiListResourceGroupProjectOktaUniversalDirectoryAccountsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ListResourceGroupProjectOktaUniversalDirectoryAccountsResponse
func (a *OktaUniversalDirectoryAccountsAPIService) ListResourceGroupProjectOktaUniversalDirectoryAccountsExecute(r ApiListResourceGroupProjectOktaUniversalDirectoryAccountsRequest) (*ListResourceGroupProjectOktaUniversalDirectoryAccountsResponse, *http.Response, error) {
	var (
		traceKey            = "oktauniversaldirectoryaccountsapi.listResourceGroupProjectOktaUniversalDirectoryAccounts"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListResourceGroupProjectOktaUniversalDirectoryAccountsResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/okta_universal_directory_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contains", r.contains, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListUAMForOktaUDAccountRequest struct {
	ctx                             context.Context
	ApiService                      *OktaUniversalDirectoryAccountsAPIService
	teamName                        string
	oktaUniversalDirectoryAccountId string
}

func (r ApiListUAMForOktaUDAccountRequest) Execute() (*ListUAMForServiceAccountResponse, *http.Response, error) {
	return r.ApiService.ListUAMForOktaUDAccountExecute(r)
}

/*
	ListUAMForOktaUDAccount List user access methods for Okta Universal Directory account

	    List user access methods for Okta Universal Directory account based on the security policies

This endpoint requires the following role: `end_user`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param oktaUniversalDirectoryAccountId The UUID of an Okta Universal Directory Account
	@return ApiListUAMForOktaUDAccountRequest
*/
func (a *OktaUniversalDirectoryAccountsAPIService) ListUAMForOktaUDAccount(ctx context.Context, teamName string, oktaUniversalDirectoryAccountId string) ApiListUAMForOktaUDAccountRequest {
	return ApiListUAMForOktaUDAccountRequest{
		ApiService:                      a,
		ctx:                             ctx,
		teamName:                        teamName,
		oktaUniversalDirectoryAccountId: oktaUniversalDirectoryAccountId,
	}
}

// Execute executes the request
//
//	@return ListUAMForServiceAccountResponse
func (a *OktaUniversalDirectoryAccountsAPIService) ListUAMForOktaUDAccountExecute(r ApiListUAMForOktaUDAccountRequest) (*ListUAMForServiceAccountResponse, *http.Response, error) {
	var (
		traceKey            = "oktauniversaldirectoryaccountsapi.listUAMForOktaUDAccount"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListUAMForServiceAccountResponse
	)

	localVarPath := "/v1/teams/{team_name}/okta_universal_directory_accounts/{okta_universal_directory_account_id}/user_access_methods"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"okta_universal_directory_account_id"+"}", url.PathEscape(parameterValueToString(r.oktaUniversalDirectoryAccountId, "oktaUniversalDirectoryAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiRevealOktaUniversalDirectoryAccountPasswordRequest struct {
	ctx                             context.Context
	ApiService                      *OktaUniversalDirectoryAccountsAPIService
	teamName                        string
	oktaUniversalDirectoryAccountId string
	body                            *ServiceAccountsRevealCredentialsRequest
}

func (r ApiRevealOktaUniversalDirectoryAccountPasswordRequest) Body(body ServiceAccountsRevealCredentialsRequest) ApiRevealOktaUniversalDirectoryAccountPasswordRequest {
	r.body = &body
	return r
}

func (r ApiRevealOktaUniversalDirectoryAccountPasswordRequest) Execute() (*ServiceAccountsRevealCredentialsResponse, *http.Response, error) {
	return r.ApiService.RevealOktaUniversalDirectoryAccountPasswordExecute(r)
}

/*
	RevealOktaUniversalDirectoryAccountPassword Reveal the password for Okta Universal Directory Account.

	    Reveals the password belonging to a Okta Universal Directory Account (managed & unmanaged) that the end user has access to.

This endpoint requires one of the following roles: `end_user`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param oktaUniversalDirectoryAccountId The UUID of an Okta Universal Directory Account
	@return ApiRevealOktaUniversalDirectoryAccountPasswordRequest
*/
func (a *OktaUniversalDirectoryAccountsAPIService) RevealOktaUniversalDirectoryAccountPassword(ctx context.Context, teamName string, oktaUniversalDirectoryAccountId string) ApiRevealOktaUniversalDirectoryAccountPasswordRequest {
	return ApiRevealOktaUniversalDirectoryAccountPasswordRequest{
		ApiService:                      a,
		ctx:                             ctx,
		teamName:                        teamName,
		oktaUniversalDirectoryAccountId: oktaUniversalDirectoryAccountId,
	}
}

// Execute executes the request
//
//	@return ServiceAccountsRevealCredentialsResponse
func (a *OktaUniversalDirectoryAccountsAPIService) RevealOktaUniversalDirectoryAccountPasswordExecute(r ApiRevealOktaUniversalDirectoryAccountPasswordRequest) (*ServiceAccountsRevealCredentialsResponse, *http.Response, error) {
	var (
		traceKey            = "oktauniversaldirectoryaccountsapi.revealOktaUniversalDirectoryAccountPassword"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccountsRevealCredentialsResponse
	)

	localVarPath := "/v1/teams/{team_name}/okta_universal_directory_accounts/{okta_universal_directory_account_id}/reveal_credentials"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"okta_universal_directory_account_id"+"}", url.PathEscape(parameterValueToString(r.oktaUniversalDirectoryAccountId, "oktaUniversalDirectoryAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		if localVarHTTPResponse.StatusCode == 401 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v UnauthorizedAccessResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return nil, localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return nil, localVarHTTPResponse, nonDefaultResponse

		}
		if localVarHTTPResponse.StatusCode == 404 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v NotFoundResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return nil, localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return nil, localVarHTTPResponse, nonDefaultResponse

		}
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
