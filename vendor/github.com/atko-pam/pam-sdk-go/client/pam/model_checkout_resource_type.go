/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// CheckoutResourceType The type of resource that was checked out
type CheckoutResourceType string

// List of CheckoutResourceType
const (
	CheckoutResourceType_SERVER_ACCOUNT_PASSWORD_LOGIN CheckoutResourceType = "server_account_password_login"
)

// All allowed values of CheckoutResourceType enum
var AllowedCheckoutResourceTypeEnumValues = []CheckoutResourceType{
	"server_account_password_login",
}

func (v *CheckoutResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CheckoutResourceType(value)

	*v = enumTypeValue

	return nil
}

// NewCheckoutResourceTypeFromValue returns a pointer to a valid CheckoutResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCheckoutResourceTypeFromValue(v string) (*CheckoutResourceType, error) {
	ev := CheckoutResourceType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CheckoutResourceType) IsValid() bool {
	for _, existing := range AllowedCheckoutResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CheckoutResourceType value
func (v CheckoutResourceType) Ptr() *CheckoutResourceType {
	return &v
}

type NullableCheckoutResourceType struct {
	value *CheckoutResourceType
	isSet bool
}

func (v NullableCheckoutResourceType) Get() *CheckoutResourceType {
	return v.value
}

func (v *NullableCheckoutResourceType) Set(val *CheckoutResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutResourceType(val *CheckoutResourceType) *NullableCheckoutResourceType {
	return &NullableCheckoutResourceType{value: val, isSet: true}
}

func (v NullableCheckoutResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
