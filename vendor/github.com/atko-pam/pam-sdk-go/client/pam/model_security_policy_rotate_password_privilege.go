/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRotatePasswordPrivilege type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRotatePasswordPrivilege{}

// SecurityPolicyRotatePasswordPrivilege Privilege to grant access to rotate the password of an account
type SecurityPolicyRotatePasswordPrivilege struct {
	SecurityPolicyPrivilege
	// If enabled, grants access to rotate the password
	RotatePassword bool `json:"rotate_password"`
}

// NewSecurityPolicyRotatePasswordPrivilege instantiates a new SecurityPolicyRotatePasswordPrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRotatePasswordPrivilege(rotatePassword bool, type_ SecurityPolicyRulePrivilegeType) *SecurityPolicyRotatePasswordPrivilege {
	this := SecurityPolicyRotatePasswordPrivilege{}
	this.Type = type_
	this.RotatePassword = rotatePassword
	return &this
}

// NewSecurityPolicyRotatePasswordPrivilegeWithDefaults instantiates a new SecurityPolicyRotatePasswordPrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRotatePasswordPrivilegeWithDefaults() *SecurityPolicyRotatePasswordPrivilege {
	this := SecurityPolicyRotatePasswordPrivilege{}
	return &this
}

// GetRotatePassword returns the RotatePassword field value
func (o *SecurityPolicyRotatePasswordPrivilege) GetRotatePassword() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RotatePassword
}

// GetRotatePasswordOk returns a tuple with the RotatePassword field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRotatePasswordPrivilege) GetRotatePasswordOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RotatePassword, true
}

// SetRotatePassword sets field value
func (o *SecurityPolicyRotatePasswordPrivilege) SetRotatePassword(v bool) *SecurityPolicyRotatePasswordPrivilege {
	o.RotatePassword = v
	return o
}

func (o SecurityPolicyRotatePasswordPrivilege) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRotatePasswordPrivilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSecurityPolicyPrivilege, errSecurityPolicyPrivilege := json.Marshal(o.SecurityPolicyPrivilege)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	errSecurityPolicyPrivilege = json.Unmarshal([]byte(serializedSecurityPolicyPrivilege), &toSerialize)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	toSerialize["rotate_password"] = o.RotatePassword
	return toSerialize, nil
}

type NullableSecurityPolicyRotatePasswordPrivilege struct {
	value *SecurityPolicyRotatePasswordPrivilege
	isSet bool
}

func (v NullableSecurityPolicyRotatePasswordPrivilege) Get() *SecurityPolicyRotatePasswordPrivilege {
	return v.value
}

func (v *NullableSecurityPolicyRotatePasswordPrivilege) Set(val *SecurityPolicyRotatePasswordPrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRotatePasswordPrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRotatePasswordPrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRotatePasswordPrivilege(val *SecurityPolicyRotatePasswordPrivilege) *NullableSecurityPolicyRotatePasswordPrivilege {
	return &NullableSecurityPolicyRotatePasswordPrivilege{value: val, isSet: true}
}

func (v NullableSecurityPolicyRotatePasswordPrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRotatePasswordPrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
