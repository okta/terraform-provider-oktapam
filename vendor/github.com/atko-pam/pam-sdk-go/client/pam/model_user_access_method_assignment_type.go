/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// UserAccessMethodAssignmentType The type of identity assignment that grants the user access to the resource
type UserAccessMethodAssignmentType string

// List of UserAccessMethodAssignmentType
const (
	UserAccessMethodAssignmentType_INDIVIDUAL UserAccessMethodAssignmentType = "INDIVIDUAL"
	UserAccessMethodAssignmentType_SHARED     UserAccessMethodAssignmentType = "SHARED"
)

// All allowed values of UserAccessMethodAssignmentType enum
var AllowedUserAccessMethodAssignmentTypeEnumValues = []UserAccessMethodAssignmentType{
	"INDIVIDUAL",
	"SHARED",
}

func (v *UserAccessMethodAssignmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserAccessMethodAssignmentType(value)

	*v = enumTypeValue

	return nil
}

// NewUserAccessMethodAssignmentTypeFromValue returns a pointer to a valid UserAccessMethodAssignmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserAccessMethodAssignmentTypeFromValue(v string) (*UserAccessMethodAssignmentType, error) {
	ev := UserAccessMethodAssignmentType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserAccessMethodAssignmentType) IsValid() bool {
	for _, existing := range AllowedUserAccessMethodAssignmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserAccessMethodAssignmentType value
func (v UserAccessMethodAssignmentType) Ptr() *UserAccessMethodAssignmentType {
	return &v
}

type NullableUserAccessMethodAssignmentType struct {
	value *UserAccessMethodAssignmentType
	isSet bool
}

func (v NullableUserAccessMethodAssignmentType) Get() *UserAccessMethodAssignmentType {
	return v.value
}

func (v *NullableUserAccessMethodAssignmentType) Set(val *UserAccessMethodAssignmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccessMethodAssignmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccessMethodAssignmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccessMethodAssignmentType(val *UserAccessMethodAssignmentType) *NullableUserAccessMethodAssignmentType {
	return &NullableUserAccessMethodAssignmentType{value: val, isSet: true}
}

func (v NullableUserAccessMethodAssignmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccessMethodAssignmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
