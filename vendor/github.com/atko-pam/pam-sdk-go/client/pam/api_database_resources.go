/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DatabaseResourcesAPIService DatabaseResourcesAPI service
type DatabaseResourcesAPIService service

type ApiCreateDatabaseResourceRequest struct {
	ctx                                   context.Context
	ApiService                            *DatabaseResourcesAPIService
	teamName                              string
	resourceGroupId                       string
	projectId                             string
	databaseResourceCreateOrUpdateRequest *DatabaseResourceCreateOrUpdateRequest
}

func (r ApiCreateDatabaseResourceRequest) DatabaseResourceCreateOrUpdateRequest(databaseResourceCreateOrUpdateRequest DatabaseResourceCreateOrUpdateRequest) ApiCreateDatabaseResourceRequest {
	r.databaseResourceCreateOrUpdateRequest = &databaseResourceCreateOrUpdateRequest
	return r
}

func (r ApiCreateDatabaseResourceRequest) Execute() (*DatabaseResourceResponse, *http.Response, error) {
	return r.ApiService.CreateDatabaseResourceExecute(r)
}

/*
	CreateDatabaseResource Create a Database Resource

	    Creates a Database Resource in a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiCreateDatabaseResourceRequest
*/
func (a *DatabaseResourcesAPIService) CreateDatabaseResource(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiCreateDatabaseResourceRequest {
	return ApiCreateDatabaseResourceRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return DatabaseResourceResponse
func (a *DatabaseResourcesAPIService) CreateDatabaseResourceExecute(r ApiCreateDatabaseResourceRequest) (*DatabaseResourceResponse, *http.Response, error) {
	var (
		traceKey            = "databaseresourcesapi.createDatabaseResource"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DatabaseResourceResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resources"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.databaseResourceCreateOrUpdateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiCreateDatabaseStaticAccountRequest struct {
	ctx                                                context.Context
	ApiService                                         *DatabaseResourcesAPIService
	teamName                                           string
	resourceGroupId                                    string
	projectId                                          string
	databaseResourceId                                 string
	databaseResourceStaticAccountCreateOrUpdateRequest *DatabaseResourceStaticAccountCreateOrUpdateRequest
}

func (r ApiCreateDatabaseStaticAccountRequest) DatabaseResourceStaticAccountCreateOrUpdateRequest(databaseResourceStaticAccountCreateOrUpdateRequest DatabaseResourceStaticAccountCreateOrUpdateRequest) ApiCreateDatabaseStaticAccountRequest {
	r.databaseResourceStaticAccountCreateOrUpdateRequest = &databaseResourceStaticAccountCreateOrUpdateRequest
	return r
}

func (r ApiCreateDatabaseStaticAccountRequest) Execute() (*DatabaseResourceStaticAccountResponse, *http.Response, error) {
	return r.ApiService.CreateDatabaseStaticAccountExecute(r)
}

/*
	CreateDatabaseStaticAccount Create a Database Static Account

	    Creates a Database Static Account for a Database Resource in a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param databaseResourceId The UUID of a Database Resource
	@return ApiCreateDatabaseStaticAccountRequest
*/
func (a *DatabaseResourcesAPIService) CreateDatabaseStaticAccount(ctx context.Context, teamName string, resourceGroupId string, projectId string, databaseResourceId string) ApiCreateDatabaseStaticAccountRequest {
	return ApiCreateDatabaseStaticAccountRequest{
		ApiService:         a,
		ctx:                ctx,
		teamName:           teamName,
		resourceGroupId:    resourceGroupId,
		projectId:          projectId,
		databaseResourceId: databaseResourceId,
	}
}

// Execute executes the request
//
//	@return DatabaseResourceStaticAccountResponse
func (a *DatabaseResourcesAPIService) CreateDatabaseStaticAccountExecute(r ApiCreateDatabaseStaticAccountRequest) (*DatabaseResourceStaticAccountResponse, *http.Response, error) {
	var (
		traceKey            = "databaseresourcesapi.createDatabaseStaticAccount"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DatabaseResourceStaticAccountResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resources/{database_resource_id}/static_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_resource_id"+"}", url.PathEscape(parameterValueToString(r.databaseResourceId, "databaseResourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.databaseResourceStaticAccountCreateOrUpdateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiDeleteDatabaseResourceRequest struct {
	ctx                context.Context
	ApiService         *DatabaseResourcesAPIService
	teamName           string
	resourceGroupId    string
	projectId          string
	databaseResourceId string
}

func (r ApiDeleteDatabaseResourceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDatabaseResourceExecute(r)
}

/*
	DeleteDatabaseResource Delete a Database Resource

	    Deletes a Database Resource from a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param databaseResourceId The UUID of a Database Resource
	@return ApiDeleteDatabaseResourceRequest
*/
func (a *DatabaseResourcesAPIService) DeleteDatabaseResource(ctx context.Context, teamName string, resourceGroupId string, projectId string, databaseResourceId string) ApiDeleteDatabaseResourceRequest {
	return ApiDeleteDatabaseResourceRequest{
		ApiService:         a,
		ctx:                ctx,
		teamName:           teamName,
		resourceGroupId:    resourceGroupId,
		projectId:          projectId,
		databaseResourceId: databaseResourceId,
	}
}

// Execute executes the request
func (a *DatabaseResourcesAPIService) DeleteDatabaseResourceExecute(r ApiDeleteDatabaseResourceRequest) (*http.Response, error) {
	var (
		traceKey           = "databaseresourcesapi.deleteDatabaseResource"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resources/{database_resource_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_resource_id"+"}", url.PathEscape(parameterValueToString(r.databaseResourceId, "databaseResourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiDeleteDatabaseStaticAccountRequest struct {
	ctx                context.Context
	ApiService         *DatabaseResourcesAPIService
	teamName           string
	resourceGroupId    string
	projectId          string
	databaseResourceId string
	staticAccountId    string
}

func (r ApiDeleteDatabaseStaticAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDatabaseStaticAccountExecute(r)
}

/*
	DeleteDatabaseStaticAccount Delete a Database Static Account

	    Deletes a Database Static Account for a Database Resource in a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param databaseResourceId The UUID of a Database Resource
	    @param staticAccountId The UUID of a Database Static Account
	@return ApiDeleteDatabaseStaticAccountRequest
*/
func (a *DatabaseResourcesAPIService) DeleteDatabaseStaticAccount(ctx context.Context, teamName string, resourceGroupId string, projectId string, databaseResourceId string, staticAccountId string) ApiDeleteDatabaseStaticAccountRequest {
	return ApiDeleteDatabaseStaticAccountRequest{
		ApiService:         a,
		ctx:                ctx,
		teamName:           teamName,
		resourceGroupId:    resourceGroupId,
		projectId:          projectId,
		databaseResourceId: databaseResourceId,
		staticAccountId:    staticAccountId,
	}
}

// Execute executes the request
func (a *DatabaseResourcesAPIService) DeleteDatabaseStaticAccountExecute(r ApiDeleteDatabaseStaticAccountRequest) (*http.Response, error) {
	var (
		traceKey           = "databaseresourcesapi.deleteDatabaseStaticAccount"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resources/{database_resource_id}/static_accounts/{static_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_resource_id"+"}", url.PathEscape(parameterValueToString(r.databaseResourceId, "databaseResourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"static_account_id"+"}", url.PathEscape(parameterValueToString(r.staticAccountId, "staticAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiGetDatabaseResourceRequest struct {
	ctx                context.Context
	ApiService         *DatabaseResourcesAPIService
	teamName           string
	resourceGroupId    string
	projectId          string
	databaseResourceId string
}

func (r ApiGetDatabaseResourceRequest) Execute() (*DatabaseResourceResponse, *http.Response, error) {
	return r.ApiService.GetDatabaseResourceExecute(r)
}

/*
	GetDatabaseResource Retrieve a Database Resource

	    Retrieves a Database Resource from a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param databaseResourceId The UUID of a Database Resource
	@return ApiGetDatabaseResourceRequest
*/
func (a *DatabaseResourcesAPIService) GetDatabaseResource(ctx context.Context, teamName string, resourceGroupId string, projectId string, databaseResourceId string) ApiGetDatabaseResourceRequest {
	return ApiGetDatabaseResourceRequest{
		ApiService:         a,
		ctx:                ctx,
		teamName:           teamName,
		resourceGroupId:    resourceGroupId,
		projectId:          projectId,
		databaseResourceId: databaseResourceId,
	}
}

// Execute executes the request
//
//	@return DatabaseResourceResponse
func (a *DatabaseResourcesAPIService) GetDatabaseResourceExecute(r ApiGetDatabaseResourceRequest) (*DatabaseResourceResponse, *http.Response, error) {
	var (
		traceKey            = "databaseresourcesapi.getDatabaseResource"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DatabaseResourceResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resources/{database_resource_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_resource_id"+"}", url.PathEscape(parameterValueToString(r.databaseResourceId, "databaseResourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetDatabaseStaticAccountRequest struct {
	ctx                context.Context
	ApiService         *DatabaseResourcesAPIService
	teamName           string
	resourceGroupId    string
	projectId          string
	databaseResourceId string
	staticAccountId    string
}

func (r ApiGetDatabaseStaticAccountRequest) Execute() (*DatabaseResourceStaticAccountResponse, *http.Response, error) {
	return r.ApiService.GetDatabaseStaticAccountExecute(r)
}

/*
	GetDatabaseStaticAccount Retrieve a Database Static Account

	    Retrieves a Database Static Account for a Database Resource in a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param databaseResourceId The UUID of a Database Resource
	    @param staticAccountId The UUID of a Database Static Account
	@return ApiGetDatabaseStaticAccountRequest
*/
func (a *DatabaseResourcesAPIService) GetDatabaseStaticAccount(ctx context.Context, teamName string, resourceGroupId string, projectId string, databaseResourceId string, staticAccountId string) ApiGetDatabaseStaticAccountRequest {
	return ApiGetDatabaseStaticAccountRequest{
		ApiService:         a,
		ctx:                ctx,
		teamName:           teamName,
		resourceGroupId:    resourceGroupId,
		projectId:          projectId,
		databaseResourceId: databaseResourceId,
		staticAccountId:    staticAccountId,
	}
}

// Execute executes the request
//
//	@return DatabaseResourceStaticAccountResponse
func (a *DatabaseResourcesAPIService) GetDatabaseStaticAccountExecute(r ApiGetDatabaseStaticAccountRequest) (*DatabaseResourceStaticAccountResponse, *http.Response, error) {
	var (
		traceKey            = "databaseresourcesapi.getDatabaseStaticAccount"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DatabaseResourceStaticAccountResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resources/{database_resource_id}/static_accounts/{static_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_resource_id"+"}", url.PathEscape(parameterValueToString(r.databaseResourceId, "databaseResourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"static_account_id"+"}", url.PathEscape(parameterValueToString(r.staticAccountId, "staticAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListDatabaseStaticAccountsRequest struct {
	ctx                context.Context
	ApiService         *DatabaseResourcesAPIService
	teamName           string
	resourceGroupId    string
	projectId          string
	databaseResourceId string
}

func (r ApiListDatabaseStaticAccountsRequest) Execute() (*ListDatabaseStaticAccountsResponse, *http.Response, error) {
	return r.ApiService.ListDatabaseStaticAccountsExecute(r)
}

/*
	ListDatabaseStaticAccounts List all Database Static Accounts

	    Lists all Database Static Accounts for a Database Resource in a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param databaseResourceId The UUID of a Database Resource
	@return ApiListDatabaseStaticAccountsRequest
*/
func (a *DatabaseResourcesAPIService) ListDatabaseStaticAccounts(ctx context.Context, teamName string, resourceGroupId string, projectId string, databaseResourceId string) ApiListDatabaseStaticAccountsRequest {
	return ApiListDatabaseStaticAccountsRequest{
		ApiService:         a,
		ctx:                ctx,
		teamName:           teamName,
		resourceGroupId:    resourceGroupId,
		projectId:          projectId,
		databaseResourceId: databaseResourceId,
	}
}

// Execute executes the request
//
//	@return ListDatabaseStaticAccountsResponse
func (a *DatabaseResourcesAPIService) ListDatabaseStaticAccountsExecute(r ApiListDatabaseStaticAccountsRequest) (*ListDatabaseStaticAccountsResponse, *http.Response, error) {
	var (
		traceKey            = "databaseresourcesapi.listDatabaseStaticAccounts"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListDatabaseStaticAccountsResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resources/{database_resource_id}/static_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_resource_id"+"}", url.PathEscape(parameterValueToString(r.databaseResourceId, "databaseResourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateDatabaseResourceRequest struct {
	ctx                                   context.Context
	ApiService                            *DatabaseResourcesAPIService
	teamName                              string
	resourceGroupId                       string
	projectId                             string
	databaseResourceId                    string
	databaseResourceCreateOrUpdateRequest *DatabaseResourceCreateOrUpdateRequest
}

func (r ApiUpdateDatabaseResourceRequest) DatabaseResourceCreateOrUpdateRequest(databaseResourceCreateOrUpdateRequest DatabaseResourceCreateOrUpdateRequest) ApiUpdateDatabaseResourceRequest {
	r.databaseResourceCreateOrUpdateRequest = &databaseResourceCreateOrUpdateRequest
	return r
}

func (r ApiUpdateDatabaseResourceRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateDatabaseResourceExecute(r)
}

/*
	UpdateDatabaseResource Update a Database Resource

	    Updates a Database Resource from a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param databaseResourceId The UUID of a Database Resource
	@return ApiUpdateDatabaseResourceRequest
*/
func (a *DatabaseResourcesAPIService) UpdateDatabaseResource(ctx context.Context, teamName string, resourceGroupId string, projectId string, databaseResourceId string) ApiUpdateDatabaseResourceRequest {
	return ApiUpdateDatabaseResourceRequest{
		ApiService:         a,
		ctx:                ctx,
		teamName:           teamName,
		resourceGroupId:    resourceGroupId,
		projectId:          projectId,
		databaseResourceId: databaseResourceId,
	}
}

// Execute executes the request
func (a *DatabaseResourcesAPIService) UpdateDatabaseResourceExecute(r ApiUpdateDatabaseResourceRequest) (*http.Response, error) {
	var (
		traceKey           = "databaseresourcesapi.updateDatabaseResource"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resources/{database_resource_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_resource_id"+"}", url.PathEscape(parameterValueToString(r.databaseResourceId, "databaseResourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.databaseResourceCreateOrUpdateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiUpdateDatabaseStaticAccountRequest struct {
	ctx                                                context.Context
	ApiService                                         *DatabaseResourcesAPIService
	teamName                                           string
	resourceGroupId                                    string
	projectId                                          string
	databaseResourceId                                 string
	staticAccountId                                    string
	databaseResourceStaticAccountCreateOrUpdateRequest *DatabaseResourceStaticAccountCreateOrUpdateRequest
}

func (r ApiUpdateDatabaseStaticAccountRequest) DatabaseResourceStaticAccountCreateOrUpdateRequest(databaseResourceStaticAccountCreateOrUpdateRequest DatabaseResourceStaticAccountCreateOrUpdateRequest) ApiUpdateDatabaseStaticAccountRequest {
	r.databaseResourceStaticAccountCreateOrUpdateRequest = &databaseResourceStaticAccountCreateOrUpdateRequest
	return r
}

func (r ApiUpdateDatabaseStaticAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateDatabaseStaticAccountExecute(r)
}

/*
	UpdateDatabaseStaticAccount Update a Database Static Account

	    Updates a Database Static Account for a Database Resource in a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param databaseResourceId The UUID of a Database Resource
	    @param staticAccountId The UUID of a Database Static Account
	@return ApiUpdateDatabaseStaticAccountRequest
*/
func (a *DatabaseResourcesAPIService) UpdateDatabaseStaticAccount(ctx context.Context, teamName string, resourceGroupId string, projectId string, databaseResourceId string, staticAccountId string) ApiUpdateDatabaseStaticAccountRequest {
	return ApiUpdateDatabaseStaticAccountRequest{
		ApiService:         a,
		ctx:                ctx,
		teamName:           teamName,
		resourceGroupId:    resourceGroupId,
		projectId:          projectId,
		databaseResourceId: databaseResourceId,
		staticAccountId:    staticAccountId,
	}
}

// Execute executes the request
func (a *DatabaseResourcesAPIService) UpdateDatabaseStaticAccountExecute(r ApiUpdateDatabaseStaticAccountRequest) (*http.Response, error) {
	var (
		traceKey           = "databaseresourcesapi.updateDatabaseStaticAccount"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resources/{database_resource_id}/static_accounts/{static_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_resource_id"+"}", url.PathEscape(parameterValueToString(r.databaseResourceId, "databaseResourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"static_account_id"+"}", url.PathEscape(parameterValueToString(r.staticAccountId, "staticAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.databaseResourceStaticAccountCreateOrUpdateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}
