/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SelectorActiveDirectoryServerLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectorActiveDirectoryServerLabel{}

// SelectorActiveDirectoryServerLabel This resource selector identifies every enrolled server that includes a matching label
type SelectorActiveDirectoryServerLabel struct {
	Type           string                                           `json:"_type"`
	ServerSelector SelectorActiveDirectoryServerLabelServerSelector `json:"server_selector"`
}

// NewSelectorActiveDirectoryServerLabel instantiates a new SelectorActiveDirectoryServerLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorActiveDirectoryServerLabel(type_ string, serverSelector SelectorActiveDirectoryServerLabelServerSelector) *SelectorActiveDirectoryServerLabel {
	this := SelectorActiveDirectoryServerLabel{}
	this.Type = type_
	this.ServerSelector = serverSelector
	return &this
}

// NewSelectorActiveDirectoryServerLabelWithDefaults instantiates a new SelectorActiveDirectoryServerLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorActiveDirectoryServerLabelWithDefaults() *SelectorActiveDirectoryServerLabel {
	this := SelectorActiveDirectoryServerLabel{}
	return &this
}

// GetType returns the Type field value
func (o *SelectorActiveDirectoryServerLabel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SelectorActiveDirectoryServerLabel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SelectorActiveDirectoryServerLabel) SetType(v string) *SelectorActiveDirectoryServerLabel {
	o.Type = v
	return o
}

// GetServerSelector returns the ServerSelector field value
func (o *SelectorActiveDirectoryServerLabel) GetServerSelector() SelectorActiveDirectoryServerLabelServerSelector {
	if o == nil {
		var ret SelectorActiveDirectoryServerLabelServerSelector
		return ret
	}

	return o.ServerSelector
}

// GetServerSelectorOk returns a tuple with the ServerSelector field value
// and a boolean to check if the value has been set.
func (o *SelectorActiveDirectoryServerLabel) GetServerSelectorOk() (*SelectorActiveDirectoryServerLabelServerSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerSelector, true
}

// SetServerSelector sets field value
func (o *SelectorActiveDirectoryServerLabel) SetServerSelector(v SelectorActiveDirectoryServerLabelServerSelector) *SelectorActiveDirectoryServerLabel {
	o.ServerSelector = v
	return o
}

func (o SelectorActiveDirectoryServerLabel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectorActiveDirectoryServerLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_type"] = o.Type
	toSerialize["server_selector"] = o.ServerSelector
	return toSerialize, nil
}

type NullableSelectorActiveDirectoryServerLabel struct {
	value *SelectorActiveDirectoryServerLabel
	isSet bool
}

func (v NullableSelectorActiveDirectoryServerLabel) Get() *SelectorActiveDirectoryServerLabel {
	return v.value
}

func (v *NullableSelectorActiveDirectoryServerLabel) Set(val *SelectorActiveDirectoryServerLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorActiveDirectoryServerLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorActiveDirectoryServerLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorActiveDirectoryServerLabel(val *SelectorActiveDirectoryServerLabel) *NullableSelectorActiveDirectoryServerLabel {
	return &NullableSelectorActiveDirectoryServerLabel{value: val, isSet: true}
}

func (v NullableSelectorActiveDirectoryServerLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorActiveDirectoryServerLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
