/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the Gce type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Gce{}

// Gce struct for Gce
type Gce struct {
	// Type of this object
	Type *string `json:"_type,omitempty"`
	// IP Address
	ExternalIp *string `json:"external_ip,omitempty"`
	InstanceId string  `json:"instance_id"`
	// IP Address
	InternalIp *string `json:"internal_ip,omitempty"`
	Network    *string `json:"network,omitempty"`
	ProjectId  string  `json:"project_id"`
	ZoneId     string  `json:"zone_id"`
}

// NewGce instantiates a new Gce object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGce(instanceId string, projectId string, zoneId string) *Gce {
	this := Gce{}
	this.InstanceId = instanceId
	this.ProjectId = projectId
	this.ZoneId = zoneId
	return &this
}

// NewGceWithDefaults instantiates a new Gce object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGceWithDefaults() *Gce {
	this := Gce{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Gce) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gce) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Gce) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Gce) SetType(v string) *Gce {
	o.Type = &v
	return o
}

// GetExternalIp returns the ExternalIp field value if set, zero value otherwise.
func (o *Gce) GetExternalIp() string {
	if o == nil || IsNil(o.ExternalIp) {
		var ret string
		return ret
	}
	return *o.ExternalIp
}

// GetExternalIpOk returns a tuple with the ExternalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gce) GetExternalIpOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalIp) {
		return nil, false
	}
	return o.ExternalIp, true
}

// HasExternalIp returns a boolean if a field has been set.
func (o *Gce) HasExternalIp() bool {
	if o != nil && !IsNil(o.ExternalIp) {
		return true
	}

	return false
}

// SetExternalIp gets a reference to the given string and assigns it to the ExternalIp field.
func (o *Gce) SetExternalIp(v string) *Gce {
	o.ExternalIp = &v
	return o
}

// GetInstanceId returns the InstanceId field value
func (o *Gce) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *Gce) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *Gce) SetInstanceId(v string) *Gce {
	o.InstanceId = v
	return o
}

// GetInternalIp returns the InternalIp field value if set, zero value otherwise.
func (o *Gce) GetInternalIp() string {
	if o == nil || IsNil(o.InternalIp) {
		var ret string
		return ret
	}
	return *o.InternalIp
}

// GetInternalIpOk returns a tuple with the InternalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gce) GetInternalIpOk() (*string, bool) {
	if o == nil || IsNil(o.InternalIp) {
		return nil, false
	}
	return o.InternalIp, true
}

// HasInternalIp returns a boolean if a field has been set.
func (o *Gce) HasInternalIp() bool {
	if o != nil && !IsNil(o.InternalIp) {
		return true
	}

	return false
}

// SetInternalIp gets a reference to the given string and assigns it to the InternalIp field.
func (o *Gce) SetInternalIp(v string) *Gce {
	o.InternalIp = &v
	return o
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Gce) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gce) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Gce) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Gce) SetNetwork(v string) *Gce {
	o.Network = &v
	return o
}

// GetProjectId returns the ProjectId field value
func (o *Gce) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Gce) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *Gce) SetProjectId(v string) *Gce {
	o.ProjectId = v
	return o
}

// GetZoneId returns the ZoneId field value
func (o *Gce) GetZoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *Gce) GetZoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *Gce) SetZoneId(v string) *Gce {
	o.ZoneId = v
	return o
}

func (o Gce) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Gce) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["_type"] = o.Type
	}
	if !IsNil(o.ExternalIp) {
		toSerialize["external_ip"] = o.ExternalIp
	}
	toSerialize["instance_id"] = o.InstanceId
	if !IsNil(o.InternalIp) {
		toSerialize["internal_ip"] = o.InternalIp
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	toSerialize["project_id"] = o.ProjectId
	toSerialize["zone_id"] = o.ZoneId
	return toSerialize, nil
}

type NullableGce struct {
	value *Gce
	isSet bool
}

func (v NullableGce) Get() *Gce {
	return v.value
}

func (v *NullableGce) Set(val *Gce) {
	v.value = val
	v.isSet = true
}

func (v NullableGce) IsSet() bool {
	return v.isSet
}

func (v *NullableGce) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGce(val *Gce) *NullableGce {
	return &NullableGce{value: val, isSet: true}
}

func (v NullableGce) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGce) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
