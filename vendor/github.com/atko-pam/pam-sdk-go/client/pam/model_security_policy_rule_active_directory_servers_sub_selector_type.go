/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// SecurityPolicyRuleActiveDirectoryServersSubSelectorType The type of selector used to target servers for Active Directory resources
type SecurityPolicyRuleActiveDirectoryServersSubSelectorType string

// List of SecurityPolicyRuleActiveDirectoryServersSubSelectorType
const (
	SecurityPolicyRuleActiveDirectoryServersSubSelectorType_INDIVIDUAL_SERVER SecurityPolicyRuleActiveDirectoryServersSubSelectorType = "individual_server"
	SecurityPolicyRuleActiveDirectoryServersSubSelectorType_SERVER_LABEL      SecurityPolicyRuleActiveDirectoryServersSubSelectorType = "server_label"
)

// All allowed values of SecurityPolicyRuleActiveDirectoryServersSubSelectorType enum
var AllowedSecurityPolicyRuleActiveDirectoryServersSubSelectorTypeEnumValues = []SecurityPolicyRuleActiveDirectoryServersSubSelectorType{
	"individual_server",
	"server_label",
}

func (v *SecurityPolicyRuleActiveDirectoryServersSubSelectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityPolicyRuleActiveDirectoryServersSubSelectorType(value)

	*v = enumTypeValue

	return nil
}

// NewSecurityPolicyRuleActiveDirectoryServersSubSelectorTypeFromValue returns a pointer to a valid SecurityPolicyRuleActiveDirectoryServersSubSelectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityPolicyRuleActiveDirectoryServersSubSelectorTypeFromValue(v string) (*SecurityPolicyRuleActiveDirectoryServersSubSelectorType, error) {
	ev := SecurityPolicyRuleActiveDirectoryServersSubSelectorType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityPolicyRuleActiveDirectoryServersSubSelectorType) IsValid() bool {
	for _, existing := range AllowedSecurityPolicyRuleActiveDirectoryServersSubSelectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityPolicyRuleActiveDirectoryServersSubSelectorType value
func (v SecurityPolicyRuleActiveDirectoryServersSubSelectorType) Ptr() *SecurityPolicyRuleActiveDirectoryServersSubSelectorType {
	return &v
}

type NullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType struct {
	value *SecurityPolicyRuleActiveDirectoryServersSubSelectorType
	isSet bool
}

func (v NullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType) Get() *SecurityPolicyRuleActiveDirectoryServersSubSelectorType {
	return v.value
}

func (v *NullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType) Set(val *SecurityPolicyRuleActiveDirectoryServersSubSelectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType(val *SecurityPolicyRuleActiveDirectoryServersSubSelectorType) *NullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType {
	return &NullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleActiveDirectoryServersSubSelectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
