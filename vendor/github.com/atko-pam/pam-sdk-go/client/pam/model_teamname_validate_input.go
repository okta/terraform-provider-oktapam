/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the TeamnameValidateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamnameValidateInput{}

// TeamnameValidateInput struct for TeamnameValidateInput
type TeamnameValidateInput struct {
	// A user-defined name for the OPA team
	TeamName string `json:"teamName"`
}

// NewTeamnameValidateInput instantiates a new TeamnameValidateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamnameValidateInput(teamName string) *TeamnameValidateInput {
	this := TeamnameValidateInput{}
	this.TeamName = teamName
	return &this
}

// NewTeamnameValidateInputWithDefaults instantiates a new TeamnameValidateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamnameValidateInputWithDefaults() *TeamnameValidateInput {
	this := TeamnameValidateInput{}
	return &this
}

// GetTeamName returns the TeamName field value
func (o *TeamnameValidateInput) GetTeamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value
// and a boolean to check if the value has been set.
func (o *TeamnameValidateInput) GetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamName, true
}

// SetTeamName sets field value
func (o *TeamnameValidateInput) SetTeamName(v string) *TeamnameValidateInput {
	o.TeamName = v
	return o
}

func (o TeamnameValidateInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamnameValidateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["teamName"] = o.TeamName
	return toSerialize, nil
}

type NullableTeamnameValidateInput struct {
	value *TeamnameValidateInput
	isSet bool
}

func (v NullableTeamnameValidateInput) Get() *TeamnameValidateInput {
	return v.value
}

func (v *NullableTeamnameValidateInput) Set(val *TeamnameValidateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamnameValidateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamnameValidateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamnameValidateInput(val *TeamnameValidateInput) *NullableTeamnameValidateInput {
	return &NullableTeamnameValidateInput{value: val, isSet: true}
}

func (v NullableTeamnameValidateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamnameValidateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
