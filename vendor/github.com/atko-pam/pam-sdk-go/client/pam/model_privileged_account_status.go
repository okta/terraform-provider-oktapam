/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// PrivilegedAccountStatus Describes the current state of a Privileged Account
type PrivilegedAccountStatus string

// List of PrivilegedAccountStatus
const (
	PrivilegedAccountStatus_STAGED     PrivilegedAccountStatus = "STAGED"
	PrivilegedAccountStatus_EMPTY      PrivilegedAccountStatus = "EMPTY"
	PrivilegedAccountStatus_STATIC     PrivilegedAccountStatus = "STATIC"
	PrivilegedAccountStatus_LCM_ACTIVE PrivilegedAccountStatus = "LCM_ACTIVE"
	PrivilegedAccountStatus_LCM_FAILED PrivilegedAccountStatus = "LCM_FAILED"
	PrivilegedAccountStatus_EXTERNAL   PrivilegedAccountStatus = "EXTERNAL"
)

// All allowed values of PrivilegedAccountStatus enum
var AllowedPrivilegedAccountStatusEnumValues = []PrivilegedAccountStatus{
	"STAGED",
	"EMPTY",
	"STATIC",
	"LCM_ACTIVE",
	"LCM_FAILED",
	"EXTERNAL",
}

func (v *PrivilegedAccountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivilegedAccountStatus(value)

	*v = enumTypeValue

	return nil
}

// NewPrivilegedAccountStatusFromValue returns a pointer to a valid PrivilegedAccountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivilegedAccountStatusFromValue(v string) (*PrivilegedAccountStatus, error) {
	ev := PrivilegedAccountStatus(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivilegedAccountStatus) IsValid() bool {
	for _, existing := range AllowedPrivilegedAccountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrivilegedAccountStatus value
func (v PrivilegedAccountStatus) Ptr() *PrivilegedAccountStatus {
	return &v
}

type NullablePrivilegedAccountStatus struct {
	value *PrivilegedAccountStatus
	isSet bool
}

func (v NullablePrivilegedAccountStatus) Get() *PrivilegedAccountStatus {
	return v.value
}

func (v *NullablePrivilegedAccountStatus) Set(val *PrivilegedAccountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegedAccountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegedAccountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegedAccountStatus(val *PrivilegedAccountStatus) *NullablePrivilegedAccountStatus {
	return &NullablePrivilegedAccountStatus{value: val, isSet: true}
}

func (v NullablePrivilegedAccountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegedAccountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
