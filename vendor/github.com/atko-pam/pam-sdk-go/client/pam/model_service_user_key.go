/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the ServiceUserKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceUserKey{}

// ServiceUserKey struct for ServiceUserKey
type ServiceUserKey struct {
	// A timestamp for when the API key expires
	ExpiresAt time.Time `json:"expires_at"`
	// The UUID of the API key
	Id string `json:"id"`
	// A timestamp for when the API key was issued
	IssuedAt time.Time `json:"issued_at"`
	// A timestamp for when the API key was last used
	LastUsed time.Time `json:"last_used"`
}

// NewServiceUserKey instantiates a new ServiceUserKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceUserKey(expiresAt time.Time, id string, issuedAt time.Time, lastUsed time.Time) *ServiceUserKey {
	this := ServiceUserKey{}
	this.ExpiresAt = expiresAt
	this.Id = id
	this.IssuedAt = issuedAt
	this.LastUsed = lastUsed
	return &this
}

// NewServiceUserKeyWithDefaults instantiates a new ServiceUserKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceUserKeyWithDefaults() *ServiceUserKey {
	this := ServiceUserKey{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value
func (o *ServiceUserKey) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *ServiceUserKey) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *ServiceUserKey) SetExpiresAt(v time.Time) *ServiceUserKey {
	o.ExpiresAt = v
	return o
}

// GetId returns the Id field value
func (o *ServiceUserKey) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceUserKey) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceUserKey) SetId(v string) *ServiceUserKey {
	o.Id = v
	return o
}

// GetIssuedAt returns the IssuedAt field value
func (o *ServiceUserKey) GetIssuedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value
// and a boolean to check if the value has been set.
func (o *ServiceUserKey) GetIssuedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedAt, true
}

// SetIssuedAt sets field value
func (o *ServiceUserKey) SetIssuedAt(v time.Time) *ServiceUserKey {
	o.IssuedAt = v
	return o
}

// GetLastUsed returns the LastUsed field value
func (o *ServiceUserKey) GetLastUsed() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value
// and a boolean to check if the value has been set.
func (o *ServiceUserKey) GetLastUsedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUsed, true
}

// SetLastUsed sets field value
func (o *ServiceUserKey) SetLastUsed(v time.Time) *ServiceUserKey {
	o.LastUsed = v
	return o
}

func (o ServiceUserKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceUserKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expires_at"] = o.ExpiresAt
	toSerialize["id"] = o.Id
	toSerialize["issued_at"] = o.IssuedAt
	toSerialize["last_used"] = o.LastUsed
	return toSerialize, nil
}

type NullableServiceUserKey struct {
	value *ServiceUserKey
	isSet bool
}

func (v NullableServiceUserKey) Get() *ServiceUserKey {
	return v.value
}

func (v *NullableServiceUserKey) Set(val *ServiceUserKey) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceUserKey) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceUserKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceUserKey(val *ServiceUserKey) *NullableServiceUserKey {
	return &NullableServiceUserKey{value: val, isSet: true}
}

func (v NullableServiceUserKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceUserKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
