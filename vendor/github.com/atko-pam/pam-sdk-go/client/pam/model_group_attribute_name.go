/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// GroupAttributeName The type of attribute
type GroupAttributeName string

// List of GroupAttributeName
const (
	GroupAttributeName_UNIX_GID           GroupAttributeName = "unix_gid"
	GroupAttributeName_UNIX_GROUP_NAME    GroupAttributeName = "unix_group_name"
	GroupAttributeName_WINDOWS_GROUP_NAME GroupAttributeName = "windows_group_name"
)

// All allowed values of GroupAttributeName enum
var AllowedGroupAttributeNameEnumValues = []GroupAttributeName{
	"unix_gid",
	"unix_group_name",
	"windows_group_name",
}

func (v *GroupAttributeName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupAttributeName(value)
	for _, existing := range AllowedGroupAttributeNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupAttributeName", value)
}

// NewGroupAttributeNameFromValue returns a pointer to a valid GroupAttributeName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupAttributeNameFromValue(v string) (*GroupAttributeName, error) {
	ev := GroupAttributeName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupAttributeName: valid values are %v", v, AllowedGroupAttributeNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupAttributeName) IsValid() bool {
	for _, existing := range AllowedGroupAttributeNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupAttributeName value
func (v GroupAttributeName) Ptr() *GroupAttributeName {
	return &v
}

type NullableGroupAttributeName struct {
	value *GroupAttributeName
	isSet bool
}

func (v NullableGroupAttributeName) Get() *GroupAttributeName {
	return v.value
}

func (v *NullableGroupAttributeName) Set(val *GroupAttributeName) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupAttributeName) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupAttributeName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupAttributeName(val *GroupAttributeName) *NullableGroupAttributeName {
	return &NullableGroupAttributeName{value: val, isSet: true}
}

func (v NullableGroupAttributeName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupAttributeName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
