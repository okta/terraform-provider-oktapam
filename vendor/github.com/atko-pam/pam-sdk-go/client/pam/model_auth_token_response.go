/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the AuthTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthTokenResponse{}

// AuthTokenResponse struct for AuthTokenResponse
type AuthTokenResponse struct {
	// The JSON Web Token used to authenticate against the API
	BearerToken string `json:"bearer_token"`
	// A timestamp for when the token expires. Formatted in accordance with [RFC 3339](https://tools.ietf.org/html/rfc3339).
	ExpiresAt time.Time `json:"expires_at"`
	// The name of the associated team
	TeamName string `json:"team_name"`
}

// NewAuthTokenResponse instantiates a new AuthTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthTokenResponse(bearerToken string, expiresAt time.Time, teamName string) *AuthTokenResponse {
	this := AuthTokenResponse{}
	this.BearerToken = bearerToken
	this.ExpiresAt = expiresAt
	this.TeamName = teamName
	return &this
}

// NewAuthTokenResponseWithDefaults instantiates a new AuthTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthTokenResponseWithDefaults() *AuthTokenResponse {
	this := AuthTokenResponse{}
	return &this
}

// GetBearerToken returns the BearerToken field value
func (o *AuthTokenResponse) GetBearerToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BearerToken
}

// GetBearerTokenOk returns a tuple with the BearerToken field value
// and a boolean to check if the value has been set.
func (o *AuthTokenResponse) GetBearerTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BearerToken, true
}

// SetBearerToken sets field value
func (o *AuthTokenResponse) SetBearerToken(v string) *AuthTokenResponse {
	o.BearerToken = v
	return o
}

// GetExpiresAt returns the ExpiresAt field value
func (o *AuthTokenResponse) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *AuthTokenResponse) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *AuthTokenResponse) SetExpiresAt(v time.Time) *AuthTokenResponse {
	o.ExpiresAt = v
	return o
}

// GetTeamName returns the TeamName field value
func (o *AuthTokenResponse) GetTeamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value
// and a boolean to check if the value has been set.
func (o *AuthTokenResponse) GetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamName, true
}

// SetTeamName sets field value
func (o *AuthTokenResponse) SetTeamName(v string) *AuthTokenResponse {
	o.TeamName = v
	return o
}

func (o AuthTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bearer_token"] = o.BearerToken
	toSerialize["expires_at"] = o.ExpiresAt
	toSerialize["team_name"] = o.TeamName
	return toSerialize, nil
}

type NullableAuthTokenResponse struct {
	value *AuthTokenResponse
	isSet bool
}

func (v NullableAuthTokenResponse) Get() *AuthTokenResponse {
	return v.value
}

func (v *NullableAuthTokenResponse) Set(val *AuthTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthTokenResponse(val *AuthTokenResponse) *NullableAuthTokenResponse {
	return &NullableAuthTokenResponse{value: val, isSet: true}
}

func (v NullableAuthTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
