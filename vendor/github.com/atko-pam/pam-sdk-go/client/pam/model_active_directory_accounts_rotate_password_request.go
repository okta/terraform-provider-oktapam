/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryAccountsRotatePasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAccountsRotatePasswordRequest{}

// ActiveDirectoryAccountsRotatePasswordRequest struct for ActiveDirectoryAccountsRotatePasswordRequest
type ActiveDirectoryAccountsRotatePasswordRequest struct {
	UserAccessMethod UserAccessMethod `json:"user_access_method"`
}

// NewActiveDirectoryAccountsRotatePasswordRequest instantiates a new ActiveDirectoryAccountsRotatePasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAccountsRotatePasswordRequest(userAccessMethod UserAccessMethod) *ActiveDirectoryAccountsRotatePasswordRequest {
	this := ActiveDirectoryAccountsRotatePasswordRequest{}
	this.UserAccessMethod = userAccessMethod
	return &this
}

// NewActiveDirectoryAccountsRotatePasswordRequestWithDefaults instantiates a new ActiveDirectoryAccountsRotatePasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAccountsRotatePasswordRequestWithDefaults() *ActiveDirectoryAccountsRotatePasswordRequest {
	this := ActiveDirectoryAccountsRotatePasswordRequest{}
	return &this
}

// GetUserAccessMethod returns the UserAccessMethod field value
func (o *ActiveDirectoryAccountsRotatePasswordRequest) GetUserAccessMethod() UserAccessMethod {
	if o == nil {
		var ret UserAccessMethod
		return ret
	}

	return o.UserAccessMethod
}

// GetUserAccessMethodOk returns a tuple with the UserAccessMethod field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountsRotatePasswordRequest) GetUserAccessMethodOk() (*UserAccessMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAccessMethod, true
}

// SetUserAccessMethod sets field value
func (o *ActiveDirectoryAccountsRotatePasswordRequest) SetUserAccessMethod(v UserAccessMethod) *ActiveDirectoryAccountsRotatePasswordRequest {
	o.UserAccessMethod = v
	return o
}

func (o ActiveDirectoryAccountsRotatePasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAccountsRotatePasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_access_method"] = o.UserAccessMethod
	return toSerialize, nil
}

type NullableActiveDirectoryAccountsRotatePasswordRequest struct {
	value *ActiveDirectoryAccountsRotatePasswordRequest
	isSet bool
}

func (v NullableActiveDirectoryAccountsRotatePasswordRequest) Get() *ActiveDirectoryAccountsRotatePasswordRequest {
	return v.value
}

func (v *NullableActiveDirectoryAccountsRotatePasswordRequest) Set(val *ActiveDirectoryAccountsRotatePasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountsRotatePasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountsRotatePasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountsRotatePasswordRequest(val *ActiveDirectoryAccountsRotatePasswordRequest) *NullableActiveDirectoryAccountsRotatePasswordRequest {
	return &NullableActiveDirectoryAccountsRotatePasswordRequest{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountsRotatePasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountsRotatePasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
