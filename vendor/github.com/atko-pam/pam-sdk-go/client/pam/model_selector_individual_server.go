/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SelectorIndividualServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectorIndividualServer{}

// SelectorIndividualServer This resource selector identifies a specific enrolled server
type SelectorIndividualServer struct {
	Server *NamedObject `json:"server,omitempty"`
}

// NewSelectorIndividualServer instantiates a new SelectorIndividualServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorIndividualServer() *SelectorIndividualServer {
	this := SelectorIndividualServer{}
	return &this
}

// NewSelectorIndividualServerWithDefaults instantiates a new SelectorIndividualServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorIndividualServerWithDefaults() *SelectorIndividualServer {
	this := SelectorIndividualServer{}
	return &this
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *SelectorIndividualServer) GetServer() NamedObject {
	if o == nil || IsNil(o.Server) {
		var ret NamedObject
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorIndividualServer) GetServerOk() (*NamedObject, bool) {
	if o == nil || IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *SelectorIndividualServer) HasServer() bool {
	if o != nil && !IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given NamedObject and assigns it to the Server field.
func (o *SelectorIndividualServer) SetServer(v NamedObject) *SelectorIndividualServer {
	o.Server = &v
	return o
}

func (o SelectorIndividualServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectorIndividualServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	return toSerialize, nil
}

type NullableSelectorIndividualServer struct {
	value *SelectorIndividualServer
	isSet bool
}

func (v NullableSelectorIndividualServer) Get() *SelectorIndividualServer {
	return v.value
}

func (v *NullableSelectorIndividualServer) Set(val *SelectorIndividualServer) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorIndividualServer) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorIndividualServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorIndividualServer(val *SelectorIndividualServer) *NullableSelectorIndividualServer {
	return &NullableSelectorIndividualServer{value: val, isSet: true}
}

func (v NullableSelectorIndividualServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorIndividualServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
