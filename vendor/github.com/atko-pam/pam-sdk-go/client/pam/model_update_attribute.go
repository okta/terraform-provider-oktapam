/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the UpdateAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAttribute{}

// UpdateAttribute struct for UpdateAttribute
type UpdateAttribute struct {
	AttributeName  TeamUserAttributeName           `json:"attribute_name"`
	AttributeValue TeamUserAttributeAttributeValue `json:"attribute_value"`
}

// NewUpdateAttribute instantiates a new UpdateAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAttribute(attributeName TeamUserAttributeName, attributeValue TeamUserAttributeAttributeValue) *UpdateAttribute {
	this := UpdateAttribute{}
	this.AttributeName = attributeName
	this.AttributeValue = attributeValue
	return &this
}

// NewUpdateAttributeWithDefaults instantiates a new UpdateAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAttributeWithDefaults() *UpdateAttribute {
	this := UpdateAttribute{}
	return &this
}

// GetAttributeName returns the AttributeName field value
func (o *UpdateAttribute) GetAttributeName() TeamUserAttributeName {
	if o == nil {
		var ret TeamUserAttributeName
		return ret
	}

	return o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value
// and a boolean to check if the value has been set.
func (o *UpdateAttribute) GetAttributeNameOk() (*TeamUserAttributeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeName, true
}

// SetAttributeName sets field value
func (o *UpdateAttribute) SetAttributeName(v TeamUserAttributeName) *UpdateAttribute {
	o.AttributeName = v
	return o
}

// GetAttributeValue returns the AttributeValue field value
func (o *UpdateAttribute) GetAttributeValue() TeamUserAttributeAttributeValue {
	if o == nil {
		var ret TeamUserAttributeAttributeValue
		return ret
	}

	return o.AttributeValue
}

// GetAttributeValueOk returns a tuple with the AttributeValue field value
// and a boolean to check if the value has been set.
func (o *UpdateAttribute) GetAttributeValueOk() (*TeamUserAttributeAttributeValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeValue, true
}

// SetAttributeValue sets field value
func (o *UpdateAttribute) SetAttributeValue(v TeamUserAttributeAttributeValue) *UpdateAttribute {
	o.AttributeValue = v
	return o
}

func (o UpdateAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attribute_name"] = o.AttributeName
	toSerialize["attribute_value"] = o.AttributeValue
	return toSerialize, nil
}

type NullableUpdateAttribute struct {
	value *UpdateAttribute
	isSet bool
}

func (v NullableUpdateAttribute) Get() *UpdateAttribute {
	return v.value
}

func (v *NullableUpdateAttribute) Set(val *UpdateAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAttribute(val *UpdateAttribute) *NullableUpdateAttribute {
	return &NullableUpdateAttribute{value: val, isSet: true}
}

func (v NullableUpdateAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
