/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// GovernanceResource - struct for GovernanceResource
type GovernanceResource struct {
	GovernanceServiceAccount *GovernanceServiceAccount
	GovernanceUser           *GovernanceUser
	Unknown                  map[string]interface{} // holds unknown types for round-tripping
}

// GovernanceServiceAccountAsGovernanceResource is a convenience function that returns GovernanceServiceAccount wrapped in GovernanceResource
func GovernanceServiceAccountAsGovernanceResource(v *GovernanceServiceAccount) GovernanceResource {
	return GovernanceResource{
		GovernanceServiceAccount: v,
	}
}

// GovernanceUserAsGovernanceResource is a convenience function that returns GovernanceUser wrapped in GovernanceResource
func GovernanceUserAsGovernanceResource(v *GovernanceUser) GovernanceResource {
	return GovernanceResource{
		GovernanceUser: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GovernanceResource) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'GovernanceServiceAccount'
	if jsonDict["resourceType"] == "GovernanceServiceAccount" {
		// try to unmarshal JSON data into GovernanceServiceAccount
		err = json.Unmarshal(data, &dst.GovernanceServiceAccount)
		if err == nil {
			return nil // data stored in dst.GovernanceServiceAccount, return on the first match
		} else {
			dst.GovernanceServiceAccount = nil
			return fmt.Errorf("failed to unmarshal GovernanceResource as GovernanceServiceAccount: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GovernanceUser'
	if jsonDict["resourceType"] == "GovernanceUser" {
		// try to unmarshal JSON data into GovernanceUser
		err = json.Unmarshal(data, &dst.GovernanceUser)
		if err == nil {
			return nil // data stored in dst.GovernanceUser, return on the first match
		} else {
			dst.GovernanceUser = nil
			return fmt.Errorf("failed to unmarshal GovernanceResource as GovernanceUser: %s", err.Error())
		}
	}

	// check if the discriminator value is 'service_account'
	if jsonDict["resourceType"] == "service_account" {
		// try to unmarshal JSON data into GovernanceServiceAccount
		err = json.Unmarshal(data, &dst.GovernanceServiceAccount)
		if err == nil {
			return nil // data stored in dst.GovernanceServiceAccount, return on the first match
		} else {
			dst.GovernanceServiceAccount = nil
			return fmt.Errorf("failed to unmarshal GovernanceResource as GovernanceServiceAccount: %s", err.Error())
		}
	}

	// check if the discriminator value is 'user'
	if jsonDict["resourceType"] == "user" {
		// try to unmarshal JSON data into GovernanceUser
		err = json.Unmarshal(data, &dst.GovernanceUser)
		if err == nil {
			return nil // data stored in dst.GovernanceUser, return on the first match
		} else {
			dst.GovernanceUser = nil
			return fmt.Errorf("failed to unmarshal GovernanceResource as GovernanceUser: %s", err.Error())
		}
	}

	// If discriminator is unknown, unmarshal into Unknown
	var unknown map[string]interface{}
	err = json.Unmarshal(data, &unknown)
	if err == nil {
		dst.Unknown = unknown
		return nil
	}
	return err
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GovernanceResource) MarshalJSON() ([]byte, error) {
	if src.GovernanceServiceAccount != nil {
		return json.Marshal(&src.GovernanceServiceAccount)
	}

	if src.GovernanceUser != nil {
		return json.Marshal(&src.GovernanceUser)
	}

	if src.Unknown != nil {
		return json.Marshal(src.Unknown)
	}

	return nil, fmt.Errorf("no data present in any oneOf schemas or Unknown; this should be unreachable") // unreachable: no data matched, should be handled by Unknown
}

// Get the actual instance
func (obj *GovernanceResource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GovernanceServiceAccount != nil {
		return obj.GovernanceServiceAccount
	}

	if obj.GovernanceUser != nil {
		return obj.GovernanceUser
	}

	// all schemas are nil
	return nil
}

type NullableGovernanceResource struct {
	value *GovernanceResource
	isSet bool
}

func (v NullableGovernanceResource) Get() *GovernanceResource {
	return v.value
}

func (v *NullableGovernanceResource) Set(val *GovernanceResource) {
	v.value = val
	v.isSet = true
}

func (v NullableGovernanceResource) IsSet() bool {
	return v.isSet
}

func (v *NullableGovernanceResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGovernanceResource(val *GovernanceResource) *NullableGovernanceResource {
	return &NullableGovernanceResource{value: val, isSet: true}
}

func (v NullableGovernanceResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGovernanceResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
