/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// StagedServiceAccountsAPIService StagedServiceAccountsAPI service
type StagedServiceAccountsAPIService service

type ApiAssignStagedServiceAccountRequest struct {
	ctx                    context.Context
	ApiService             *StagedServiceAccountsAPIService
	teamName               string
	stagedServiceAccountId string
	projectId              string
}

func (r ApiAssignStagedServiceAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssignStagedServiceAccountExecute(r)
}

/*
	AssignStagedServiceAccount Assign a SaaS or Okta Service Account to a Resource Group and Project

	    Assigns a SaaS or Okta Service Account to a Resource Group and Project.

If the account can be actively managed, rotates the password for the account immediately.
This endpoint requires the `resource_admin` role.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param stagedServiceAccountId The UUID of a `STAGED` Service Account
	    @param projectId The UUID of a Project
	@return ApiAssignStagedServiceAccountRequest
*/
func (a *StagedServiceAccountsAPIService) AssignStagedServiceAccount(ctx context.Context, teamName string, stagedServiceAccountId string, projectId string) ApiAssignStagedServiceAccountRequest {
	return ApiAssignStagedServiceAccountRequest{
		ApiService:             a,
		ctx:                    ctx,
		teamName:               teamName,
		stagedServiceAccountId: stagedServiceAccountId,
		projectId:              projectId,
	}
}

// Execute executes the request
func (a *StagedServiceAccountsAPIService) AssignStagedServiceAccountExecute(r ApiAssignStagedServiceAccountRequest) (*http.Response, error) {
	var (
		traceKey           = "stagedserviceaccountsapi.assignStagedServiceAccount"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_assignment/universal_directory/accounts/{staged_service_account_id}/assign/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"staged_service_account_id"+"}", url.PathEscape(parameterValueToString(r.stagedServiceAccountId, "stagedServiceAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiListStagedServiceAccountsRequest struct {
	ctx           context.Context
	ApiService    *StagedServiceAccountsAPIService
	teamName      string
	managed       *bool
	appInstanceId *[]string
}

// If &#x60;true&#x60;, only return staged accounts that support password rotation. If &#x60;false&#x60;, only return staged accounts that do not support password rotation.
func (r ApiListStagedServiceAccountsRequest) Managed(managed bool) ApiListStagedServiceAccountsRequest {
	r.managed = &managed
	return r
}

// Only return staged accounts with the specified application instance ids.
func (r ApiListStagedServiceAccountsRequest) AppInstanceId(appInstanceId []string) ApiListStagedServiceAccountsRequest {
	r.appInstanceId = &appInstanceId
	return r
}

func (r ApiListStagedServiceAccountsRequest) Execute() (*ListStagedServiceAccountsResponse, *http.Response, error) {
	return r.ApiService.ListStagedServiceAccountsExecute(r)
}

/*
	ListStagedServiceAccounts List all staged service accounts from Okta Universal Directory

	    Lists all SaaS and Okta service accounts from Okta Universal Directory that have not been assigned to a Project or Resource Group.

This endpoint requires the `resource_admin` role.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiListStagedServiceAccountsRequest
*/
func (a *StagedServiceAccountsAPIService) ListStagedServiceAccounts(ctx context.Context, teamName string) ApiListStagedServiceAccountsRequest {
	return ApiListStagedServiceAccountsRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListStagedServiceAccountsResponse
func (a *StagedServiceAccountsAPIService) ListStagedServiceAccountsExecute(r ApiListStagedServiceAccountsRequest) (*ListStagedServiceAccountsResponse, *http.Response, error) {
	var (
		traceKey            = "stagedserviceaccountsapi.listStagedServiceAccounts"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListStagedServiceAccountsResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_assignment/universal_directory/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.managed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managed", r.managed, "")
	}
	if r.appInstanceId != nil {
		t := *r.appInstanceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_instance_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_instance_id", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
