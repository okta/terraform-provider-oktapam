/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// SecurityPolicySecretBasedResourceSelectorContainerSelector - The specific parameters used to target resources. The organization of this object depends on the `selector_type`.
type SecurityPolicySecretBasedResourceSelectorContainerSelector struct {
	SecurityPolicyRuleSecretBasedResourceSecretFolderSelector *SecurityPolicyRuleSecretBasedResourceSecretFolderSelector
	SecurityPolicyRuleSecretBasedResourceSecretSelector       *SecurityPolicyRuleSecretBasedResourceSecretSelector
}

// SecurityPolicyRuleSecretBasedResourceSecretFolderSelectorAsSecurityPolicySecretBasedResourceSelectorContainerSelector is a convenience function that returns SecurityPolicyRuleSecretBasedResourceSecretFolderSelector wrapped in SecurityPolicySecretBasedResourceSelectorContainerSelector
func SecurityPolicyRuleSecretBasedResourceSecretFolderSelectorAsSecurityPolicySecretBasedResourceSelectorContainerSelector(v *SecurityPolicyRuleSecretBasedResourceSecretFolderSelector) SecurityPolicySecretBasedResourceSelectorContainerSelector {
	return SecurityPolicySecretBasedResourceSelectorContainerSelector{
		SecurityPolicyRuleSecretBasedResourceSecretFolderSelector: v,
	}
}

// SecurityPolicyRuleSecretBasedResourceSecretSelectorAsSecurityPolicySecretBasedResourceSelectorContainerSelector is a convenience function that returns SecurityPolicyRuleSecretBasedResourceSecretSelector wrapped in SecurityPolicySecretBasedResourceSelectorContainerSelector
func SecurityPolicyRuleSecretBasedResourceSecretSelectorAsSecurityPolicySecretBasedResourceSelectorContainerSelector(v *SecurityPolicyRuleSecretBasedResourceSecretSelector) SecurityPolicySecretBasedResourceSelectorContainerSelector {
	return SecurityPolicySecretBasedResourceSelectorContainerSelector{
		SecurityPolicyRuleSecretBasedResourceSecretSelector: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecurityPolicySecretBasedResourceSelectorContainerSelector) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'SecurityPolicyRuleSecretBasedResourceSecretFolderSelector'
	if jsonDict["_type"] == "SecurityPolicyRuleSecretBasedResourceSecretFolderSelector" {
		// try to unmarshal JSON data into SecurityPolicyRuleSecretBasedResourceSecretFolderSelector
		err = json.Unmarshal(data, &dst.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector, return on the first match
		} else {
			dst.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicySecretBasedResourceSelectorContainerSelector as SecurityPolicyRuleSecretBasedResourceSecretFolderSelector: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SecurityPolicyRuleSecretBasedResourceSecretSelector'
	if jsonDict["_type"] == "SecurityPolicyRuleSecretBasedResourceSecretSelector" {
		// try to unmarshal JSON data into SecurityPolicyRuleSecretBasedResourceSecretSelector
		err = json.Unmarshal(data, &dst.SecurityPolicyRuleSecretBasedResourceSecretSelector)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyRuleSecretBasedResourceSecretSelector, return on the first match
		} else {
			dst.SecurityPolicyRuleSecretBasedResourceSecretSelector = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicySecretBasedResourceSelectorContainerSelector as SecurityPolicyRuleSecretBasedResourceSecretSelector: %s", err.Error())
		}
	}

	// check if the discriminator value is 'secret'
	if jsonDict["_type"] == "secret" {
		// try to unmarshal JSON data into SecurityPolicyRuleSecretBasedResourceSecretSelector
		err = json.Unmarshal(data, &dst.SecurityPolicyRuleSecretBasedResourceSecretSelector)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyRuleSecretBasedResourceSecretSelector, return on the first match
		} else {
			dst.SecurityPolicyRuleSecretBasedResourceSecretSelector = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicySecretBasedResourceSelectorContainerSelector as SecurityPolicyRuleSecretBasedResourceSecretSelector: %s", err.Error())
		}
	}

	// check if the discriminator value is 'secret_folder'
	if jsonDict["_type"] == "secret_folder" {
		// try to unmarshal JSON data into SecurityPolicyRuleSecretBasedResourceSecretFolderSelector
		err = json.Unmarshal(data, &dst.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector, return on the first match
		} else {
			dst.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicySecretBasedResourceSelectorContainerSelector as SecurityPolicyRuleSecretBasedResourceSecretFolderSelector: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecurityPolicySecretBasedResourceSelectorContainerSelector) MarshalJSON() ([]byte, error) {
	if src.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector != nil {
		return json.Marshal(&src.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector)
	}

	if src.SecurityPolicyRuleSecretBasedResourceSecretSelector != nil {
		return json.Marshal(&src.SecurityPolicyRuleSecretBasedResourceSecretSelector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecurityPolicySecretBasedResourceSelectorContainerSelector) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector != nil {
		return obj.SecurityPolicyRuleSecretBasedResourceSecretFolderSelector
	}

	if obj.SecurityPolicyRuleSecretBasedResourceSecretSelector != nil {
		return obj.SecurityPolicyRuleSecretBasedResourceSecretSelector
	}

	// all schemas are nil
	return nil
}

type NullableSecurityPolicySecretBasedResourceSelectorContainerSelector struct {
	value *SecurityPolicySecretBasedResourceSelectorContainerSelector
	isSet bool
}

func (v NullableSecurityPolicySecretBasedResourceSelectorContainerSelector) Get() *SecurityPolicySecretBasedResourceSelectorContainerSelector {
	return v.value
}

func (v *NullableSecurityPolicySecretBasedResourceSelectorContainerSelector) Set(val *SecurityPolicySecretBasedResourceSelectorContainerSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicySecretBasedResourceSelectorContainerSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicySecretBasedResourceSelectorContainerSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicySecretBasedResourceSelectorContainerSelector(val *SecurityPolicySecretBasedResourceSelectorContainerSelector) *NullableSecurityPolicySecretBasedResourceSelectorContainerSelector {
	return &NullableSecurityPolicySecretBasedResourceSelectorContainerSelector{value: val, isSet: true}
}

func (v NullableSecurityPolicySecretBasedResourceSelectorContainerSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicySecretBasedResourceSelectorContainerSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
