/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// Curve The curve used by the key
type Curve string

// List of curve
const (
	Curve__256 Curve = "P-256"
	Curve__384 Curve = "P-384"
	Curve__521 Curve = "P-521"
)

// All allowed values of Curve enum
var AllowedCurveEnumValues = []Curve{
	"P-256",
	"P-384",
	"P-521",
}

func (v *Curve) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Curve(value)
	for _, existing := range AllowedCurveEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Curve", value)
}

// NewCurveFromValue returns a pointer to a valid Curve
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurveFromValue(v string) (*Curve, error) {
	ev := Curve(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Curve: valid values are %v", v, AllowedCurveEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Curve) IsValid() bool {
	for _, existing := range AllowedCurveEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to curve value
func (v Curve) Ptr() *Curve {
	return &v
}

type NullableCurve struct {
	value *Curve
	isSet bool
}

func (v NullableCurve) Get() *Curve {
	return v.value
}

func (v *NullableCurve) Set(val *Curve) {
	v.value = val
	v.isSet = true
}

func (v NullableCurve) IsSet() bool {
	return v.isSet
}

func (v *NullableCurve) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurve(val *Curve) *NullableCurve {
	return &NullableCurve{value: val, isSet: true}
}

func (v NullableCurve) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurve) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
