/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ServiceAccountsAPIService ServiceAccountsAPI service
type ServiceAccountsAPIService service

type ApiCreateAppServiceAccountRequest struct {
	ctx        context.Context
	ApiService *ServiceAccountsAPIService
	body       *AppServiceAccount
}

func (r ApiCreateAppServiceAccountRequest) Body(body AppServiceAccount) ApiCreateAppServiceAccountRequest {
	r.body = &body
	return r
}

func (r ApiCreateAppServiceAccountRequest) Execute() (*AppServiceAccount, *http.Response, error) {
	return r.ApiService.CreateAppServiceAccountExecute(r)
}

/*
CreateAppServiceAccount Create an app service account

	Creates a new app service account for managing an app account

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiCreateAppServiceAccountRequest
*/
func (a *ServiceAccountsAPIService) CreateAppServiceAccount(ctx context.Context) ApiCreateAppServiceAccountRequest {
	return ApiCreateAppServiceAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AppServiceAccount
func (a *ServiceAccountsAPIService) CreateAppServiceAccountExecute(r ApiCreateAppServiceAccountRequest) (*AppServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.createAppServiceAccount"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppServiceAccount
	)

	localVarPath := "/v1/app_service_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiCreateServiceAccountRequest struct {
	ctx        context.Context
	ApiService *ServiceAccountsAPIService
	body       *ServiceAccount
}

func (r ApiCreateServiceAccountRequest) Body(body ServiceAccount) ApiCreateServiceAccountRequest {
	r.body = &body
	return r
}

func (r ApiCreateServiceAccountRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.CreateServiceAccountExecute(r)
}

/*
CreateServiceAccount Create a service account

	Creates a new service account for managing an Okta user or SaaS app account

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiCreateServiceAccountRequest

	Deprecated
*/
func (a *ServiceAccountsAPIService) CreateServiceAccount(ctx context.Context) ApiCreateServiceAccountRequest {
	return ApiCreateServiceAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
//
// Deprecated
func (a *ServiceAccountsAPIService) CreateServiceAccountExecute(r ApiCreateServiceAccountRequest) (*ServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.createServiceAccount"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localVarPath := "/v1/service_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiDeleteAppServiceAccountRequest struct {
	ctx              context.Context
	ApiService       *ServiceAccountsAPIService
	serviceAccountId string
}

func (r ApiDeleteAppServiceAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAppServiceAccountExecute(r)
}

/*
DeleteAppServiceAccount Delete an app service account

	Deletes an app service account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param serviceAccountId The UUID of an existing service account

@return ApiDeleteAppServiceAccountRequest
*/
func (a *ServiceAccountsAPIService) DeleteAppServiceAccount(ctx context.Context, serviceAccountId string) ApiDeleteAppServiceAccountRequest {
	return ApiDeleteAppServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
func (a *ServiceAccountsAPIService) DeleteAppServiceAccountExecute(r ApiDeleteAppServiceAccountRequest) (*http.Response, error) {
	var (
		traceKey           = "serviceaccountsapi.deleteAppServiceAccount"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/app_service_accounts/{service_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_account_id"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiDeleteServiceAccountRequest struct {
	ctx              context.Context
	ApiService       *ServiceAccountsAPIService
	serviceAccountId string
}

func (r ApiDeleteServiceAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceAccountExecute(r)
}

/*
DeleteServiceAccount Delete a service account

	Deletes a service account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param serviceAccountId The UUID of an existing service account

@return ApiDeleteServiceAccountRequest

	Deprecated
*/
func (a *ServiceAccountsAPIService) DeleteServiceAccount(ctx context.Context, serviceAccountId string) ApiDeleteServiceAccountRequest {
	return ApiDeleteServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
// Deprecated
func (a *ServiceAccountsAPIService) DeleteServiceAccountExecute(r ApiDeleteServiceAccountRequest) (*http.Response, error) {
	var (
		traceKey           = "serviceaccountsapi.deleteServiceAccount"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/service_accounts/{service_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_account_id"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiGetAppServiceAccountRequest struct {
	ctx              context.Context
	ApiService       *ServiceAccountsAPIService
	serviceAccountId string
}

func (r ApiGetAppServiceAccountRequest) Execute() (*AppServiceAccount, *http.Response, error) {
	return r.ApiService.GetAppServiceAccountExecute(r)
}

/*
GetAppServiceAccount Retrieve an app service account

	Retrieves an app service account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param serviceAccountId The UUID of an existing service account

@return ApiGetAppServiceAccountRequest
*/
func (a *ServiceAccountsAPIService) GetAppServiceAccount(ctx context.Context, serviceAccountId string) ApiGetAppServiceAccountRequest {
	return ApiGetAppServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return AppServiceAccount
func (a *ServiceAccountsAPIService) GetAppServiceAccountExecute(r ApiGetAppServiceAccountRequest) (*AppServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.getAppServiceAccount"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppServiceAccount
	)

	localVarPath := "/v1/app_service_accounts/{service_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_account_id"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetServiceAccountRequest struct {
	ctx              context.Context
	ApiService       *ServiceAccountsAPIService
	serviceAccountId string
}

func (r ApiGetServiceAccountRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.GetServiceAccountExecute(r)
}

/*
GetServiceAccount Retrieve a service account

	Retrieves a service account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param serviceAccountId The UUID of an existing service account

@return ApiGetServiceAccountRequest

	Deprecated
*/
func (a *ServiceAccountsAPIService) GetServiceAccount(ctx context.Context, serviceAccountId string) ApiGetServiceAccountRequest {
	return ApiGetServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
//
// Deprecated
func (a *ServiceAccountsAPIService) GetServiceAccountExecute(r ApiGetServiceAccountRequest) (*ServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.getServiceAccount"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localVarPath := "/v1/service_accounts/{service_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_account_id"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListAppServiceAccountsRequest struct {
	ctx        context.Context
	ApiService *ServiceAccountsAPIService
	limit      *int32
	after      *string
	match      *string
}

// A limit on the number of objects to return (used by monolith)
func (r ApiListAppServiceAccountsRequest) Limit(limit int32) ApiListAppServiceAccountsRequest {
	r.limit = &limit
	return r
}

// The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. Only &#x60;Link.self&#x60; and &#x60;Link.next&#x60; headers are defined. Backwards pagination is not supported. (used by monolith)
func (r ApiListAppServiceAccountsRequest) After(after string) ApiListAppServiceAccountsRequest {
	r.after = &after
	return r
}

// Searches the records for a matching value (used by monolith)
func (r ApiListAppServiceAccountsRequest) Match(match string) ApiListAppServiceAccountsRequest {
	r.match = &match
	return r
}

func (r ApiListAppServiceAccountsRequest) Execute() ([]AppServiceAccount, *http.Response, error) {
	return r.ApiService.ListAppServiceAccountsExecute(r)
}

/*
ListAppServiceAccounts List all app service accounts

	Lists all app service accounts

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiListAppServiceAccountsRequest
*/
func (a *ServiceAccountsAPIService) ListAppServiceAccounts(ctx context.Context) ApiListAppServiceAccountsRequest {
	return ApiListAppServiceAccountsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []AppServiceAccount
func (a *ServiceAccountsAPIService) ListAppServiceAccountsExecute(r ApiListAppServiceAccountsRequest) ([]AppServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.listAppServiceAccounts"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AppServiceAccount
	)

	localVarPath := "/v1/app_service_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "")
	}
	if r.match != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "match", r.match, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListServiceAccountsRequest struct {
	ctx        context.Context
	ApiService *ServiceAccountsAPIService
	limit      *int32
	after      *string
	q          *string
}

// A limit on the number of objects to return (used by monolith)
func (r ApiListServiceAccountsRequest) Limit(limit int32) ApiListServiceAccountsRequest {
	r.limit = &limit
	return r
}

// The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. Only &#x60;Link.self&#x60; and &#x60;Link.next&#x60; headers are defined. Backwards pagination is not supported. (used by monolith)
func (r ApiListServiceAccountsRequest) After(after string) ApiListServiceAccountsRequest {
	r.after = &after
	return r
}

// Searches the records for a matching value (used by monolith)
func (r ApiListServiceAccountsRequest) Q(q string) ApiListServiceAccountsRequest {
	r.q = &q
	return r
}

func (r ApiListServiceAccountsRequest) Execute() ([]ServiceAccount, *http.Response, error) {
	return r.ApiService.ListServiceAccountsExecute(r)
}

/*
ListServiceAccounts List all service accounts

	Lists all service accounts

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiListServiceAccountsRequest

	Deprecated
*/
func (a *ServiceAccountsAPIService) ListServiceAccounts(ctx context.Context) ApiListServiceAccountsRequest {
	return ApiListServiceAccountsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ServiceAccount
//
// Deprecated
func (a *ServiceAccountsAPIService) ListServiceAccountsExecute(r ApiListServiceAccountsRequest) ([]ServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.listServiceAccounts"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ServiceAccount
	)

	localVarPath := "/v1/service_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateAppServiceAccountRequest struct {
	ctx              context.Context
	ApiService       *ServiceAccountsAPIService
	serviceAccountId string
	body             *AppServiceAccountForUpdate
}

func (r ApiUpdateAppServiceAccountRequest) Body(body AppServiceAccountForUpdate) ApiUpdateAppServiceAccountRequest {
	r.body = &body
	return r
}

func (r ApiUpdateAppServiceAccountRequest) Execute() (*AppServiceAccount, *http.Response, error) {
	return r.ApiService.UpdateAppServiceAccountExecute(r)
}

/*
UpdateAppServiceAccount Updates an app service account

	Updates an app service account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param serviceAccountId The UUID of an existing service account

@return ApiUpdateAppServiceAccountRequest
*/
func (a *ServiceAccountsAPIService) UpdateAppServiceAccount(ctx context.Context, serviceAccountId string) ApiUpdateAppServiceAccountRequest {
	return ApiUpdateAppServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return AppServiceAccount
func (a *ServiceAccountsAPIService) UpdateAppServiceAccountExecute(r ApiUpdateAppServiceAccountRequest) (*AppServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.updateAppServiceAccount"
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppServiceAccount
	)

	localVarPath := "/v1/app_service_accounts/{service_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_account_id"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateServiceAccountRequest struct {
	ctx              context.Context
	ApiService       *ServiceAccountsAPIService
	serviceAccountId string
	body             *ServiceAccountForUpdate
}

func (r ApiUpdateServiceAccountRequest) Body(body ServiceAccountForUpdate) ApiUpdateServiceAccountRequest {
	r.body = &body
	return r
}

func (r ApiUpdateServiceAccountRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.UpdateServiceAccountExecute(r)
}

/*
UpdateServiceAccount Updates a service account

	Updates a service account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param serviceAccountId The UUID of an existing service account

@return ApiUpdateServiceAccountRequest

	Deprecated
*/
func (a *ServiceAccountsAPIService) UpdateServiceAccount(ctx context.Context, serviceAccountId string) ApiUpdateServiceAccountRequest {
	return ApiUpdateServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
//
// Deprecated
func (a *ServiceAccountsAPIService) UpdateServiceAccountExecute(r ApiUpdateServiceAccountRequest) (*ServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.updateServiceAccount"
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localVarPath := "/v1/service_accounts/{service_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_account_id"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
