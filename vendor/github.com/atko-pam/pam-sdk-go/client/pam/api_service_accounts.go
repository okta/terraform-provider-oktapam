/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// ServiceAccountsAPIService ServiceAccountsAPI service
type ServiceAccountsAPIService service

type ApiCreateServiceAccountRequest struct {
	ctx        context.Context
	ApiService *ServiceAccountsAPIService
	body       *ServiceAccount
}

func (r ApiCreateServiceAccountRequest) Body(body ServiceAccount) ApiCreateServiceAccountRequest {
	r.body = &body
	return r
}

func (r ApiCreateServiceAccountRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.CreateServiceAccountExecute(r)
}

/*
CreateServiceAccount Create a service account

	Creates a service account

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiCreateServiceAccountRequest
*/
func (a *ServiceAccountsAPIService) CreateServiceAccount(ctx context.Context) ApiCreateServiceAccountRequest {
	return ApiCreateServiceAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
func (a *ServiceAccountsAPIService) CreateServiceAccountExecute(r ApiCreateServiceAccountRequest) (*ServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.createServiceAccount"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localVarPath := "/v1/service_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiDeleteServiceAccountRequest struct {
	ctx              context.Context
	ApiService       *ServiceAccountsAPIService
	serviceAccountId string
}

func (r ApiDeleteServiceAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceAccountExecute(r)
}

/*
DeleteServiceAccount Delete a service account

	Deletes a service account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param serviceAccountId The UUID of an existing Service Account

@return ApiDeleteServiceAccountRequest
*/
func (a *ServiceAccountsAPIService) DeleteServiceAccount(ctx context.Context, serviceAccountId string) ApiDeleteServiceAccountRequest {
	return ApiDeleteServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
func (a *ServiceAccountsAPIService) DeleteServiceAccountExecute(r ApiDeleteServiceAccountRequest) (*http.Response, error) {
	var (
		traceKey           = "serviceaccountsapi.deleteServiceAccount"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/service_accounts/{service_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_account_id"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if localVarHTTPResponse == nil && err != nil {
		return nil, err
	}

	return localVarHTTPResponse, err
}

type ApiGetServiceAccountRequest struct {
	ctx              context.Context
	ApiService       *ServiceAccountsAPIService
	serviceAccountId string
}

func (r ApiGetServiceAccountRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.GetServiceAccountExecute(r)
}

/*
GetServiceAccount Retrieve a service account

	Retrieves a service account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param serviceAccountId The UUID of an existing Service Account

@return ApiGetServiceAccountRequest
*/
func (a *ServiceAccountsAPIService) GetServiceAccount(ctx context.Context, serviceAccountId string) ApiGetServiceAccountRequest {
	return ApiGetServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
func (a *ServiceAccountsAPIService) GetServiceAccountExecute(r ApiGetServiceAccountRequest) (*ServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.getServiceAccount"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localVarPath := "/v1/service_accounts/{service_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_account_id"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListServiceAccountsRequest struct {
	ctx        context.Context
	ApiService *ServiceAccountsAPIService
}

func (r ApiListServiceAccountsRequest) Execute() ([]ServiceAccount, *http.Response, error) {
	return r.ApiService.ListServiceAccountsExecute(r)
}

/*
ListServiceAccounts List all service accounts

	Lists all service accounts

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiListServiceAccountsRequest
*/
func (a *ServiceAccountsAPIService) ListServiceAccounts(ctx context.Context) ApiListServiceAccountsRequest {
	return ApiListServiceAccountsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ServiceAccount
func (a *ServiceAccountsAPIService) ListServiceAccountsExecute(r ApiListServiceAccountsRequest) ([]ServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.listServiceAccounts"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ServiceAccount
	)

	localVarPath := "/v1/service_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateServiceAccountRequest struct {
	ctx              context.Context
	ApiService       *ServiceAccountsAPIService
	serviceAccountId string
	body             *ServiceAccountForUpdate
}

func (r ApiUpdateServiceAccountRequest) Body(body ServiceAccountForUpdate) ApiUpdateServiceAccountRequest {
	r.body = &body
	return r
}

func (r ApiUpdateServiceAccountRequest) Execute() (*ServiceAccount, *http.Response, error) {
	return r.ApiService.UpdateServiceAccountExecute(r)
}

/*
UpdateServiceAccount Updates a service account

	Updates a service account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param serviceAccountId The UUID of an existing Service Account

@return ApiUpdateServiceAccountRequest
*/
func (a *ServiceAccountsAPIService) UpdateServiceAccount(ctx context.Context, serviceAccountId string) ApiUpdateServiceAccountRequest {
	return ApiUpdateServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return ServiceAccount
func (a *ServiceAccountsAPIService) UpdateServiceAccountExecute(r ApiUpdateServiceAccountRequest) (*ServiceAccount, *http.Response, error) {
	var (
		traceKey            = "serviceaccountsapi.updateServiceAccount"
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccount
	)

	localVarPath := "/v1/service_accounts/{service_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"service_account_id"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
