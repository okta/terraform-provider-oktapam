/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicySecretPrivilege type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicySecretPrivilege{}

// SecurityPolicySecretPrivilege struct for SecurityPolicySecretPrivilege
type SecurityPolicySecretPrivilege struct {
	SecurityPolicyPrivilege
	// If `true`, the user has the privilege to list the contents of the folder
	List bool `json:"list"`
	// If `true`, the user has the privilege to create a folder
	FolderCreate bool `json:"folder_create"`
	// If `true`, the user has the privilege to update a folder
	FolderUpdate bool `json:"folder_update"`
	// If `true`, the user has the privilege to delete a folder
	FolderDelete bool `json:"folder_delete"`
	// If `true`, the user has the privilege to create a secret
	SecretCreate bool `json:"secret_create"`
	// If `true`, the user has the privilege to update a secret
	SecretUpdate bool `json:"secret_update"`
	// If `true`, the user has the privilege to reveal a secret
	SecretReveal bool `json:"secret_reveal"`
	// If `true`, the user has the privilege to delete a secret
	SecretDelete bool `json:"secret_delete"`
}

// NewSecurityPolicySecretPrivilege instantiates a new SecurityPolicySecretPrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicySecretPrivilege(list bool, folderCreate bool, folderUpdate bool, folderDelete bool, secretCreate bool, secretUpdate bool, secretReveal bool, secretDelete bool, type_ SecurityPolicyRulePrivilegeType) *SecurityPolicySecretPrivilege {
	this := SecurityPolicySecretPrivilege{}
	this.Type = type_
	this.List = list
	this.FolderCreate = folderCreate
	this.FolderUpdate = folderUpdate
	this.FolderDelete = folderDelete
	this.SecretCreate = secretCreate
	this.SecretUpdate = secretUpdate
	this.SecretReveal = secretReveal
	this.SecretDelete = secretDelete
	return &this
}

// NewSecurityPolicySecretPrivilegeWithDefaults instantiates a new SecurityPolicySecretPrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicySecretPrivilegeWithDefaults() *SecurityPolicySecretPrivilege {
	this := SecurityPolicySecretPrivilege{}
	return &this
}

// GetList returns the List field value
func (o *SecurityPolicySecretPrivilege) GetList() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.List
}

// GetListOk returns a tuple with the List field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicySecretPrivilege) GetListOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.List, true
}

// SetList sets field value
func (o *SecurityPolicySecretPrivilege) SetList(v bool) *SecurityPolicySecretPrivilege {
	o.List = v
	return o
}

// GetFolderCreate returns the FolderCreate field value
func (o *SecurityPolicySecretPrivilege) GetFolderCreate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FolderCreate
}

// GetFolderCreateOk returns a tuple with the FolderCreate field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicySecretPrivilege) GetFolderCreateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FolderCreate, true
}

// SetFolderCreate sets field value
func (o *SecurityPolicySecretPrivilege) SetFolderCreate(v bool) *SecurityPolicySecretPrivilege {
	o.FolderCreate = v
	return o
}

// GetFolderUpdate returns the FolderUpdate field value
func (o *SecurityPolicySecretPrivilege) GetFolderUpdate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FolderUpdate
}

// GetFolderUpdateOk returns a tuple with the FolderUpdate field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicySecretPrivilege) GetFolderUpdateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FolderUpdate, true
}

// SetFolderUpdate sets field value
func (o *SecurityPolicySecretPrivilege) SetFolderUpdate(v bool) *SecurityPolicySecretPrivilege {
	o.FolderUpdate = v
	return o
}

// GetFolderDelete returns the FolderDelete field value
func (o *SecurityPolicySecretPrivilege) GetFolderDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FolderDelete
}

// GetFolderDeleteOk returns a tuple with the FolderDelete field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicySecretPrivilege) GetFolderDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FolderDelete, true
}

// SetFolderDelete sets field value
func (o *SecurityPolicySecretPrivilege) SetFolderDelete(v bool) *SecurityPolicySecretPrivilege {
	o.FolderDelete = v
	return o
}

// GetSecretCreate returns the SecretCreate field value
func (o *SecurityPolicySecretPrivilege) GetSecretCreate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecretCreate
}

// GetSecretCreateOk returns a tuple with the SecretCreate field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicySecretPrivilege) GetSecretCreateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretCreate, true
}

// SetSecretCreate sets field value
func (o *SecurityPolicySecretPrivilege) SetSecretCreate(v bool) *SecurityPolicySecretPrivilege {
	o.SecretCreate = v
	return o
}

// GetSecretUpdate returns the SecretUpdate field value
func (o *SecurityPolicySecretPrivilege) GetSecretUpdate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecretUpdate
}

// GetSecretUpdateOk returns a tuple with the SecretUpdate field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicySecretPrivilege) GetSecretUpdateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretUpdate, true
}

// SetSecretUpdate sets field value
func (o *SecurityPolicySecretPrivilege) SetSecretUpdate(v bool) *SecurityPolicySecretPrivilege {
	o.SecretUpdate = v
	return o
}

// GetSecretReveal returns the SecretReveal field value
func (o *SecurityPolicySecretPrivilege) GetSecretReveal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecretReveal
}

// GetSecretRevealOk returns a tuple with the SecretReveal field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicySecretPrivilege) GetSecretRevealOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretReveal, true
}

// SetSecretReveal sets field value
func (o *SecurityPolicySecretPrivilege) SetSecretReveal(v bool) *SecurityPolicySecretPrivilege {
	o.SecretReveal = v
	return o
}

// GetSecretDelete returns the SecretDelete field value
func (o *SecurityPolicySecretPrivilege) GetSecretDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecretDelete
}

// GetSecretDeleteOk returns a tuple with the SecretDelete field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicySecretPrivilege) GetSecretDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretDelete, true
}

// SetSecretDelete sets field value
func (o *SecurityPolicySecretPrivilege) SetSecretDelete(v bool) *SecurityPolicySecretPrivilege {
	o.SecretDelete = v
	return o
}

func (o SecurityPolicySecretPrivilege) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicySecretPrivilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSecurityPolicyPrivilege, errSecurityPolicyPrivilege := json.Marshal(o.SecurityPolicyPrivilege)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	errSecurityPolicyPrivilege = json.Unmarshal([]byte(serializedSecurityPolicyPrivilege), &toSerialize)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	toSerialize["list"] = o.List
	toSerialize["folder_create"] = o.FolderCreate
	toSerialize["folder_update"] = o.FolderUpdate
	toSerialize["folder_delete"] = o.FolderDelete
	toSerialize["secret_create"] = o.SecretCreate
	toSerialize["secret_update"] = o.SecretUpdate
	toSerialize["secret_reveal"] = o.SecretReveal
	toSerialize["secret_delete"] = o.SecretDelete
	return toSerialize, nil
}

type NullableSecurityPolicySecretPrivilege struct {
	value *SecurityPolicySecretPrivilege
	isSet bool
}

func (v NullableSecurityPolicySecretPrivilege) Get() *SecurityPolicySecretPrivilege {
	return v.value
}

func (v *NullableSecurityPolicySecretPrivilege) Set(val *SecurityPolicySecretPrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicySecretPrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicySecretPrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicySecretPrivilege(val *SecurityPolicySecretPrivilege) *NullableSecurityPolicySecretPrivilege {
	return &NullableSecurityPolicySecretPrivilege{value: val, isSet: true}
}

func (v NullableSecurityPolicySecretPrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicySecretPrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
