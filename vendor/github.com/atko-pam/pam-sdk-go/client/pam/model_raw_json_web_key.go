/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the RawJSONWebKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawJSONWebKey{}

// RawJSONWebKey A JSON Web Key formatted in accordance with [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517).
type RawJSONWebKey struct {
	Kty *Kty `json:"kty,omitempty"`
	// The key ID
	Kid *string `json:"kid,omitempty"`
	Crv *Curve  `json:"crv,omitempty"`
	Alg *Alg    `json:"alg,omitempty"`
	// The intended use of the key
	Use *string `json:"use,omitempty"`
	// The key
	K *string `json:"k,omitempty"`
	// The x coordinate of the key
	X *string `json:"x,omitempty"`
	// The y coordinate of the key
	Y *string `json:"y,omitempty"`
	// The modulus of the public key
	N *string `json:"n,omitempty"`
	// The exponent of the public key
	E *string `json:"e,omitempty"`
	// The exponent of the private key
	D *string `json:"d,omitempty"`
	// The first prime factor of the private key
	P *string `json:"p,omitempty"`
	// The second prime factor of the private key
	Q *string `json:"q,omitempty"`
	// The first factor CRT exponent of the private key
	Dp *string `json:"dp,omitempty"`
	// The second factor CRT exponent of the private key
	Dq *string `json:"dq,omitempty"`
	// The first CRT coefficient of the private key
	Qi *string `json:"qi,omitempty"`
	// A list of X.509 certificates
	X5c []string `json:"x5c,omitempty"`
	// The URL of the X.509 certificates
	X5u *string `json:"x5u,omitempty"`
	// The SHA-1 thumbprint of the X.509 certificate
	X5t *string `json:"x5t,omitempty"`
	// The SHA-256 thumbprint of the X.509 certificate
	X5tS256 *string `json:"x5t#S256,omitempty"`
}

// NewRawJSONWebKey instantiates a new RawJSONWebKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawJSONWebKey() *RawJSONWebKey {
	this := RawJSONWebKey{}
	return &this
}

// NewRawJSONWebKeyWithDefaults instantiates a new RawJSONWebKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawJSONWebKeyWithDefaults() *RawJSONWebKey {
	this := RawJSONWebKey{}
	return &this
}

// GetKty returns the Kty field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetKty() Kty {
	if o == nil || IsNil(o.Kty) {
		var ret Kty
		return ret
	}
	return *o.Kty
}

// GetKtyOk returns a tuple with the Kty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetKtyOk() (*Kty, bool) {
	if o == nil || IsNil(o.Kty) {
		return nil, false
	}
	return o.Kty, true
}

// HasKty returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasKty() bool {
	if o != nil && !IsNil(o.Kty) {
		return true
	}

	return false
}

// SetKty gets a reference to the given Kty and assigns it to the Kty field.
func (o *RawJSONWebKey) SetKty(v Kty) *RawJSONWebKey {
	o.Kty = &v
	return o
}

// GetKid returns the Kid field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetKid() string {
	if o == nil || IsNil(o.Kid) {
		var ret string
		return ret
	}
	return *o.Kid
}

// GetKidOk returns a tuple with the Kid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetKidOk() (*string, bool) {
	if o == nil || IsNil(o.Kid) {
		return nil, false
	}
	return o.Kid, true
}

// HasKid returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasKid() bool {
	if o != nil && !IsNil(o.Kid) {
		return true
	}

	return false
}

// SetKid gets a reference to the given string and assigns it to the Kid field.
func (o *RawJSONWebKey) SetKid(v string) *RawJSONWebKey {
	o.Kid = &v
	return o
}

// GetCrv returns the Crv field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetCrv() Curve {
	if o == nil || IsNil(o.Crv) {
		var ret Curve
		return ret
	}
	return *o.Crv
}

// GetCrvOk returns a tuple with the Crv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetCrvOk() (*Curve, bool) {
	if o == nil || IsNil(o.Crv) {
		return nil, false
	}
	return o.Crv, true
}

// HasCrv returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasCrv() bool {
	if o != nil && !IsNil(o.Crv) {
		return true
	}

	return false
}

// SetCrv gets a reference to the given Curve and assigns it to the Crv field.
func (o *RawJSONWebKey) SetCrv(v Curve) *RawJSONWebKey {
	o.Crv = &v
	return o
}

// GetAlg returns the Alg field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetAlg() Alg {
	if o == nil || IsNil(o.Alg) {
		var ret Alg
		return ret
	}
	return *o.Alg
}

// GetAlgOk returns a tuple with the Alg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetAlgOk() (*Alg, bool) {
	if o == nil || IsNil(o.Alg) {
		return nil, false
	}
	return o.Alg, true
}

// HasAlg returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasAlg() bool {
	if o != nil && !IsNil(o.Alg) {
		return true
	}

	return false
}

// SetAlg gets a reference to the given Alg and assigns it to the Alg field.
func (o *RawJSONWebKey) SetAlg(v Alg) *RawJSONWebKey {
	o.Alg = &v
	return o
}

// GetUse returns the Use field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetUse() string {
	if o == nil || IsNil(o.Use) {
		var ret string
		return ret
	}
	return *o.Use
}

// GetUseOk returns a tuple with the Use field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetUseOk() (*string, bool) {
	if o == nil || IsNil(o.Use) {
		return nil, false
	}
	return o.Use, true
}

// HasUse returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasUse() bool {
	if o != nil && !IsNil(o.Use) {
		return true
	}

	return false
}

// SetUse gets a reference to the given string and assigns it to the Use field.
func (o *RawJSONWebKey) SetUse(v string) *RawJSONWebKey {
	o.Use = &v
	return o
}

// GetK returns the K field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetK() string {
	if o == nil || IsNil(o.K) {
		var ret string
		return ret
	}
	return *o.K
}

// GetKOk returns a tuple with the K field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetKOk() (*string, bool) {
	if o == nil || IsNil(o.K) {
		return nil, false
	}
	return o.K, true
}

// HasK returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasK() bool {
	if o != nil && !IsNil(o.K) {
		return true
	}

	return false
}

// SetK gets a reference to the given string and assigns it to the K field.
func (o *RawJSONWebKey) SetK(v string) *RawJSONWebKey {
	o.K = &v
	return o
}

// GetX returns the X field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetX() string {
	if o == nil || IsNil(o.X) {
		var ret string
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetXOk() (*string, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given string and assigns it to the X field.
func (o *RawJSONWebKey) SetX(v string) *RawJSONWebKey {
	o.X = &v
	return o
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetY() string {
	if o == nil || IsNil(o.Y) {
		var ret string
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetYOk() (*string, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given string and assigns it to the Y field.
func (o *RawJSONWebKey) SetY(v string) *RawJSONWebKey {
	o.Y = &v
	return o
}

// GetN returns the N field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetN() string {
	if o == nil || IsNil(o.N) {
		var ret string
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetNOk() (*string, bool) {
	if o == nil || IsNil(o.N) {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasN() bool {
	if o != nil && !IsNil(o.N) {
		return true
	}

	return false
}

// SetN gets a reference to the given string and assigns it to the N field.
func (o *RawJSONWebKey) SetN(v string) *RawJSONWebKey {
	o.N = &v
	return o
}

// GetE returns the E field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetE() string {
	if o == nil || IsNil(o.E) {
		var ret string
		return ret
	}
	return *o.E
}

// GetEOk returns a tuple with the E field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetEOk() (*string, bool) {
	if o == nil || IsNil(o.E) {
		return nil, false
	}
	return o.E, true
}

// HasE returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasE() bool {
	if o != nil && !IsNil(o.E) {
		return true
	}

	return false
}

// SetE gets a reference to the given string and assigns it to the E field.
func (o *RawJSONWebKey) SetE(v string) *RawJSONWebKey {
	o.E = &v
	return o
}

// GetD returns the D field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetD() string {
	if o == nil || IsNil(o.D) {
		var ret string
		return ret
	}
	return *o.D
}

// GetDOk returns a tuple with the D field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetDOk() (*string, bool) {
	if o == nil || IsNil(o.D) {
		return nil, false
	}
	return o.D, true
}

// HasD returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasD() bool {
	if o != nil && !IsNil(o.D) {
		return true
	}

	return false
}

// SetD gets a reference to the given string and assigns it to the D field.
func (o *RawJSONWebKey) SetD(v string) *RawJSONWebKey {
	o.D = &v
	return o
}

// GetP returns the P field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetP() string {
	if o == nil || IsNil(o.P) {
		var ret string
		return ret
	}
	return *o.P
}

// GetPOk returns a tuple with the P field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetPOk() (*string, bool) {
	if o == nil || IsNil(o.P) {
		return nil, false
	}
	return o.P, true
}

// HasP returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasP() bool {
	if o != nil && !IsNil(o.P) {
		return true
	}

	return false
}

// SetP gets a reference to the given string and assigns it to the P field.
func (o *RawJSONWebKey) SetP(v string) *RawJSONWebKey {
	o.P = &v
	return o
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetQ() string {
	if o == nil || IsNil(o.Q) {
		var ret string
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetQOk() (*string, bool) {
	if o == nil || IsNil(o.Q) {
		return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasQ() bool {
	if o != nil && !IsNil(o.Q) {
		return true
	}

	return false
}

// SetQ gets a reference to the given string and assigns it to the Q field.
func (o *RawJSONWebKey) SetQ(v string) *RawJSONWebKey {
	o.Q = &v
	return o
}

// GetDp returns the Dp field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetDp() string {
	if o == nil || IsNil(o.Dp) {
		var ret string
		return ret
	}
	return *o.Dp
}

// GetDpOk returns a tuple with the Dp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetDpOk() (*string, bool) {
	if o == nil || IsNil(o.Dp) {
		return nil, false
	}
	return o.Dp, true
}

// HasDp returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasDp() bool {
	if o != nil && !IsNil(o.Dp) {
		return true
	}

	return false
}

// SetDp gets a reference to the given string and assigns it to the Dp field.
func (o *RawJSONWebKey) SetDp(v string) *RawJSONWebKey {
	o.Dp = &v
	return o
}

// GetDq returns the Dq field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetDq() string {
	if o == nil || IsNil(o.Dq) {
		var ret string
		return ret
	}
	return *o.Dq
}

// GetDqOk returns a tuple with the Dq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetDqOk() (*string, bool) {
	if o == nil || IsNil(o.Dq) {
		return nil, false
	}
	return o.Dq, true
}

// HasDq returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasDq() bool {
	if o != nil && !IsNil(o.Dq) {
		return true
	}

	return false
}

// SetDq gets a reference to the given string and assigns it to the Dq field.
func (o *RawJSONWebKey) SetDq(v string) *RawJSONWebKey {
	o.Dq = &v
	return o
}

// GetQi returns the Qi field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetQi() string {
	if o == nil || IsNil(o.Qi) {
		var ret string
		return ret
	}
	return *o.Qi
}

// GetQiOk returns a tuple with the Qi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetQiOk() (*string, bool) {
	if o == nil || IsNil(o.Qi) {
		return nil, false
	}
	return o.Qi, true
}

// HasQi returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasQi() bool {
	if o != nil && !IsNil(o.Qi) {
		return true
	}

	return false
}

// SetQi gets a reference to the given string and assigns it to the Qi field.
func (o *RawJSONWebKey) SetQi(v string) *RawJSONWebKey {
	o.Qi = &v
	return o
}

// GetX5c returns the X5c field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetX5c() []string {
	if o == nil || IsNil(o.X5c) {
		var ret []string
		return ret
	}
	return o.X5c
}

// GetX5cOk returns a tuple with the X5c field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetX5cOk() ([]string, bool) {
	if o == nil || IsNil(o.X5c) {
		return nil, false
	}
	return o.X5c, true
}

// HasX5c returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasX5c() bool {
	if o != nil && !IsNil(o.X5c) {
		return true
	}

	return false
}

// SetX5c gets a reference to the given []string and assigns it to the X5c field.
func (o *RawJSONWebKey) SetX5c(v []string) *RawJSONWebKey {
	o.X5c = v
	return o
}

// GetX5u returns the X5u field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetX5u() string {
	if o == nil || IsNil(o.X5u) {
		var ret string
		return ret
	}
	return *o.X5u
}

// GetX5uOk returns a tuple with the X5u field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetX5uOk() (*string, bool) {
	if o == nil || IsNil(o.X5u) {
		return nil, false
	}
	return o.X5u, true
}

// HasX5u returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasX5u() bool {
	if o != nil && !IsNil(o.X5u) {
		return true
	}

	return false
}

// SetX5u gets a reference to the given string and assigns it to the X5u field.
func (o *RawJSONWebKey) SetX5u(v string) *RawJSONWebKey {
	o.X5u = &v
	return o
}

// GetX5t returns the X5t field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetX5t() string {
	if o == nil || IsNil(o.X5t) {
		var ret string
		return ret
	}
	return *o.X5t
}

// GetX5tOk returns a tuple with the X5t field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetX5tOk() (*string, bool) {
	if o == nil || IsNil(o.X5t) {
		return nil, false
	}
	return o.X5t, true
}

// HasX5t returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasX5t() bool {
	if o != nil && !IsNil(o.X5t) {
		return true
	}

	return false
}

// SetX5t gets a reference to the given string and assigns it to the X5t field.
func (o *RawJSONWebKey) SetX5t(v string) *RawJSONWebKey {
	o.X5t = &v
	return o
}

// GetX5tS256 returns the X5tS256 field value if set, zero value otherwise.
func (o *RawJSONWebKey) GetX5tS256() string {
	if o == nil || IsNil(o.X5tS256) {
		var ret string
		return ret
	}
	return *o.X5tS256
}

// GetX5tS256Ok returns a tuple with the X5tS256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RawJSONWebKey) GetX5tS256Ok() (*string, bool) {
	if o == nil || IsNil(o.X5tS256) {
		return nil, false
	}
	return o.X5tS256, true
}

// HasX5tS256 returns a boolean if a field has been set.
func (o *RawJSONWebKey) HasX5tS256() bool {
	if o != nil && !IsNil(o.X5tS256) {
		return true
	}

	return false
}

// SetX5tS256 gets a reference to the given string and assigns it to the X5tS256 field.
func (o *RawJSONWebKey) SetX5tS256(v string) *RawJSONWebKey {
	o.X5tS256 = &v
	return o
}

func (o RawJSONWebKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawJSONWebKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kty) {
		toSerialize["kty"] = o.Kty
	}
	if !IsNil(o.Kid) {
		toSerialize["kid"] = o.Kid
	}
	if !IsNil(o.Crv) {
		toSerialize["crv"] = o.Crv
	}
	if !IsNil(o.Alg) {
		toSerialize["alg"] = o.Alg
	}
	if !IsNil(o.Use) {
		toSerialize["use"] = o.Use
	}
	if !IsNil(o.K) {
		toSerialize["k"] = o.K
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}
	if !IsNil(o.N) {
		toSerialize["n"] = o.N
	}
	if !IsNil(o.E) {
		toSerialize["e"] = o.E
	}
	if !IsNil(o.D) {
		toSerialize["d"] = o.D
	}
	if !IsNil(o.P) {
		toSerialize["p"] = o.P
	}
	if !IsNil(o.Q) {
		toSerialize["q"] = o.Q
	}
	if !IsNil(o.Dp) {
		toSerialize["dp"] = o.Dp
	}
	if !IsNil(o.Dq) {
		toSerialize["dq"] = o.Dq
	}
	if !IsNil(o.Qi) {
		toSerialize["qi"] = o.Qi
	}
	if !IsNil(o.X5c) {
		toSerialize["x5c"] = o.X5c
	}
	if !IsNil(o.X5u) {
		toSerialize["x5u"] = o.X5u
	}
	if !IsNil(o.X5t) {
		toSerialize["x5t"] = o.X5t
	}
	if !IsNil(o.X5tS256) {
		toSerialize["x5t#S256"] = o.X5tS256
	}
	return toSerialize, nil
}

type NullableRawJSONWebKey struct {
	value *RawJSONWebKey
	isSet bool
}

func (v NullableRawJSONWebKey) Get() *RawJSONWebKey {
	return v.value
}

func (v *NullableRawJSONWebKey) Set(val *RawJSONWebKey) {
	v.value = val
	v.isSet = true
}

func (v NullableRawJSONWebKey) IsSet() bool {
	return v.isSet
}

func (v *NullableRawJSONWebKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawJSONWebKey(val *RawJSONWebKey) *NullableRawJSONWebKey {
	return &NullableRawJSONWebKey{value: val, isSet: true}
}

func (v NullableRawJSONWebKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawJSONWebKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
