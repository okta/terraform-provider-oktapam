/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// CloudProviderType If available, the name of cloud provider used by the Gateway
type CloudProviderType string

// List of CloudProviderType
const (
	CloudProviderType_AWS   CloudProviderType = "aws"
	CloudProviderType_GCE   CloudProviderType = "gce"
	CloudProviderType_AZURE CloudProviderType = "azure"
)

// All allowed values of CloudProviderType enum
var AllowedCloudProviderTypeEnumValues = []CloudProviderType{
	"aws",
	"gce",
	"azure",
}

func (v *CloudProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudProviderType(value)

	*v = enumTypeValue

	return nil
}

// NewCloudProviderTypeFromValue returns a pointer to a valid CloudProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudProviderTypeFromValue(v string) (*CloudProviderType, error) {
	ev := CloudProviderType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudProviderType) IsValid() bool {
	for _, existing := range AllowedCloudProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudProviderType value
func (v CloudProviderType) Ptr() *CloudProviderType {
	return &v
}

type NullableCloudProviderType struct {
	value *CloudProviderType
	isSet bool
}

func (v NullableCloudProviderType) Get() *CloudProviderType {
	return v.value
}

func (v *NullableCloudProviderType) Set(val *CloudProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudProviderType(val *CloudProviderType) *NullableCloudProviderType {
	return &NullableCloudProviderType{value: val, isSet: true}
}

func (v NullableCloudProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
