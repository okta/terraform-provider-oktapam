/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// ADConnectionStatus All possible statuses of a connection.
type ADConnectionStatus string

// List of ADConnectionStatus
const (
	ADConnectionStatus_CONNECTED    ADConnectionStatus = "connected"
	ADConnectionStatus_DISCONNECTED ADConnectionStatus = "disconnected"
	ADConnectionStatus_INACTIVE     ADConnectionStatus = "inactive"
)

// All allowed values of ADConnectionStatus enum
var AllowedADConnectionStatusEnumValues = []ADConnectionStatus{
	"connected",
	"disconnected",
	"inactive",
}

func (v *ADConnectionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ADConnectionStatus(value)

	*v = enumTypeValue

	return nil
}

// NewADConnectionStatusFromValue returns a pointer to a valid ADConnectionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewADConnectionStatusFromValue(v string) (*ADConnectionStatus, error) {
	ev := ADConnectionStatus(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ADConnectionStatus) IsValid() bool {
	for _, existing := range AllowedADConnectionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ADConnectionStatus value
func (v ADConnectionStatus) Ptr() *ADConnectionStatus {
	return &v
}

type NullableADConnectionStatus struct {
	value *ADConnectionStatus
	isSet bool
}

func (v NullableADConnectionStatus) Get() *ADConnectionStatus {
	return v.value
}

func (v *NullableADConnectionStatus) Set(val *ADConnectionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableADConnectionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableADConnectionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADConnectionStatus(val *ADConnectionStatus) *NullableADConnectionStatus {
	return &NullableADConnectionStatus{value: val, isSet: true}
}

func (v NullableADConnectionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADConnectionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
