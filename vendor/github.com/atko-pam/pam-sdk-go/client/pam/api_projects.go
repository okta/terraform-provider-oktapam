/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// ProjectsAPIService ProjectsAPI service
type ProjectsAPIService service

type ApiCreateResourceGroupProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	project         *Project
}

func (r ApiCreateResourceGroupProjectRequest) Project(project Project) ApiCreateResourceGroupProjectRequest {
	r.project = &project
	return r
}

func (r ApiCreateResourceGroupProjectRequest) Execute() (*Project, *http.Response, error) {
	return r.ApiService.CreateResourceGroupProjectExecute(r)
}

/*
	CreateResourceGroupProject Create a Project in a Resource Group

	    Creates a Project in the specified Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	@return ApiCreateResourceGroupProjectRequest
*/
func (a *ProjectsAPIService) CreateResourceGroupProject(ctx context.Context, teamName string, resourceGroupId string) ApiCreateResourceGroupProjectRequest {
	return ApiCreateResourceGroupProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return Project
func (a *ProjectsAPIService) CreateResourceGroupProjectExecute(r ApiCreateResourceGroupProjectRequest) (*Project, *http.Response, error) {
	var (
		traceKey            = "projectsapi.createResourceGroupProject"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Project
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.project
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiCreateResourceGroupProjectServerEnrollmentTokenRequest struct {
	ctx                   context.Context
	ApiService            *ProjectsAPIService
	teamName              string
	resourceGroupId       string
	projectId             string
	serverEnrollmentToken *ServerEnrollmentToken
}

func (r ApiCreateResourceGroupProjectServerEnrollmentTokenRequest) ServerEnrollmentToken(serverEnrollmentToken ServerEnrollmentToken) ApiCreateResourceGroupProjectServerEnrollmentTokenRequest {
	r.serverEnrollmentToken = &serverEnrollmentToken
	return r
}

func (r ApiCreateResourceGroupProjectServerEnrollmentTokenRequest) Execute() (*ServerEnrollmentToken, *http.Response, error) {
	return r.ApiService.CreateResourceGroupProjectServerEnrollmentTokenExecute(r)
}

/*
	CreateResourceGroupProjectServerEnrollmentToken Create a Server Enrollment Token

	    Creates a Server Enrollment Token for a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiCreateResourceGroupProjectServerEnrollmentTokenRequest
*/
func (a *ProjectsAPIService) CreateResourceGroupProjectServerEnrollmentToken(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiCreateResourceGroupProjectServerEnrollmentTokenRequest {
	return ApiCreateResourceGroupProjectServerEnrollmentTokenRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ServerEnrollmentToken
func (a *ProjectsAPIService) CreateResourceGroupProjectServerEnrollmentTokenExecute(r ApiCreateResourceGroupProjectServerEnrollmentTokenRequest) (*ServerEnrollmentToken, *http.Response, error) {
	var (
		traceKey            = "projectsapi.createResourceGroupProjectServerEnrollmentToken"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServerEnrollmentToken
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_enrollment_tokens"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serverEnrollmentToken
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiFetchResourceGroupProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiFetchResourceGroupProjectRequest) Execute() (*Project, *http.Response, error) {
	return r.ApiService.FetchResourceGroupProjectExecute(r)
}

/*
	FetchResourceGroupProject Retrieve a Project from a Resource Group

	    Retrieves a Project from a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiFetchResourceGroupProjectRequest
*/
func (a *ProjectsAPIService) FetchResourceGroupProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiFetchResourceGroupProjectRequest {
	return ApiFetchResourceGroupProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return Project
func (a *ProjectsAPIService) FetchResourceGroupProjectExecute(r ApiFetchResourceGroupProjectRequest) (*Project, *http.Response, error) {
	var (
		traceKey            = "projectsapi.fetchResourceGroupProject"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Project
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest) Execute() (*ResourceCheckoutSettings, *http.Response, error) {
	return r.ApiService.FetchResourceGroupServerBasedProjectCheckoutSettingsExecute(r)
}

/*
	FetchResourceGroupServerBasedProjectCheckoutSettings Retrieves the checkout settings configured for a project, specific to server resource type.

	    Retrieves the checkout settings configured for a project, specific to server resource type.

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`, `security_admin`, `delegated_security_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) FetchResourceGroupServerBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest {
	return ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ResourceCheckoutSettings
func (a *ProjectsAPIService) FetchResourceGroupServerBasedProjectCheckoutSettingsExecute(r ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest) (*ResourceCheckoutSettings, *http.Response, error) {
	var (
		traceKey            = "projectsapi.fetchResourceGroupServerBasedProjectCheckoutSettings"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceCheckoutSettings
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetPasswordPolicyForProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiGetPasswordPolicyForProjectRequest) Execute() (*PasswordPolicy, *http.Response, error) {
	return r.ApiService.GetPasswordPolicyForProjectExecute(r)
}

/*
	GetPasswordPolicyForProject Retrieve Project Password Policy for Server Accounts

	    Retrieves a Password Policy for a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiGetPasswordPolicyForProjectRequest
*/
func (a *ProjectsAPIService) GetPasswordPolicyForProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiGetPasswordPolicyForProjectRequest {
	return ApiGetPasswordPolicyForProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicy
func (a *ProjectsAPIService) GetPasswordPolicyForProjectExecute(r ApiGetPasswordPolicyForProjectRequest) (*PasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getPasswordPolicyForProject"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetProjectPasswordPolicyForDatabaseResourcesRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiGetProjectPasswordPolicyForDatabaseResourcesRequest) Execute() (*PasswordPolicy, *http.Response, error) {
	return r.ApiService.GetProjectPasswordPolicyForDatabaseResourcesExecute(r)
}

/*
	GetProjectPasswordPolicyForDatabaseResources Retrieve a Project Password Policy for Database Resources

	    Retrieves a Project Password Policy for Database Resources in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiGetProjectPasswordPolicyForDatabaseResourcesRequest
*/
func (a *ProjectsAPIService) GetProjectPasswordPolicyForDatabaseResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiGetProjectPasswordPolicyForDatabaseResourcesRequest {
	return ApiGetProjectPasswordPolicyForDatabaseResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicy
func (a *ProjectsAPIService) GetProjectPasswordPolicyForDatabaseResourcesExecute(r ApiGetProjectPasswordPolicyForDatabaseResourcesRequest) (*PasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getProjectPasswordPolicyForDatabaseResources"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resource_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetResourceGroupProjectServerEnrollmentTokenRequest struct {
	ctx                     context.Context
	ApiService              *ProjectsAPIService
	teamName                string
	resourceGroupId         string
	projectId               string
	serverEnrollmentTokenId string
}

func (r ApiGetResourceGroupProjectServerEnrollmentTokenRequest) Execute() (*ServerEnrollmentToken, *http.Response, error) {
	return r.ApiService.GetResourceGroupProjectServerEnrollmentTokenExecute(r)
}

/*
	GetResourceGroupProjectServerEnrollmentToken Retrieve a Server Enrollment Token

	    Retrieves a Server Enrollment Token from a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param serverEnrollmentTokenId The UUID of a Server Enrollment Token
	@return ApiGetResourceGroupProjectServerEnrollmentTokenRequest
*/
func (a *ProjectsAPIService) GetResourceGroupProjectServerEnrollmentToken(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverEnrollmentTokenId string) ApiGetResourceGroupProjectServerEnrollmentTokenRequest {
	return ApiGetResourceGroupProjectServerEnrollmentTokenRequest{
		ApiService:              a,
		ctx:                     ctx,
		teamName:                teamName,
		resourceGroupId:         resourceGroupId,
		projectId:               projectId,
		serverEnrollmentTokenId: serverEnrollmentTokenId,
	}
}

// Execute executes the request
//
//	@return ServerEnrollmentToken
func (a *ProjectsAPIService) GetResourceGroupProjectServerEnrollmentTokenExecute(r ApiGetResourceGroupProjectServerEnrollmentTokenRequest) (*ServerEnrollmentToken, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getResourceGroupProjectServerEnrollmentToken"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServerEnrollmentToken
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_enrollment_tokens/{server_enrollment_token_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_enrollment_token_id"+"}", url.PathEscape(parameterValueToString(r.serverEnrollmentTokenId, "serverEnrollmentTokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetServerAccountDetailsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	serverAccountId string
}

func (r ApiGetServerAccountDetailsRequest) Execute() (*GetServerAccountDetailsResponse, *http.Response, error) {
	return r.ApiService.GetServerAccountDetailsExecute(r)
}

/*
	GetServerAccountDetails Retrieve a Server Account

	    Retrieves a Server Account from a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param serverAccountId The UUID of a Server Account
	@return ApiGetServerAccountDetailsRequest
*/
func (a *ProjectsAPIService) GetServerAccountDetails(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverAccountId string) ApiGetServerAccountDetailsRequest {
	return ApiGetServerAccountDetailsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		serverAccountId: serverAccountId,
	}
}

// Execute executes the request
//
//	@return GetServerAccountDetailsResponse
func (a *ProjectsAPIService) GetServerAccountDetailsExecute(r ApiGetServerAccountDetailsRequest) (*GetServerAccountDetailsResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getServerAccountDetails"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetServerAccountDetailsResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_accounts/{server_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_account_id"+"}", url.PathEscape(parameterValueToString(r.serverAccountId, "serverAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListResourceGroupProjectServerEnrollmentTokensRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiListResourceGroupProjectServerEnrollmentTokensRequest) Execute() (*ListResourceGroupProjectServerEnrollmentTokensResponse, *http.Response, error) {
	return r.ApiService.ListResourceGroupProjectServerEnrollmentTokensExecute(r)
}

/*
	ListResourceGroupProjectServerEnrollmentTokens List all Server Enrollment Tokens in a Project

	    Lists all Server Enrollment Tokens in a Resource Group Project

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiListResourceGroupProjectServerEnrollmentTokensRequest
*/
func (a *ProjectsAPIService) ListResourceGroupProjectServerEnrollmentTokens(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiListResourceGroupProjectServerEnrollmentTokensRequest {
	return ApiListResourceGroupProjectServerEnrollmentTokensRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ListResourceGroupProjectServerEnrollmentTokensResponse
func (a *ProjectsAPIService) ListResourceGroupProjectServerEnrollmentTokensExecute(r ApiListResourceGroupProjectServerEnrollmentTokensRequest) (*ListResourceGroupProjectServerEnrollmentTokensResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listResourceGroupProjectServerEnrollmentTokens"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListResourceGroupProjectServerEnrollmentTokensResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_enrollment_tokens"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListResourceGroupProjectsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
}

func (r ApiListResourceGroupProjectsRequest) Execute() (*ListResourceGroupProjects, *http.Response, error) {
	return r.ApiService.ListResourceGroupProjectsExecute(r)
}

/*
	ListResourceGroupProjects List all Projects in a Resource Group

	    Lists all Projects in the specified Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	@return ApiListResourceGroupProjectsRequest
*/
func (a *ProjectsAPIService) ListResourceGroupProjects(ctx context.Context, teamName string, resourceGroupId string) ApiListResourceGroupProjectsRequest {
	return ApiListResourceGroupProjectsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return ListResourceGroupProjects
func (a *ProjectsAPIService) ListResourceGroupProjectsExecute(r ApiListResourceGroupProjectsRequest) (*ListResourceGroupProjects, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listResourceGroupProjects"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListResourceGroupProjects
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListServerAccountsForProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiListServerAccountsForProjectRequest) Execute() (*ListServerAccountsForProjectResponse, *http.Response, error) {
	return r.ApiService.ListServerAccountsForProjectExecute(r)
}

/*
	ListServerAccountsForProject List all Server Accounts in a Project

	    Lists all Server Accounts in a Resource Group Project

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiListServerAccountsForProjectRequest
*/
func (a *ProjectsAPIService) ListServerAccountsForProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiListServerAccountsForProjectRequest {
	return ApiListServerAccountsForProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ListServerAccountsForProjectResponse
func (a *ProjectsAPIService) ListServerAccountsForProjectExecute(r ApiListServerAccountsForProjectRequest) (*ListServerAccountsForProjectResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listServerAccountsForProject"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListServerAccountsForProjectResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListServerAccountsForServerRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	serverId        string
}

func (r ApiListServerAccountsForServerRequest) Execute() (*ListServerAccountsForServerResponse, *http.Response, error) {
	return r.ApiService.ListServerAccountsForServerExecute(r)
}

/*
	ListServerAccountsForServer List all Server Accounts for a Server

	    Lists all Server Accounts for a Server in a Project

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param serverId The UUID of an enrolled Server
	@return ApiListServerAccountsForServerRequest
*/
func (a *ProjectsAPIService) ListServerAccountsForServer(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverId string) ApiListServerAccountsForServerRequest {
	return ApiListServerAccountsForServerRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		serverId:        serverId,
	}
}

// Execute executes the request
//
//	@return ListServerAccountsForServerResponse
func (a *ProjectsAPIService) ListServerAccountsForServerExecute(r ApiListServerAccountsForServerRequest) (*ListServerAccountsForServerResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listServerAccountsForServer"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListServerAccountsForServerResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/servers/{server_id}/server_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_id"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiRemoveResourceGroupProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiRemoveResourceGroupProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveResourceGroupProjectExecute(r)
}

/*
	RemoveResourceGroupProject Delete a Project from a Resource Group

	    Deletes a Project from a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiRemoveResourceGroupProjectRequest
*/
func (a *ProjectsAPIService) RemoveResourceGroupProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiRemoveResourceGroupProjectRequest {
	return ApiRemoveResourceGroupProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) RemoveResourceGroupProjectExecute(r ApiRemoveResourceGroupProjectRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.removeResourceGroupProject"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if localVarHTTPResponse == nil && err != nil {
		return nil, err
	}

	return localVarHTTPResponse, err
}

type ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest struct {
	ctx                     context.Context
	ApiService              *ProjectsAPIService
	teamName                string
	resourceGroupId         string
	projectId               string
	serverEnrollmentTokenId string
}

func (r ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveResourceGroupProjectServerEnrollmentTokenExecute(r)
}

/*
	RemoveResourceGroupProjectServerEnrollmentToken Delete a Server Enrollment Token

	    Deletes a Server Enrollment Token from a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param serverEnrollmentTokenId The UUID of a Server Enrollment Token
	@return ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest
*/
func (a *ProjectsAPIService) RemoveResourceGroupProjectServerEnrollmentToken(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverEnrollmentTokenId string) ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest {
	return ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest{
		ApiService:              a,
		ctx:                     ctx,
		teamName:                teamName,
		resourceGroupId:         resourceGroupId,
		projectId:               projectId,
		serverEnrollmentTokenId: serverEnrollmentTokenId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) RemoveResourceGroupProjectServerEnrollmentTokenExecute(r ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.removeResourceGroupProjectServerEnrollmentToken"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_enrollment_tokens/{server_enrollment_token_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_enrollment_token_id"+"}", url.PathEscape(parameterValueToString(r.serverEnrollmentTokenId, "serverEnrollmentTokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if localVarHTTPResponse == nil && err != nil {
		return nil, err
	}

	return localVarHTTPResponse, err
}

type ApiUpdatePasswordPolicyForProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	passwordPolicy  *PasswordPolicy
}

func (r ApiUpdatePasswordPolicyForProjectRequest) PasswordPolicy(passwordPolicy PasswordPolicy) ApiUpdatePasswordPolicyForProjectRequest {
	r.passwordPolicy = &passwordPolicy
	return r
}

func (r ApiUpdatePasswordPolicyForProjectRequest) Execute() (*PasswordPolicy, *http.Response, error) {
	return r.ApiService.UpdatePasswordPolicyForProjectExecute(r)
}

/*
	UpdatePasswordPolicyForProject Update Project Password Policy for Server Accounts

	    Updates a Password Policy for a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiUpdatePasswordPolicyForProjectRequest
*/
func (a *ProjectsAPIService) UpdatePasswordPolicyForProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdatePasswordPolicyForProjectRequest {
	return ApiUpdatePasswordPolicyForProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicy
func (a *ProjectsAPIService) UpdatePasswordPolicyForProjectExecute(r ApiUpdatePasswordPolicyForProjectRequest) (*PasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.updatePasswordPolicyForProject"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordPolicy
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	passwordPolicy  *PasswordPolicy
}

func (r ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest) PasswordPolicy(passwordPolicy PasswordPolicy) ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest {
	r.passwordPolicy = &passwordPolicy
	return r
}

func (r ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest) Execute() (*PasswordPolicy, *http.Response, error) {
	return r.ApiService.UpdateProjectPasswordPolicyForDatabaseResourcesExecute(r)
}

/*
	UpdateProjectPasswordPolicyForDatabaseResources Update a Project Password Policy for Database Resources

	    Updates a Project Password Policy for Database Resources in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest
*/
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForDatabaseResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest {
	return ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicy
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForDatabaseResourcesExecute(r ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest) (*PasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.updateProjectPasswordPolicyForDatabaseResources"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resource_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordPolicy
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateResourceGroupProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	project         *Project
}

func (r ApiUpdateResourceGroupProjectRequest) Project(project Project) ApiUpdateResourceGroupProjectRequest {
	r.project = &project
	return r
}

func (r ApiUpdateResourceGroupProjectRequest) Execute() (*Project, *http.Response, error) {
	return r.ApiService.UpdateResourceGroupProjectExecute(r)
}

/*
	UpdateResourceGroupProject Update a Project in a Resource Group

	    Updates a Project in a Resource Group

This endpoint requires one of the following roles: `resource_admin`, `delegated_resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiUpdateResourceGroupProjectRequest
*/
func (a *ProjectsAPIService) UpdateResourceGroupProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateResourceGroupProjectRequest {
	return ApiUpdateResourceGroupProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return Project
func (a *ProjectsAPIService) UpdateResourceGroupProjectExecute(r ApiUpdateResourceGroupProjectRequest) (*Project, *http.Response, error) {
	var (
		traceKey            = "projectsapi.updateResourceGroupProject"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Project
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.project
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest struct {
	ctx                      context.Context
	ApiService               *ProjectsAPIService
	teamName                 string
	resourceGroupId          string
	projectId                string
	resourceCheckoutSettings *ResourceCheckoutSettings
}

func (r ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest) ResourceCheckoutSettings(resourceCheckoutSettings ResourceCheckoutSettings) ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest {
	r.resourceCheckoutSettings = &resourceCheckoutSettings
	return r
}

func (r ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateResourceGroupServerBasedProjectCheckoutSettingsExecute(r)
}

/*
	UpdateResourceGroupServerBasedProjectCheckoutSettings Update the checkout settings configured for a project, specific to server resource type

	    Update the checkout settings configured for a project, specific to server resource type

This endpoint requires one of the following roles: `security_admin`, `delegated_security_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	@return ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) UpdateResourceGroupServerBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest {
	return ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) UpdateResourceGroupServerBasedProjectCheckoutSettingsExecute(r ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.updateResourceGroupServerBasedProjectCheckoutSettings"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceCheckoutSettings
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if localVarHTTPResponse == nil && err != nil {
		return nil, err
	}

	return localVarHTTPResponse, err
}
