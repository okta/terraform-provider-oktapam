/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProjectsAPIService ProjectsAPI service
type ProjectsAPIService service

type ApiAdminCheckinResourceRequest struct {
	ctx                    context.Context
	ApiService             *ProjectsAPIService
	teamName               string
	resourceGroupId        string
	projectId              string
	checkinResourceRequest *CheckinResourceRequest
}

func (r ApiAdminCheckinResourceRequest) CheckinResourceRequest(checkinResourceRequest CheckinResourceRequest) ApiAdminCheckinResourceRequest {
	r.checkinResourceRequest = &checkinResourceRequest
	return r
}

func (r ApiAdminCheckinResourceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminCheckinResourceExecute(r)
}

/*
AdminCheckinResource Check in a resource

	Checks in a resource (forcefully). As an admin, use this request to return a resource that any user has checked out.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiAdminCheckinResourceRequest
*/
func (a *ProjectsAPIService) AdminCheckinResource(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiAdminCheckinResourceRequest {
	return ApiAdminCheckinResourceRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) AdminCheckinResourceExecute(r ApiAdminCheckinResourceRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.adminCheckinResource"
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/checkin_resource"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.checkinResourceRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiAdminRotateResourceRequest struct {
	ctx                   context.Context
	ApiService            *ProjectsAPIService
	teamName              string
	resourceGroupId       string
	projectId             string
	rotateResourceRequest *RotateResourceRequest
}

func (r ApiAdminRotateResourceRequest) RotateResourceRequest(rotateResourceRequest RotateResourceRequest) ApiAdminRotateResourceRequest {
	r.rotateResourceRequest = &rotateResourceRequest
	return r
}

func (r ApiAdminRotateResourceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminRotateResourceExecute(r)
}

/*
AdminRotateResource Rotate the password for a given resource in a project

	Rotates the password for a resource within a specified resource group and project

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiAdminRotateResourceRequest
*/
func (a *ProjectsAPIService) AdminRotateResource(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiAdminRotateResourceRequest {
	return ApiAdminRotateResourceRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) AdminRotateResourceExecute(r ApiAdminRotateResourceRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.adminRotateResource"
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/rotate_resource"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rotateResourceRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiCreateResourceGroupProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	project         *Project
}

func (r ApiCreateResourceGroupProjectRequest) Project(project Project) ApiCreateResourceGroupProjectRequest {
	r.project = &project
	return r
}

func (r ApiCreateResourceGroupProjectRequest) Execute() (*Project, *http.Response, error) {
	return r.ApiService.CreateResourceGroupProjectExecute(r)
}

/*
CreateResourceGroupProject Create a project in a resource group

	Creates a project in the specified resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group

@return ApiCreateResourceGroupProjectRequest
*/
func (a *ProjectsAPIService) CreateResourceGroupProject(ctx context.Context, teamName string, resourceGroupId string) ApiCreateResourceGroupProjectRequest {
	return ApiCreateResourceGroupProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return Project
func (a *ProjectsAPIService) CreateResourceGroupProjectExecute(r ApiCreateResourceGroupProjectRequest) (*Project, *http.Response, error) {
	var (
		traceKey            = "projectsapi.createResourceGroupProject"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Project
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.project
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiCreateResourceGroupProjectServerEnrollmentTokenRequest struct {
	ctx                   context.Context
	ApiService            *ProjectsAPIService
	teamName              string
	resourceGroupId       string
	projectId             string
	serverEnrollmentToken *ServerEnrollmentToken
}

func (r ApiCreateResourceGroupProjectServerEnrollmentTokenRequest) ServerEnrollmentToken(serverEnrollmentToken ServerEnrollmentToken) ApiCreateResourceGroupProjectServerEnrollmentTokenRequest {
	r.serverEnrollmentToken = &serverEnrollmentToken
	return r
}

func (r ApiCreateResourceGroupProjectServerEnrollmentTokenRequest) Execute() (*ServerEnrollmentToken, *http.Response, error) {
	return r.ApiService.CreateResourceGroupProjectServerEnrollmentTokenExecute(r)
}

/*
CreateResourceGroupProjectServerEnrollmentToken Create a server enrollment token

	Creates a server enrollment token for a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiCreateResourceGroupProjectServerEnrollmentTokenRequest
*/
func (a *ProjectsAPIService) CreateResourceGroupProjectServerEnrollmentToken(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiCreateResourceGroupProjectServerEnrollmentTokenRequest {
	return ApiCreateResourceGroupProjectServerEnrollmentTokenRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ServerEnrollmentToken
func (a *ProjectsAPIService) CreateResourceGroupProjectServerEnrollmentTokenExecute(r ApiCreateResourceGroupProjectServerEnrollmentTokenRequest) (*ServerEnrollmentToken, *http.Response, error) {
	var (
		traceKey            = "projectsapi.createResourceGroupProjectServerEnrollmentToken"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServerEnrollmentToken
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_enrollment_tokens"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serverEnrollmentToken
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiFetchResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiFetchResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest) Execute() (*ActiveDirectoryCheckoutSettings, *http.Response, error) {
	return r.ApiService.FetchResourceGroupActiveDirectoryBasedProjectCheckoutSettingsExecute(r)
}

/*
FetchResourceGroupActiveDirectoryBasedProjectCheckoutSettings Retrieve the checkout settings for an Active Directory account resource group project

	Retrieves the checkout settings configured for a resource group project that's specific to the Active Directory account

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiFetchResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) FetchResourceGroupActiveDirectoryBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiFetchResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest {
	return ApiFetchResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ActiveDirectoryCheckoutSettings
func (a *ProjectsAPIService) FetchResourceGroupActiveDirectoryBasedProjectCheckoutSettingsExecute(r ApiFetchResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest) (*ActiveDirectoryCheckoutSettings, *http.Response, error) {
	var (
		traceKey            = "projectsapi.fetchResourceGroupActiveDirectoryBasedProjectCheckoutSettings"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ActiveDirectoryCheckoutSettings
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/active_directory_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiFetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiFetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest) Execute() (*APIServiceAccountCheckoutSettings, *http.Response, error) {
	return r.ApiService.FetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsExecute(r)
}

/*
FetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettings Retrieve the checkout settings for a Universal Directory resource group project

	Retrieves the checkout settings configured for a resource group project that's specific to the Universal Directory

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiFetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) FetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiFetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest {
	return ApiFetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return APIServiceAccountCheckoutSettings
func (a *ProjectsAPIService) FetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsExecute(r ApiFetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest) (*APIServiceAccountCheckoutSettings, *http.Response, error) {
	var (
		traceKey            = "projectsapi.fetchResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettings"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *APIServiceAccountCheckoutSettings
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/okta_universal_directory_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiFetchResourceGroupProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiFetchResourceGroupProjectRequest) Execute() (*Project, *http.Response, error) {
	return r.ApiService.FetchResourceGroupProjectExecute(r)
}

/*
FetchResourceGroupProject Retrieve a project from a resource group

	Retrieves a project from a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiFetchResourceGroupProjectRequest
*/
func (a *ProjectsAPIService) FetchResourceGroupProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiFetchResourceGroupProjectRequest {
	return ApiFetchResourceGroupProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return Project
func (a *ProjectsAPIService) FetchResourceGroupProjectExecute(r ApiFetchResourceGroupProjectRequest) (*Project, *http.Response, error) {
	var (
		traceKey            = "projectsapi.fetchResourceGroupProject"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Project
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiFetchResourceGroupSaasAppBasedProjectCheckoutSettingsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiFetchResourceGroupSaasAppBasedProjectCheckoutSettingsRequest) Execute() (*APIServiceAccountCheckoutSettings, *http.Response, error) {
	return r.ApiService.FetchResourceGroupSaasAppBasedProjectCheckoutSettingsExecute(r)
}

/*
FetchResourceGroupSaasAppBasedProjectCheckoutSettings Retrieve the checkout settings for a SaaS app resource group project

	Retrieves the checkout settings configured for a resource group project that's specific to the SaaS app

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiFetchResourceGroupSaasAppBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) FetchResourceGroupSaasAppBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiFetchResourceGroupSaasAppBasedProjectCheckoutSettingsRequest {
	return ApiFetchResourceGroupSaasAppBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return APIServiceAccountCheckoutSettings
func (a *ProjectsAPIService) FetchResourceGroupSaasAppBasedProjectCheckoutSettingsExecute(r ApiFetchResourceGroupSaasAppBasedProjectCheckoutSettingsRequest) (*APIServiceAccountCheckoutSettings, *http.Response, error) {
	var (
		traceKey            = "projectsapi.fetchResourceGroupSaasAppBasedProjectCheckoutSettings"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *APIServiceAccountCheckoutSettings
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/saas_app_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest) Execute() (*ResourceCheckoutSettings, *http.Response, error) {
	return r.ApiService.FetchResourceGroupServerBasedProjectCheckoutSettingsExecute(r)
}

/*
FetchResourceGroupServerBasedProjectCheckoutSettings Retrieve the checkout settings for a server resource group project

	Retrieves the checkout settings configured for a resource group project that's specific to the server

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) FetchResourceGroupServerBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest {
	return ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ResourceCheckoutSettings
func (a *ProjectsAPIService) FetchResourceGroupServerBasedProjectCheckoutSettingsExecute(r ApiFetchResourceGroupServerBasedProjectCheckoutSettingsRequest) (*ResourceCheckoutSettings, *http.Response, error) {
	var (
		traceKey            = "projectsapi.fetchResourceGroupServerBasedProjectCheckoutSettings"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceCheckoutSettings
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetPasswordPolicyForProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiGetPasswordPolicyForProjectRequest) Execute() (*PasswordPolicy, *http.Response, error) {
	return r.ApiService.GetPasswordPolicyForProjectExecute(r)
}

/*
GetPasswordPolicyForProject Retrieve project password policy for server accounts

	Retrieves a password policy for a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiGetPasswordPolicyForProjectRequest
*/
func (a *ProjectsAPIService) GetPasswordPolicyForProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiGetPasswordPolicyForProjectRequest {
	return ApiGetPasswordPolicyForProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicy
func (a *ProjectsAPIService) GetPasswordPolicyForProjectExecute(r ApiGetPasswordPolicyForProjectRequest) (*PasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getPasswordPolicyForProject"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetProjectPasswordPolicyForActiveDirectoryResourcesRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiGetProjectPasswordPolicyForActiveDirectoryResourcesRequest) Execute() (*ActiveDirectoryPasswordPolicy, *http.Response, error) {
	return r.ApiService.GetProjectPasswordPolicyForActiveDirectoryResourcesExecute(r)
}

/*
GetProjectPasswordPolicyForActiveDirectoryResources Retrieve a project password policy for Active Directory resources

	Retrieves a project password policy for Active Directory resources in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiGetProjectPasswordPolicyForActiveDirectoryResourcesRequest
*/
func (a *ProjectsAPIService) GetProjectPasswordPolicyForActiveDirectoryResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiGetProjectPasswordPolicyForActiveDirectoryResourcesRequest {
	return ApiGetProjectPasswordPolicyForActiveDirectoryResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ActiveDirectoryPasswordPolicy
func (a *ProjectsAPIService) GetProjectPasswordPolicyForActiveDirectoryResourcesExecute(r ApiGetProjectPasswordPolicyForActiveDirectoryResourcesRequest) (*ActiveDirectoryPasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getProjectPasswordPolicyForActiveDirectoryResources"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ActiveDirectoryPasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/active_directory_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetProjectPasswordPolicyForDatabaseResourcesRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiGetProjectPasswordPolicyForDatabaseResourcesRequest) Execute() (*PasswordPolicy, *http.Response, error) {
	return r.ApiService.GetProjectPasswordPolicyForDatabaseResourcesExecute(r)
}

/*
GetProjectPasswordPolicyForDatabaseResources Retrieve a project password policy for database resources

	Retrieves a project password policy for database resources in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiGetProjectPasswordPolicyForDatabaseResourcesRequest
*/
func (a *ProjectsAPIService) GetProjectPasswordPolicyForDatabaseResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiGetProjectPasswordPolicyForDatabaseResourcesRequest {
	return ApiGetProjectPasswordPolicyForDatabaseResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicy
func (a *ProjectsAPIService) GetProjectPasswordPolicyForDatabaseResourcesExecute(r ApiGetProjectPasswordPolicyForDatabaseResourcesRequest) (*PasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getProjectPasswordPolicyForDatabaseResources"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resource_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiGetProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest) Execute() (*PasswordPolicyWithExclude, *http.Response, error) {
	return r.ApiService.GetProjectPasswordPolicyForOktaUniversalDirectoryResourcesExecute(r)
}

/*
GetProjectPasswordPolicyForOktaUniversalDirectoryResources Retrieve a project password policy for Universal Directory resources

	Retrieves a project password policy for Universal Directory resources in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiGetProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest
*/
func (a *ProjectsAPIService) GetProjectPasswordPolicyForOktaUniversalDirectoryResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiGetProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest {
	return ApiGetProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicyWithExclude
func (a *ProjectsAPIService) GetProjectPasswordPolicyForOktaUniversalDirectoryResourcesExecute(r ApiGetProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest) (*PasswordPolicyWithExclude, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getProjectPasswordPolicyForOktaUniversalDirectoryResources"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicyWithExclude
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/okta_universal_directory_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetProjectPasswordPolicyForSaasAppResourcesRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiGetProjectPasswordPolicyForSaasAppResourcesRequest) Execute() (*PasswordPolicyWithExclude, *http.Response, error) {
	return r.ApiService.GetProjectPasswordPolicyForSaasAppResourcesExecute(r)
}

/*
GetProjectPasswordPolicyForSaasAppResources Retrieve a project password policy for SaaS app resources

	Retrieves a project password policy for SaaS app resources in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiGetProjectPasswordPolicyForSaasAppResourcesRequest
*/
func (a *ProjectsAPIService) GetProjectPasswordPolicyForSaasAppResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiGetProjectPasswordPolicyForSaasAppResourcesRequest {
	return ApiGetProjectPasswordPolicyForSaasAppResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicyWithExclude
func (a *ProjectsAPIService) GetProjectPasswordPolicyForSaasAppResourcesExecute(r ApiGetProjectPasswordPolicyForSaasAppResourcesRequest) (*PasswordPolicyWithExclude, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getProjectPasswordPolicyForSaasAppResources"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicyWithExclude
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/saas_app_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetResourceGroupProjectServerEnrollmentTokenRequest struct {
	ctx                     context.Context
	ApiService              *ProjectsAPIService
	teamName                string
	resourceGroupId         string
	projectId               string
	serverEnrollmentTokenId string
}

func (r ApiGetResourceGroupProjectServerEnrollmentTokenRequest) Execute() (*ServerEnrollmentToken, *http.Response, error) {
	return r.ApiService.GetResourceGroupProjectServerEnrollmentTokenExecute(r)
}

/*
GetResourceGroupProjectServerEnrollmentToken Retrieve a server enrollment token

	Retrieves a server enrollment token from a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project
	@param serverEnrollmentTokenId The UUID of a server enrollment token

@return ApiGetResourceGroupProjectServerEnrollmentTokenRequest
*/
func (a *ProjectsAPIService) GetResourceGroupProjectServerEnrollmentToken(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverEnrollmentTokenId string) ApiGetResourceGroupProjectServerEnrollmentTokenRequest {
	return ApiGetResourceGroupProjectServerEnrollmentTokenRequest{
		ApiService:              a,
		ctx:                     ctx,
		teamName:                teamName,
		resourceGroupId:         resourceGroupId,
		projectId:               projectId,
		serverEnrollmentTokenId: serverEnrollmentTokenId,
	}
}

// Execute executes the request
//
//	@return ServerEnrollmentToken
func (a *ProjectsAPIService) GetResourceGroupProjectServerEnrollmentTokenExecute(r ApiGetResourceGroupProjectServerEnrollmentTokenRequest) (*ServerEnrollmentToken, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getResourceGroupProjectServerEnrollmentToken"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServerEnrollmentToken
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_enrollment_tokens/{server_enrollment_token_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_enrollment_token_id"+"}", url.PathEscape(parameterValueToString(r.serverEnrollmentTokenId, "serverEnrollmentTokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetServerAccountDetailsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	serverAccountId string
}

func (r ApiGetServerAccountDetailsRequest) Execute() (*GetServerAccountDetailsResponse, *http.Response, error) {
	return r.ApiService.GetServerAccountDetailsExecute(r)
}

/*
GetServerAccountDetails Retrieve a server account

	Retrieves a server account from a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project
	@param serverAccountId The UUID of a server account

@return ApiGetServerAccountDetailsRequest
*/
func (a *ProjectsAPIService) GetServerAccountDetails(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverAccountId string) ApiGetServerAccountDetailsRequest {
	return ApiGetServerAccountDetailsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		serverAccountId: serverAccountId,
	}
}

// Execute executes the request
//
//	@return GetServerAccountDetailsResponse
func (a *ProjectsAPIService) GetServerAccountDetailsExecute(r ApiGetServerAccountDetailsRequest) (*GetServerAccountDetailsResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.getServerAccountDetails"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetServerAccountDetailsResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_accounts/{server_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_account_id"+"}", url.PathEscape(parameterValueToString(r.serverAccountId, "serverAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListAllCheckedOutResourcesByAdminRequest struct {
	ctx                   context.Context
	ApiService            *ProjectsAPIService
	teamName              string
	resourceGroupId       string
	projectId             string
	resourceType          *string
	includePendingCheckin *bool
	count                 *int32
	descending            *bool
	offset                *string
	prev                  *bool
}

// If specified, only returns resources with a matching type. Valid resource types: &#x60;server_account_password_login&#x60;, &#x60;managed_saas_app_account_password_login&#x60;, &#x60;okta_universal_directory_account_password_login&#x60;.
func (r ApiListAllCheckedOutResourcesByAdminRequest) ResourceType(resourceType string) ApiListAllCheckedOutResourcesByAdminRequest {
	r.resourceType = &resourceType
	return r
}

// If specified, also returns resources that have already started the checkin process. These are not included by default.
func (r ApiListAllCheckedOutResourcesByAdminRequest) IncludePendingCheckin(includePendingCheckin bool) ApiListAllCheckedOutResourcesByAdminRequest {
	r.includePendingCheckin = &includePendingCheckin
	return r
}

// The number of objects per page
func (r ApiListAllCheckedOutResourcesByAdminRequest) Count(count int32) ApiListAllCheckedOutResourcesByAdminRequest {
	r.count = &count
	return r
}

// The object order
func (r ApiListAllCheckedOutResourcesByAdminRequest) Descending(descending bool) ApiListAllCheckedOutResourcesByAdminRequest {
	r.descending = &descending
	return r
}

// The offset value for pagination. The **rel&#x3D;\&quot;next\&quot;** and **rel&#x3D;\&quot;prev\&quot;** &#x60;Link&#x60; headers define the offset for subsequent or previous pages.
func (r ApiListAllCheckedOutResourcesByAdminRequest) Offset(offset string) ApiListAllCheckedOutResourcesByAdminRequest {
	r.offset = &offset
	return r
}

// The direction of paging
func (r ApiListAllCheckedOutResourcesByAdminRequest) Prev(prev bool) ApiListAllCheckedOutResourcesByAdminRequest {
	r.prev = &prev
	return r
}

func (r ApiListAllCheckedOutResourcesByAdminRequest) Execute() (*ListAllCheckedOutResourcesByAdminResponse, *http.Response, error) {
	return r.ApiService.ListAllCheckedOutResourcesByAdminExecute(r)
}

/*
ListAllCheckedOutResourcesByAdmin List all resources checked out in a project

	Lists all the resources that are currently checked out within a specified resource group project

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiListAllCheckedOutResourcesByAdminRequest
*/
func (a *ProjectsAPIService) ListAllCheckedOutResourcesByAdmin(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiListAllCheckedOutResourcesByAdminRequest {
	return ApiListAllCheckedOutResourcesByAdminRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ListAllCheckedOutResourcesByAdminResponse
func (a *ProjectsAPIService) ListAllCheckedOutResourcesByAdminExecute(r ApiListAllCheckedOutResourcesByAdminRequest) (*ListAllCheckedOutResourcesByAdminResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listAllCheckedOutResourcesByAdmin"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListAllCheckedOutResourcesByAdminResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/checked_out_resources"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.resourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "")
	}
	if r.includePendingCheckin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_pending_checkin", r.includePendingCheckin, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.descending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "descending", r.descending, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.prev != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prev", r.prev, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListResourceGroupProjectActiveDirectoryAccountsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	contains        *string
}

// Only return results that include the specified value
func (r ApiListResourceGroupProjectActiveDirectoryAccountsRequest) Contains(contains string) ApiListResourceGroupProjectActiveDirectoryAccountsRequest {
	r.contains = &contains
	return r
}

func (r ApiListResourceGroupProjectActiveDirectoryAccountsRequest) Execute() (*ListResourceGroupProjectActiveDirectoryAccountsResponse, *http.Response, error) {
	return r.ApiService.ListResourceGroupProjectActiveDirectoryAccountsExecute(r)
}

/*
	ListResourceGroupProjectActiveDirectoryAccounts List all Active Directory accounts in a project

	    Lists all Active Directory accounts in a project in a resource group. The `contains` URL parameter

filters by UPN.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your team
	    @param resourceGroupId The UUID of a resource group
	    @param projectId The UUID of a project
	@return ApiListResourceGroupProjectActiveDirectoryAccountsRequest
*/
func (a *ProjectsAPIService) ListResourceGroupProjectActiveDirectoryAccounts(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiListResourceGroupProjectActiveDirectoryAccountsRequest {
	return ApiListResourceGroupProjectActiveDirectoryAccountsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ListResourceGroupProjectActiveDirectoryAccountsResponse
func (a *ProjectsAPIService) ListResourceGroupProjectActiveDirectoryAccountsExecute(r ApiListResourceGroupProjectActiveDirectoryAccountsRequest) (*ListResourceGroupProjectActiveDirectoryAccountsResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listResourceGroupProjectActiveDirectoryAccounts"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListResourceGroupProjectActiveDirectoryAccountsResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/active_directory_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contains", r.contains, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListResourceGroupProjectServerEnrollmentTokensRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiListResourceGroupProjectServerEnrollmentTokensRequest) Execute() (*ListResourceGroupProjectServerEnrollmentTokensResponse, *http.Response, error) {
	return r.ApiService.ListResourceGroupProjectServerEnrollmentTokensExecute(r)
}

/*
ListResourceGroupProjectServerEnrollmentTokens List all server enrollment tokens in a project

	Lists all server enrollment tokens in a resource group project

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiListResourceGroupProjectServerEnrollmentTokensRequest
*/
func (a *ProjectsAPIService) ListResourceGroupProjectServerEnrollmentTokens(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiListResourceGroupProjectServerEnrollmentTokensRequest {
	return ApiListResourceGroupProjectServerEnrollmentTokensRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ListResourceGroupProjectServerEnrollmentTokensResponse
func (a *ProjectsAPIService) ListResourceGroupProjectServerEnrollmentTokensExecute(r ApiListResourceGroupProjectServerEnrollmentTokensRequest) (*ListResourceGroupProjectServerEnrollmentTokensResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listResourceGroupProjectServerEnrollmentTokens"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListResourceGroupProjectServerEnrollmentTokensResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_enrollment_tokens"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListResourceGroupProjectsRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
}

func (r ApiListResourceGroupProjectsRequest) Execute() (*ListResourceGroupProjects, *http.Response, error) {
	return r.ApiService.ListResourceGroupProjectsExecute(r)
}

/*
ListResourceGroupProjects List all projects in a resource group

	Lists all projects in the specified resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group

@return ApiListResourceGroupProjectsRequest
*/
func (a *ProjectsAPIService) ListResourceGroupProjects(ctx context.Context, teamName string, resourceGroupId string) ApiListResourceGroupProjectsRequest {
	return ApiListResourceGroupProjectsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return ListResourceGroupProjects
func (a *ProjectsAPIService) ListResourceGroupProjectsExecute(r ApiListResourceGroupProjectsRequest) (*ListResourceGroupProjects, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listResourceGroupProjects"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListResourceGroupProjects
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListServerAccountsForProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiListServerAccountsForProjectRequest) Execute() (*ListServerAccountsForProjectResponse, *http.Response, error) {
	return r.ApiService.ListServerAccountsForProjectExecute(r)
}

/*
ListServerAccountsForProject List all server accounts in a project

	Lists all server accounts in a resource group project

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiListServerAccountsForProjectRequest
*/
func (a *ProjectsAPIService) ListServerAccountsForProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiListServerAccountsForProjectRequest {
	return ApiListServerAccountsForProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ListServerAccountsForProjectResponse
func (a *ProjectsAPIService) ListServerAccountsForProjectExecute(r ApiListServerAccountsForProjectRequest) (*ListServerAccountsForProjectResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listServerAccountsForProject"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListServerAccountsForProjectResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListServerAccountsForServerRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	serverId        string
}

func (r ApiListServerAccountsForServerRequest) Execute() (*ListServerAccountsForServerResponse, *http.Response, error) {
	return r.ApiService.ListServerAccountsForServerExecute(r)
}

/*
ListServerAccountsForServer List all server accounts for a server

	Lists all server accounts for a server in a project

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project
	@param serverId The UUID of an enrolled server

@return ApiListServerAccountsForServerRequest
*/
func (a *ProjectsAPIService) ListServerAccountsForServer(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverId string) ApiListServerAccountsForServerRequest {
	return ApiListServerAccountsForServerRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		serverId:        serverId,
	}
}

// Execute executes the request
//
//	@return ListServerAccountsForServerResponse
func (a *ProjectsAPIService) ListServerAccountsForServerExecute(r ApiListServerAccountsForServerRequest) (*ListServerAccountsForServerResponse, *http.Response, error) {
	var (
		traceKey            = "projectsapi.listServerAccountsForServer"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListServerAccountsForServerResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/servers/{server_id}/server_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_id"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiRemoveResourceGroupProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
}

func (r ApiRemoveResourceGroupProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveResourceGroupProjectExecute(r)
}

/*
RemoveResourceGroupProject Delete a project from a resource group

	Deletes a project from a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiRemoveResourceGroupProjectRequest
*/
func (a *ProjectsAPIService) RemoveResourceGroupProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiRemoveResourceGroupProjectRequest {
	return ApiRemoveResourceGroupProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) RemoveResourceGroupProjectExecute(r ApiRemoveResourceGroupProjectRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.removeResourceGroupProject"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest struct {
	ctx                     context.Context
	ApiService              *ProjectsAPIService
	teamName                string
	resourceGroupId         string
	projectId               string
	serverEnrollmentTokenId string
}

func (r ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveResourceGroupProjectServerEnrollmentTokenExecute(r)
}

/*
RemoveResourceGroupProjectServerEnrollmentToken Delete a server enrollment token

	Deletes a server enrollment token from a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project
	@param serverEnrollmentTokenId The UUID of a server enrollment token

@return ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest
*/
func (a *ProjectsAPIService) RemoveResourceGroupProjectServerEnrollmentToken(ctx context.Context, teamName string, resourceGroupId string, projectId string, serverEnrollmentTokenId string) ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest {
	return ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest{
		ApiService:              a,
		ctx:                     ctx,
		teamName:                teamName,
		resourceGroupId:         resourceGroupId,
		projectId:               projectId,
		serverEnrollmentTokenId: serverEnrollmentTokenId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) RemoveResourceGroupProjectServerEnrollmentTokenExecute(r ApiRemoveResourceGroupProjectServerEnrollmentTokenRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.removeResourceGroupProjectServerEnrollmentToken"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_enrollment_tokens/{server_enrollment_token_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server_enrollment_token_id"+"}", url.PathEscape(parameterValueToString(r.serverEnrollmentTokenId, "serverEnrollmentTokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiUpdatePasswordPolicyForProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	passwordPolicy  *PasswordPolicy
}

func (r ApiUpdatePasswordPolicyForProjectRequest) PasswordPolicy(passwordPolicy PasswordPolicy) ApiUpdatePasswordPolicyForProjectRequest {
	r.passwordPolicy = &passwordPolicy
	return r
}

func (r ApiUpdatePasswordPolicyForProjectRequest) Execute() (*PasswordPolicy, *http.Response, error) {
	return r.ApiService.UpdatePasswordPolicyForProjectExecute(r)
}

/*
UpdatePasswordPolicyForProject Update project password policy for server accounts

	Updates a password policy for a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdatePasswordPolicyForProjectRequest
*/
func (a *ProjectsAPIService) UpdatePasswordPolicyForProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdatePasswordPolicyForProjectRequest {
	return ApiUpdatePasswordPolicyForProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicy
func (a *ProjectsAPIService) UpdatePasswordPolicyForProjectExecute(r ApiUpdatePasswordPolicyForProjectRequest) (*PasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.updatePasswordPolicyForProject"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordPolicy
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateProjectPasswordPolicyForActiveDirectoryResourcesRequest struct {
	ctx                           context.Context
	ApiService                    *ProjectsAPIService
	teamName                      string
	resourceGroupId               string
	projectId                     string
	activeDirectoryPasswordPolicy *ActiveDirectoryPasswordPolicy
}

func (r ApiUpdateProjectPasswordPolicyForActiveDirectoryResourcesRequest) ActiveDirectoryPasswordPolicy(activeDirectoryPasswordPolicy ActiveDirectoryPasswordPolicy) ApiUpdateProjectPasswordPolicyForActiveDirectoryResourcesRequest {
	r.activeDirectoryPasswordPolicy = &activeDirectoryPasswordPolicy
	return r
}

func (r ApiUpdateProjectPasswordPolicyForActiveDirectoryResourcesRequest) Execute() (*ActiveDirectoryPasswordPolicy, *http.Response, error) {
	return r.ApiService.UpdateProjectPasswordPolicyForActiveDirectoryResourcesExecute(r)
}

/*
UpdateProjectPasswordPolicyForActiveDirectoryResources Update a project password policy for Active Directory resources

	Updates a project password policy for Active Directory resources in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdateProjectPasswordPolicyForActiveDirectoryResourcesRequest
*/
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForActiveDirectoryResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateProjectPasswordPolicyForActiveDirectoryResourcesRequest {
	return ApiUpdateProjectPasswordPolicyForActiveDirectoryResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return ActiveDirectoryPasswordPolicy
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForActiveDirectoryResourcesExecute(r ApiUpdateProjectPasswordPolicyForActiveDirectoryResourcesRequest) (*ActiveDirectoryPasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.updateProjectPasswordPolicyForActiveDirectoryResources"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ActiveDirectoryPasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/active_directory_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeDirectoryPasswordPolicy
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	passwordPolicy  *PasswordPolicy
}

func (r ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest) PasswordPolicy(passwordPolicy PasswordPolicy) ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest {
	r.passwordPolicy = &passwordPolicy
	return r
}

func (r ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest) Execute() (*PasswordPolicy, *http.Response, error) {
	return r.ApiService.UpdateProjectPasswordPolicyForDatabaseResourcesExecute(r)
}

/*
UpdateProjectPasswordPolicyForDatabaseResources Update a project password policy for database resources

	Updates a project password policy for database resources in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest
*/
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForDatabaseResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest {
	return ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicy
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForDatabaseResourcesExecute(r ApiUpdateProjectPasswordPolicyForDatabaseResourcesRequest) (*PasswordPolicy, *http.Response, error) {
	var (
		traceKey            = "projectsapi.updateProjectPasswordPolicyForDatabaseResources"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicy
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/database_resource_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordPolicy
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest struct {
	ctx                       context.Context
	ApiService                *ProjectsAPIService
	teamName                  string
	resourceGroupId           string
	projectId                 string
	passwordPolicyWithExclude *PasswordPolicyWithExclude
}

func (r ApiUpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest) PasswordPolicyWithExclude(passwordPolicyWithExclude PasswordPolicyWithExclude) ApiUpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest {
	r.passwordPolicyWithExclude = &passwordPolicyWithExclude
	return r
}

func (r ApiUpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest) Execute() (*PasswordPolicyWithExclude, *http.Response, error) {
	return r.ApiService.UpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesExecute(r)
}

/*
UpdateProjectPasswordPolicyForOktaUniversalDirectoryResources Update a project password policy for Universal Directory resources

	Updates a project password policy for Universal Directory resources in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest
*/
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForOktaUniversalDirectoryResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest {
	return ApiUpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicyWithExclude
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesExecute(r ApiUpdateProjectPasswordPolicyForOktaUniversalDirectoryResourcesRequest) (*PasswordPolicyWithExclude, *http.Response, error) {
	var (
		traceKey            = "projectsapi.updateProjectPasswordPolicyForOktaUniversalDirectoryResources"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicyWithExclude
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/okta_universal_directory_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordPolicyWithExclude
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateProjectPasswordPolicyForSaasAppResourcesRequest struct {
	ctx                       context.Context
	ApiService                *ProjectsAPIService
	teamName                  string
	resourceGroupId           string
	projectId                 string
	passwordPolicyWithExclude *PasswordPolicyWithExclude
}

func (r ApiUpdateProjectPasswordPolicyForSaasAppResourcesRequest) PasswordPolicyWithExclude(passwordPolicyWithExclude PasswordPolicyWithExclude) ApiUpdateProjectPasswordPolicyForSaasAppResourcesRequest {
	r.passwordPolicyWithExclude = &passwordPolicyWithExclude
	return r
}

func (r ApiUpdateProjectPasswordPolicyForSaasAppResourcesRequest) Execute() (*PasswordPolicyWithExclude, *http.Response, error) {
	return r.ApiService.UpdateProjectPasswordPolicyForSaasAppResourcesExecute(r)
}

/*
UpdateProjectPasswordPolicyForSaasAppResources Update a project password policy for SaaS app resources

	Updates a project password policy for SaaS app resources in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdateProjectPasswordPolicyForSaasAppResourcesRequest
*/
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForSaasAppResources(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateProjectPasswordPolicyForSaasAppResourcesRequest {
	return ApiUpdateProjectPasswordPolicyForSaasAppResourcesRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return PasswordPolicyWithExclude
func (a *ProjectsAPIService) UpdateProjectPasswordPolicyForSaasAppResourcesExecute(r ApiUpdateProjectPasswordPolicyForSaasAppResourcesRequest) (*PasswordPolicyWithExclude, *http.Response, error) {
	var (
		traceKey            = "projectsapi.updateProjectPasswordPolicyForSaasAppResources"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PasswordPolicyWithExclude
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/saas_app_password_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.passwordPolicyWithExclude
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest struct {
	ctx                             context.Context
	ApiService                      *ProjectsAPIService
	teamName                        string
	resourceGroupId                 string
	projectId                       string
	activeDirectoryCheckoutSettings *ActiveDirectoryCheckoutSettings
}

func (r ApiUpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest) ActiveDirectoryCheckoutSettings(activeDirectoryCheckoutSettings ActiveDirectoryCheckoutSettings) ApiUpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest {
	r.activeDirectoryCheckoutSettings = &activeDirectoryCheckoutSettings
	return r
}

func (r ApiUpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsExecute(r)
}

/*
UpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettings Update the checkout settings for an Active Directory account resource group project

	Updates the checkout settings configured for a resource group project that's specific to the Active Directory account

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) UpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest {
	return ApiUpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) UpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsExecute(r ApiUpdateResourceGroupActiveDirectoryBasedProjectCheckoutSettingsRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.updateResourceGroupActiveDirectoryBasedProjectCheckoutSettings"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/active_directory_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeDirectoryCheckoutSettings
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiUpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest struct {
	ctx                               context.Context
	ApiService                        *ProjectsAPIService
	teamName                          string
	resourceGroupId                   string
	projectId                         string
	aPIServiceAccountCheckoutSettings *APIServiceAccountCheckoutSettings
}

func (r ApiUpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest) APIServiceAccountCheckoutSettings(aPIServiceAccountCheckoutSettings APIServiceAccountCheckoutSettings) ApiUpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest {
	r.aPIServiceAccountCheckoutSettings = &aPIServiceAccountCheckoutSettings
	return r
}

func (r ApiUpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsExecute(r)
}

/*
UpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettings Update the checkout settings for a Universal Directory resource group project

	Updates the checkout settings configured for a resource group project that's specific to the Universal Directory

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) UpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest {
	return ApiUpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) UpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsExecute(r ApiUpdateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettingsRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.updateResourceGroupOktaUniversalDirectoryBasedProjectCheckoutSettings"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/okta_universal_directory_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aPIServiceAccountCheckoutSettings
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiUpdateResourceGroupProjectRequest struct {
	ctx             context.Context
	ApiService      *ProjectsAPIService
	teamName        string
	resourceGroupId string
	projectId       string
	project         *Project
}

func (r ApiUpdateResourceGroupProjectRequest) Project(project Project) ApiUpdateResourceGroupProjectRequest {
	r.project = &project
	return r
}

func (r ApiUpdateResourceGroupProjectRequest) Execute() (*Project, *http.Response, error) {
	return r.ApiService.UpdateResourceGroupProjectExecute(r)
}

/*
UpdateResourceGroupProject Update a project in a resource group

	Updates a project in a resource group

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdateResourceGroupProjectRequest
*/
func (a *ProjectsAPIService) UpdateResourceGroupProject(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateResourceGroupProjectRequest {
	return ApiUpdateResourceGroupProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
//
//	@return Project
func (a *ProjectsAPIService) UpdateResourceGroupProjectExecute(r ApiUpdateResourceGroupProjectRequest) (*Project, *http.Response, error) {
	var (
		traceKey            = "projectsapi.updateResourceGroupProject"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Project
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.project
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateResourceGroupSaasAppBasedProjectCheckoutSettingsRequest struct {
	ctx                               context.Context
	ApiService                        *ProjectsAPIService
	teamName                          string
	resourceGroupId                   string
	projectId                         string
	aPIServiceAccountCheckoutSettings *APIServiceAccountCheckoutSettings
}

func (r ApiUpdateResourceGroupSaasAppBasedProjectCheckoutSettingsRequest) APIServiceAccountCheckoutSettings(aPIServiceAccountCheckoutSettings APIServiceAccountCheckoutSettings) ApiUpdateResourceGroupSaasAppBasedProjectCheckoutSettingsRequest {
	r.aPIServiceAccountCheckoutSettings = &aPIServiceAccountCheckoutSettings
	return r
}

func (r ApiUpdateResourceGroupSaasAppBasedProjectCheckoutSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateResourceGroupSaasAppBasedProjectCheckoutSettingsExecute(r)
}

/*
UpdateResourceGroupSaasAppBasedProjectCheckoutSettings Update the checkout settings for a SaaS app resource group project

	Updates the checkout settings configured for a resource group project that's specific to the SaaS app

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdateResourceGroupSaasAppBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) UpdateResourceGroupSaasAppBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateResourceGroupSaasAppBasedProjectCheckoutSettingsRequest {
	return ApiUpdateResourceGroupSaasAppBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) UpdateResourceGroupSaasAppBasedProjectCheckoutSettingsExecute(r ApiUpdateResourceGroupSaasAppBasedProjectCheckoutSettingsRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.updateResourceGroupSaasAppBasedProjectCheckoutSettings"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/saas_app_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aPIServiceAccountCheckoutSettings
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest struct {
	ctx                      context.Context
	ApiService               *ProjectsAPIService
	teamName                 string
	resourceGroupId          string
	projectId                string
	resourceCheckoutSettings *ResourceCheckoutSettings
}

func (r ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest) ResourceCheckoutSettings(resourceCheckoutSettings ResourceCheckoutSettings) ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest {
	r.resourceCheckoutSettings = &resourceCheckoutSettings
	return r
}

func (r ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateResourceGroupServerBasedProjectCheckoutSettingsExecute(r)
}

/*
UpdateResourceGroupServerBasedProjectCheckoutSettings Update the checkout settings for a server resource group project

	Updates the checkout settings configured for a resource group project that's specific to the server

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param resourceGroupId The UUID of a resource group
	@param projectId The UUID of a project

@return ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest
*/
func (a *ProjectsAPIService) UpdateResourceGroupServerBasedProjectCheckoutSettings(ctx context.Context, teamName string, resourceGroupId string, projectId string) ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest {
	return ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest{
		ApiService:      a,
		ctx:             ctx,
		teamName:        teamName,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
	}
}

// Execute executes the request
func (a *ProjectsAPIService) UpdateResourceGroupServerBasedProjectCheckoutSettingsExecute(r ApiUpdateResourceGroupServerBasedProjectCheckoutSettingsRequest) (*http.Response, error) {
	var (
		traceKey           = "projectsapi.updateResourceGroupServerBasedProjectCheckoutSettings"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/server_checkout_settings"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceCheckoutSettings
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}
