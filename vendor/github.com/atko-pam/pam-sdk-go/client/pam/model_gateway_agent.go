/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the GatewayAgent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatewayAgent{}

// GatewayAgent struct for GatewayAgent
type GatewayAgent struct {
	Labels map[string]string `json:"labels,omitempty"`
}

// NewGatewayAgent instantiates a new GatewayAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatewayAgent() *GatewayAgent {
	this := GatewayAgent{}
	return &this
}

// NewGatewayAgentWithDefaults instantiates a new GatewayAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewayAgentWithDefaults() *GatewayAgent {
	this := GatewayAgent{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GatewayAgent) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GatewayAgent) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return &o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *GatewayAgent) HasLabels() bool {
	if o != nil && IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *GatewayAgent) SetLabels(v map[string]string) *GatewayAgent {
	o.Labels = v
	return o
}

func (o GatewayAgent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GatewayAgent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableGatewayAgent struct {
	value *GatewayAgent
	isSet bool
}

func (v NullableGatewayAgent) Get() *GatewayAgent {
	return v.value
}

func (v *NullableGatewayAgent) Set(val *GatewayAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewayAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewayAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewayAgent(val *GatewayAgent) *NullableGatewayAgent {
	return &NullableGatewayAgent{value: val, isSet: true}
}

func (v NullableGatewayAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewayAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
