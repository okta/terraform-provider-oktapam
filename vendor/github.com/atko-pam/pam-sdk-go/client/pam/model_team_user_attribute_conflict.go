/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the TeamUserAttributeConflict type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamUserAttributeConflict{}

// TeamUserAttributeConflict struct for TeamUserAttributeConflict
type TeamUserAttributeConflict struct {
	AttributeName  TeamUserAttributeName           `json:"attribute_name"`
	AttributeValue TeamUserAttributeAttributeValue `json:"attribute_value"`
	// The unique identifier for the attribute
	Id string `json:"id"`
	// Indicates the OPA username related to the conflict
	UserName *string `json:"user_name,omitempty"`
	// Indicates if the attribute is related to a Service User
	IsServiceUser *bool `json:"is_service_user,omitempty"`
}

// NewTeamUserAttributeConflict instantiates a new TeamUserAttributeConflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamUserAttributeConflict(attributeName TeamUserAttributeName, attributeValue TeamUserAttributeAttributeValue, id string) *TeamUserAttributeConflict {
	this := TeamUserAttributeConflict{}
	this.AttributeName = attributeName
	this.AttributeValue = attributeValue
	this.Id = id
	return &this
}

// NewTeamUserAttributeConflictWithDefaults instantiates a new TeamUserAttributeConflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamUserAttributeConflictWithDefaults() *TeamUserAttributeConflict {
	this := TeamUserAttributeConflict{}
	return &this
}

// GetAttributeName returns the AttributeName field value
func (o *TeamUserAttributeConflict) GetAttributeName() TeamUserAttributeName {
	if o == nil {
		var ret TeamUserAttributeName
		return ret
	}

	return o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value
// and a boolean to check if the value has been set.
func (o *TeamUserAttributeConflict) GetAttributeNameOk() (*TeamUserAttributeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeName, true
}

// SetAttributeName sets field value
func (o *TeamUserAttributeConflict) SetAttributeName(v TeamUserAttributeName) *TeamUserAttributeConflict {
	o.AttributeName = v
	return o
}

// GetAttributeValue returns the AttributeValue field value
func (o *TeamUserAttributeConflict) GetAttributeValue() TeamUserAttributeAttributeValue {
	if o == nil {
		var ret TeamUserAttributeAttributeValue
		return ret
	}

	return o.AttributeValue
}

// GetAttributeValueOk returns a tuple with the AttributeValue field value
// and a boolean to check if the value has been set.
func (o *TeamUserAttributeConflict) GetAttributeValueOk() (*TeamUserAttributeAttributeValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeValue, true
}

// SetAttributeValue sets field value
func (o *TeamUserAttributeConflict) SetAttributeValue(v TeamUserAttributeAttributeValue) *TeamUserAttributeConflict {
	o.AttributeValue = v
	return o
}

// GetId returns the Id field value
func (o *TeamUserAttributeConflict) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamUserAttributeConflict) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamUserAttributeConflict) SetId(v string) *TeamUserAttributeConflict {
	o.Id = v
	return o
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *TeamUserAttributeConflict) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamUserAttributeConflict) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *TeamUserAttributeConflict) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *TeamUserAttributeConflict) SetUserName(v string) *TeamUserAttributeConflict {
	o.UserName = &v
	return o
}

// GetIsServiceUser returns the IsServiceUser field value if set, zero value otherwise.
func (o *TeamUserAttributeConflict) GetIsServiceUser() bool {
	if o == nil || IsNil(o.IsServiceUser) {
		var ret bool
		return ret
	}
	return *o.IsServiceUser
}

// GetIsServiceUserOk returns a tuple with the IsServiceUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamUserAttributeConflict) GetIsServiceUserOk() (*bool, bool) {
	if o == nil || IsNil(o.IsServiceUser) {
		return nil, false
	}
	return o.IsServiceUser, true
}

// HasIsServiceUser returns a boolean if a field has been set.
func (o *TeamUserAttributeConflict) HasIsServiceUser() bool {
	if o != nil && !IsNil(o.IsServiceUser) {
		return true
	}

	return false
}

// SetIsServiceUser gets a reference to the given bool and assigns it to the IsServiceUser field.
func (o *TeamUserAttributeConflict) SetIsServiceUser(v bool) *TeamUserAttributeConflict {
	o.IsServiceUser = &v
	return o
}

func (o TeamUserAttributeConflict) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamUserAttributeConflict) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attribute_name"] = o.AttributeName
	toSerialize["attribute_value"] = o.AttributeValue
	toSerialize["id"] = o.Id
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.IsServiceUser) {
		toSerialize["is_service_user"] = o.IsServiceUser
	}
	return toSerialize, nil
}

type NullableTeamUserAttributeConflict struct {
	value *TeamUserAttributeConflict
	isSet bool
}

func (v NullableTeamUserAttributeConflict) Get() *TeamUserAttributeConflict {
	return v.value
}

func (v *NullableTeamUserAttributeConflict) Set(val *TeamUserAttributeConflict) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamUserAttributeConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamUserAttributeConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamUserAttributeConflict(val *TeamUserAttributeConflict) *NullableTeamUserAttributeConflict {
	return &NullableTeamUserAttributeConflict{value: val, isSet: true}
}

func (v NullableTeamUserAttributeConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamUserAttributeConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
