/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryAccountEndUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAccountEndUser{}

// ActiveDirectoryAccountEndUser Information for an Active Directory account that the current user has some level of access to
type ActiveDirectoryAccountEndUser struct {
	Account         *ActiveDirectoryAccountEndUserAccount  `json:"account,omitempty"`
	CheckoutDetails *ActiveDirectoryAccountCheckoutDetails `json:"checkout_details,omitempty"`
}

// NewActiveDirectoryAccountEndUser instantiates a new ActiveDirectoryAccountEndUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAccountEndUser() *ActiveDirectoryAccountEndUser {
	this := ActiveDirectoryAccountEndUser{}
	return &this
}

// NewActiveDirectoryAccountEndUserWithDefaults instantiates a new ActiveDirectoryAccountEndUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAccountEndUserWithDefaults() *ActiveDirectoryAccountEndUser {
	this := ActiveDirectoryAccountEndUser{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountEndUser) GetAccount() ActiveDirectoryAccountEndUserAccount {
	if o == nil || IsNil(o.Account) {
		var ret ActiveDirectoryAccountEndUserAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountEndUser) GetAccountOk() (*ActiveDirectoryAccountEndUserAccount, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountEndUser) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given ActiveDirectoryAccountEndUserAccount and assigns it to the Account field.
func (o *ActiveDirectoryAccountEndUser) SetAccount(v ActiveDirectoryAccountEndUserAccount) *ActiveDirectoryAccountEndUser {
	o.Account = &v
	return o
}

// GetCheckoutDetails returns the CheckoutDetails field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountEndUser) GetCheckoutDetails() ActiveDirectoryAccountCheckoutDetails {
	if o == nil || IsNil(o.CheckoutDetails) {
		var ret ActiveDirectoryAccountCheckoutDetails
		return ret
	}
	return *o.CheckoutDetails
}

// GetCheckoutDetailsOk returns a tuple with the CheckoutDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountEndUser) GetCheckoutDetailsOk() (*ActiveDirectoryAccountCheckoutDetails, bool) {
	if o == nil || IsNil(o.CheckoutDetails) {
		return nil, false
	}
	return o.CheckoutDetails, true
}

// HasCheckoutDetails returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountEndUser) HasCheckoutDetails() bool {
	if o != nil && !IsNil(o.CheckoutDetails) {
		return true
	}

	return false
}

// SetCheckoutDetails gets a reference to the given ActiveDirectoryAccountCheckoutDetails and assigns it to the CheckoutDetails field.
func (o *ActiveDirectoryAccountEndUser) SetCheckoutDetails(v ActiveDirectoryAccountCheckoutDetails) *ActiveDirectoryAccountEndUser {
	o.CheckoutDetails = &v
	return o
}

func (o ActiveDirectoryAccountEndUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAccountEndUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.CheckoutDetails) {
		toSerialize["checkout_details"] = o.CheckoutDetails
	}
	return toSerialize, nil
}

type NullableActiveDirectoryAccountEndUser struct {
	value *ActiveDirectoryAccountEndUser
	isSet bool
}

func (v NullableActiveDirectoryAccountEndUser) Get() *ActiveDirectoryAccountEndUser {
	return v.value
}

func (v *NullableActiveDirectoryAccountEndUser) Set(val *ActiveDirectoryAccountEndUser) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountEndUser) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountEndUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountEndUser(val *ActiveDirectoryAccountEndUser) *NullableActiveDirectoryAccountEndUser {
	return &NullableActiveDirectoryAccountEndUser{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountEndUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountEndUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
