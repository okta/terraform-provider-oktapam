/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// SecurityPolicyRuleResourceSelectorType The type of selector used to target resources
type SecurityPolicyRuleResourceSelectorType string

// List of SecurityPolicyRuleResourceSelectorType
const (
	SecurityPolicyRuleResourceSelectorType_INDIVIDUAL_SERVER         SecurityPolicyRuleResourceSelectorType = "individual_server"
	SecurityPolicyRuleResourceSelectorType_INDIVIDUAL_SERVER_ACCOUNT SecurityPolicyRuleResourceSelectorType = "individual_server_account"
	SecurityPolicyRuleResourceSelectorType_SERVER_LABEL              SecurityPolicyRuleResourceSelectorType = "server_label"
)

// All allowed values of SecurityPolicyRuleResourceSelectorType enum
var AllowedSecurityPolicyRuleResourceSelectorTypeEnumValues = []SecurityPolicyRuleResourceSelectorType{
	"individual_server",
	"individual_server_account",
	"server_label",
}

func (v *SecurityPolicyRuleResourceSelectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityPolicyRuleResourceSelectorType(value)
	for _, existing := range AllowedSecurityPolicyRuleResourceSelectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecurityPolicyRuleResourceSelectorType", value)
}

// NewSecurityPolicyRuleResourceSelectorTypeFromValue returns a pointer to a valid SecurityPolicyRuleResourceSelectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityPolicyRuleResourceSelectorTypeFromValue(v string) (*SecurityPolicyRuleResourceSelectorType, error) {
	ev := SecurityPolicyRuleResourceSelectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecurityPolicyRuleResourceSelectorType: valid values are %v", v, AllowedSecurityPolicyRuleResourceSelectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityPolicyRuleResourceSelectorType) IsValid() bool {
	for _, existing := range AllowedSecurityPolicyRuleResourceSelectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityPolicyRuleResourceSelectorType value
func (v SecurityPolicyRuleResourceSelectorType) Ptr() *SecurityPolicyRuleResourceSelectorType {
	return &v
}

type NullableSecurityPolicyRuleResourceSelectorType struct {
	value *SecurityPolicyRuleResourceSelectorType
	isSet bool
}

func (v NullableSecurityPolicyRuleResourceSelectorType) Get() *SecurityPolicyRuleResourceSelectorType {
	return v.value
}

func (v *NullableSecurityPolicyRuleResourceSelectorType) Set(val *SecurityPolicyRuleResourceSelectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleResourceSelectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleResourceSelectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleResourceSelectorType(val *SecurityPolicyRuleResourceSelectorType) *NullableSecurityPolicyRuleResourceSelectorType {
	return &NullableSecurityPolicyRuleResourceSelectorType{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleResourceSelectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleResourceSelectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
