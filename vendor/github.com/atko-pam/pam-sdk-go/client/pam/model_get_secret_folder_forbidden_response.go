/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the GetSecretFolderForbiddenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSecretFolderForbiddenResponse{}

// GetSecretFolderForbiddenResponse struct for GetSecretFolderForbiddenResponse
type GetSecretFolderForbiddenResponse struct {
	List []UserAccessMethod `json:"list,omitempty"`
}

// NewGetSecretFolderForbiddenResponse instantiates a new GetSecretFolderForbiddenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSecretFolderForbiddenResponse() *GetSecretFolderForbiddenResponse {
	this := GetSecretFolderForbiddenResponse{}
	return &this
}

// NewGetSecretFolderForbiddenResponseWithDefaults instantiates a new GetSecretFolderForbiddenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSecretFolderForbiddenResponseWithDefaults() *GetSecretFolderForbiddenResponse {
	this := GetSecretFolderForbiddenResponse{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *GetSecretFolderForbiddenResponse) GetList() []UserAccessMethod {
	if o == nil || IsNil(o.List) {
		var ret []UserAccessMethod
		return ret
	}
	return o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSecretFolderForbiddenResponse) GetListOk() ([]UserAccessMethod, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *GetSecretFolderForbiddenResponse) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given []UserAccessMethod and assigns it to the List field.
func (o *GetSecretFolderForbiddenResponse) SetList(v []UserAccessMethod) *GetSecretFolderForbiddenResponse {
	o.List = v
	return o
}

func (o GetSecretFolderForbiddenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSecretFolderForbiddenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableGetSecretFolderForbiddenResponse struct {
	value *GetSecretFolderForbiddenResponse
	isSet bool
}

func (v NullableGetSecretFolderForbiddenResponse) Get() *GetSecretFolderForbiddenResponse {
	return v.value
}

func (v *NullableGetSecretFolderForbiddenResponse) Set(val *GetSecretFolderForbiddenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSecretFolderForbiddenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSecretFolderForbiddenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSecretFolderForbiddenResponse(val *GetSecretFolderForbiddenResponse) *NullableGetSecretFolderForbiddenResponse {
	return &NullableGetSecretFolderForbiddenResponse{value: val, isSet: true}
}

func (v NullableGetSecretFolderForbiddenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSecretFolderForbiddenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
