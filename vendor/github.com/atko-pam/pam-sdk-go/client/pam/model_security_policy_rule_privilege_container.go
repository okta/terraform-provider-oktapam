/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRulePrivilegeContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRulePrivilegeContainer{}

// SecurityPolicyRulePrivilegeContainer struct for SecurityPolicyRulePrivilegeContainer
type SecurityPolicyRulePrivilegeContainer struct {
	PrivilegeType  *SecurityPolicyRulePrivilegeType                    `json:"privilege_type,omitempty"`
	PrivilegeValue *SecurityPolicyRulePrivilegeContainerPrivilegeValue `json:"privilege_value,omitempty"`
}

// NewSecurityPolicyRulePrivilegeContainer instantiates a new SecurityPolicyRulePrivilegeContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRulePrivilegeContainer() *SecurityPolicyRulePrivilegeContainer {
	this := SecurityPolicyRulePrivilegeContainer{}
	return &this
}

// NewSecurityPolicyRulePrivilegeContainerWithDefaults instantiates a new SecurityPolicyRulePrivilegeContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRulePrivilegeContainerWithDefaults() *SecurityPolicyRulePrivilegeContainer {
	this := SecurityPolicyRulePrivilegeContainer{}
	return &this
}

// GetPrivilegeType returns the PrivilegeType field value if set, zero value otherwise.
func (o *SecurityPolicyRulePrivilegeContainer) GetPrivilegeType() SecurityPolicyRulePrivilegeType {
	if o == nil || IsNil(o.PrivilegeType) {
		var ret SecurityPolicyRulePrivilegeType
		return ret
	}
	return *o.PrivilegeType
}

// GetPrivilegeTypeOk returns a tuple with the PrivilegeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRulePrivilegeContainer) GetPrivilegeTypeOk() (*SecurityPolicyRulePrivilegeType, bool) {
	if o == nil || IsNil(o.PrivilegeType) {
		return nil, false
	}
	return o.PrivilegeType, true
}

// HasPrivilegeType returns a boolean if a field has been set.
func (o *SecurityPolicyRulePrivilegeContainer) HasPrivilegeType() bool {
	if o != nil && !IsNil(o.PrivilegeType) {
		return true
	}

	return false
}

// SetPrivilegeType gets a reference to the given SecurityPolicyRulePrivilegeType and assigns it to the PrivilegeType field.
func (o *SecurityPolicyRulePrivilegeContainer) SetPrivilegeType(v SecurityPolicyRulePrivilegeType) *SecurityPolicyRulePrivilegeContainer {
	o.PrivilegeType = &v
	return o
}

// GetPrivilegeValue returns the PrivilegeValue field value if set, zero value otherwise.
func (o *SecurityPolicyRulePrivilegeContainer) GetPrivilegeValue() SecurityPolicyRulePrivilegeContainerPrivilegeValue {
	if o == nil || IsNil(o.PrivilegeValue) {
		var ret SecurityPolicyRulePrivilegeContainerPrivilegeValue
		return ret
	}
	return *o.PrivilegeValue
}

// GetPrivilegeValueOk returns a tuple with the PrivilegeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRulePrivilegeContainer) GetPrivilegeValueOk() (*SecurityPolicyRulePrivilegeContainerPrivilegeValue, bool) {
	if o == nil || IsNil(o.PrivilegeValue) {
		return nil, false
	}
	return o.PrivilegeValue, true
}

// HasPrivilegeValue returns a boolean if a field has been set.
func (o *SecurityPolicyRulePrivilegeContainer) HasPrivilegeValue() bool {
	if o != nil && !IsNil(o.PrivilegeValue) {
		return true
	}

	return false
}

// SetPrivilegeValue gets a reference to the given SecurityPolicyRulePrivilegeContainerPrivilegeValue and assigns it to the PrivilegeValue field.
func (o *SecurityPolicyRulePrivilegeContainer) SetPrivilegeValue(v SecurityPolicyRulePrivilegeContainerPrivilegeValue) *SecurityPolicyRulePrivilegeContainer {
	o.PrivilegeValue = &v
	return o
}

func (o SecurityPolicyRulePrivilegeContainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRulePrivilegeContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrivilegeType) {
		toSerialize["privilege_type"] = o.PrivilegeType
	}
	if !IsNil(o.PrivilegeValue) {
		toSerialize["privilege_value"] = o.PrivilegeValue
	}
	return toSerialize, nil
}

type NullableSecurityPolicyRulePrivilegeContainer struct {
	value *SecurityPolicyRulePrivilegeContainer
	isSet bool
}

func (v NullableSecurityPolicyRulePrivilegeContainer) Get() *SecurityPolicyRulePrivilegeContainer {
	return v.value
}

func (v *NullableSecurityPolicyRulePrivilegeContainer) Set(val *SecurityPolicyRulePrivilegeContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRulePrivilegeContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRulePrivilegeContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRulePrivilegeContainer(val *SecurityPolicyRulePrivilegeContainer) *NullableSecurityPolicyRulePrivilegeContainer {
	return &NullableSecurityPolicyRulePrivilegeContainer{value: val, isSet: true}
}

func (v NullableSecurityPolicyRulePrivilegeContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRulePrivilegeContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
