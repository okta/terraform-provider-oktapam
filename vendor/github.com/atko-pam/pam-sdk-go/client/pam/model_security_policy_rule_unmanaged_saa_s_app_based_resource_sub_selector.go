/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector - The specific parameters used to target resources. The organization of this object depends on the `selector_type`.
type SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector struct {
	SelectorIndividualSaaSAppAccount *SelectorIndividualSaaSAppAccount
}

// SelectorIndividualSaaSAppAccountAsSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector is a convenience function that returns SelectorIndividualSaaSAppAccount wrapped in SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector
func SelectorIndividualSaaSAppAccountAsSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector(v *SelectorIndividualSaaSAppAccount) SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector {
	return SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector{
		SelectorIndividualSaaSAppAccount: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'SelectorIndividualSaaSAppAccount'
	if jsonDict["_type"] == "SelectorIndividualSaaSAppAccount" {
		// try to unmarshal JSON data into SelectorIndividualSaaSAppAccount
		err = json.Unmarshal(data, &dst.SelectorIndividualSaaSAppAccount)
		if err == nil {
			return nil // data stored in dst.SelectorIndividualSaaSAppAccount, return on the first match
		} else {
			dst.SelectorIndividualSaaSAppAccount = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector as SelectorIndividualSaaSAppAccount: %s", err.Error())
		}
	}

	// check if the discriminator value is 'individual_unmanaged_saas_app_account'
	if jsonDict["_type"] == "individual_unmanaged_saas_app_account" {
		// try to unmarshal JSON data into SelectorIndividualSaaSAppAccount
		err = json.Unmarshal(data, &dst.SelectorIndividualSaaSAppAccount)
		if err == nil {
			return nil // data stored in dst.SelectorIndividualSaaSAppAccount, return on the first match
		} else {
			dst.SelectorIndividualSaaSAppAccount = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector as SelectorIndividualSaaSAppAccount: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) MarshalJSON() ([]byte, error) {
	if src.SelectorIndividualSaaSAppAccount != nil {
		return json.Marshal(&src.SelectorIndividualSaaSAppAccount)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SelectorIndividualSaaSAppAccount != nil {
		return obj.SelectorIndividualSaaSAppAccount
	}

	// all schemas are nil
	return nil
}

type NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector struct {
	value *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector
	isSet bool
}

func (v NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) Get() *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector {
	return v.value
}

func (v *NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) Set(val *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector(val *SecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) *NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector {
	return &NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleUnmanagedSaaSAppBasedResourceSubSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
