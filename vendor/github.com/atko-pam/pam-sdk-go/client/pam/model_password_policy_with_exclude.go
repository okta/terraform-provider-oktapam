/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the PasswordPolicyWithExclude type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordPolicyWithExclude{}

// PasswordPolicyWithExclude struct for PasswordPolicyWithExclude
type PasswordPolicyWithExclude struct {
	// If provided, only the actively managed accounts listed are affected by the Password Policy. Note that only one of `include_list` and `exclude_list` can be specified in a request since they are mutually exclusive.
	IncludeList []string `json:"include_list,omitempty"`
	// If provided, all of the actively managed accounts in the project except those listed are affected by the Password Policy. Note that only one of `include_list` and `exclude_list` can be specified in a request since they are mutually exclusive.
	ExcludeList []string `json:"exclude_list,omitempty"`
	// If `true`, rotates account passwords after a period of time has passed. You must also set the `periodic_rotation_duration_in_seconds` param.
	EnablePeriodicRotation bool `json:"enable_periodic_rotation"`
	// Specifies how often the OPA platform rotates account passwords
	PeriodicRotationDurationInSeconds *int32                         `json:"periodic_rotation_duration_in_seconds,omitempty"`
	CharacterOptions                  PasswordPolicyCharacterOptions `json:"character_options"`
	// The minimum length allowed for the password
	MinLengthInBytes int32 `json:"min_length_in_bytes"`
	// The maximum length allowed for the password
	MaxLengthInBytes int32 `json:"max_length_in_bytes"`
	// A timestamp indicating when the Password Policy was last modified
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// NewPasswordPolicyWithExclude instantiates a new PasswordPolicyWithExclude object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPolicyWithExclude(enablePeriodicRotation bool, characterOptions PasswordPolicyCharacterOptions, minLengthInBytes int32, maxLengthInBytes int32) *PasswordPolicyWithExclude {
	this := PasswordPolicyWithExclude{}
	this.EnablePeriodicRotation = enablePeriodicRotation
	this.CharacterOptions = characterOptions
	this.MinLengthInBytes = minLengthInBytes
	this.MaxLengthInBytes = maxLengthInBytes
	return &this
}

// NewPasswordPolicyWithExcludeWithDefaults instantiates a new PasswordPolicyWithExclude object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPolicyWithExcludeWithDefaults() *PasswordPolicyWithExclude {
	this := PasswordPolicyWithExclude{}
	return &this
}

// GetIncludeList returns the IncludeList field value if set, zero value otherwise.
func (o *PasswordPolicyWithExclude) GetIncludeList() []string {
	if o == nil || IsNil(o.IncludeList) {
		var ret []string
		return ret
	}
	return o.IncludeList
}

// GetIncludeListOk returns a tuple with the IncludeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyWithExclude) GetIncludeListOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeList) {
		return nil, false
	}
	return o.IncludeList, true
}

// HasIncludeList returns a boolean if a field has been set.
func (o *PasswordPolicyWithExclude) HasIncludeList() bool {
	if o != nil && !IsNil(o.IncludeList) {
		return true
	}

	return false
}

// SetIncludeList gets a reference to the given []string and assigns it to the IncludeList field.
func (o *PasswordPolicyWithExclude) SetIncludeList(v []string) *PasswordPolicyWithExclude {
	o.IncludeList = v
	return o
}

// GetExcludeList returns the ExcludeList field value if set, zero value otherwise.
func (o *PasswordPolicyWithExclude) GetExcludeList() []string {
	if o == nil || IsNil(o.ExcludeList) {
		var ret []string
		return ret
	}
	return o.ExcludeList
}

// GetExcludeListOk returns a tuple with the ExcludeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyWithExclude) GetExcludeListOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeList) {
		return nil, false
	}
	return o.ExcludeList, true
}

// HasExcludeList returns a boolean if a field has been set.
func (o *PasswordPolicyWithExclude) HasExcludeList() bool {
	if o != nil && !IsNil(o.ExcludeList) {
		return true
	}

	return false
}

// SetExcludeList gets a reference to the given []string and assigns it to the ExcludeList field.
func (o *PasswordPolicyWithExclude) SetExcludeList(v []string) *PasswordPolicyWithExclude {
	o.ExcludeList = v
	return o
}

// GetEnablePeriodicRotation returns the EnablePeriodicRotation field value
func (o *PasswordPolicyWithExclude) GetEnablePeriodicRotation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnablePeriodicRotation
}

// GetEnablePeriodicRotationOk returns a tuple with the EnablePeriodicRotation field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyWithExclude) GetEnablePeriodicRotationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnablePeriodicRotation, true
}

// SetEnablePeriodicRotation sets field value
func (o *PasswordPolicyWithExclude) SetEnablePeriodicRotation(v bool) *PasswordPolicyWithExclude {
	o.EnablePeriodicRotation = v
	return o
}

// GetPeriodicRotationDurationInSeconds returns the PeriodicRotationDurationInSeconds field value if set, zero value otherwise.
func (o *PasswordPolicyWithExclude) GetPeriodicRotationDurationInSeconds() int32 {
	if o == nil || IsNil(o.PeriodicRotationDurationInSeconds) {
		var ret int32
		return ret
	}
	return *o.PeriodicRotationDurationInSeconds
}

// GetPeriodicRotationDurationInSecondsOk returns a tuple with the PeriodicRotationDurationInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyWithExclude) GetPeriodicRotationDurationInSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.PeriodicRotationDurationInSeconds) {
		return nil, false
	}
	return o.PeriodicRotationDurationInSeconds, true
}

// HasPeriodicRotationDurationInSeconds returns a boolean if a field has been set.
func (o *PasswordPolicyWithExclude) HasPeriodicRotationDurationInSeconds() bool {
	if o != nil && !IsNil(o.PeriodicRotationDurationInSeconds) {
		return true
	}

	return false
}

// SetPeriodicRotationDurationInSeconds gets a reference to the given int32 and assigns it to the PeriodicRotationDurationInSeconds field.
func (o *PasswordPolicyWithExclude) SetPeriodicRotationDurationInSeconds(v int32) *PasswordPolicyWithExclude {
	o.PeriodicRotationDurationInSeconds = &v
	return o
}

// GetCharacterOptions returns the CharacterOptions field value
func (o *PasswordPolicyWithExclude) GetCharacterOptions() PasswordPolicyCharacterOptions {
	if o == nil {
		var ret PasswordPolicyCharacterOptions
		return ret
	}

	return o.CharacterOptions
}

// GetCharacterOptionsOk returns a tuple with the CharacterOptions field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyWithExclude) GetCharacterOptionsOk() (*PasswordPolicyCharacterOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CharacterOptions, true
}

// SetCharacterOptions sets field value
func (o *PasswordPolicyWithExclude) SetCharacterOptions(v PasswordPolicyCharacterOptions) *PasswordPolicyWithExclude {
	o.CharacterOptions = v
	return o
}

// GetMinLengthInBytes returns the MinLengthInBytes field value
func (o *PasswordPolicyWithExclude) GetMinLengthInBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinLengthInBytes
}

// GetMinLengthInBytesOk returns a tuple with the MinLengthInBytes field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyWithExclude) GetMinLengthInBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinLengthInBytes, true
}

// SetMinLengthInBytes sets field value
func (o *PasswordPolicyWithExclude) SetMinLengthInBytes(v int32) *PasswordPolicyWithExclude {
	o.MinLengthInBytes = v
	return o
}

// GetMaxLengthInBytes returns the MaxLengthInBytes field value
func (o *PasswordPolicyWithExclude) GetMaxLengthInBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxLengthInBytes
}

// GetMaxLengthInBytesOk returns a tuple with the MaxLengthInBytes field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyWithExclude) GetMaxLengthInBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxLengthInBytes, true
}

// SetMaxLengthInBytes sets field value
func (o *PasswordPolicyWithExclude) SetMaxLengthInBytes(v int32) *PasswordPolicyWithExclude {
	o.MaxLengthInBytes = v
	return o
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *PasswordPolicyWithExclude) GetModifiedAt() time.Time {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyWithExclude) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *PasswordPolicyWithExclude) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *PasswordPolicyWithExclude) SetModifiedAt(v time.Time) *PasswordPolicyWithExclude {
	o.ModifiedAt = &v
	return o
}

func (o PasswordPolicyWithExclude) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordPolicyWithExclude) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IncludeList) {
		toSerialize["include_list"] = o.IncludeList
	}
	if !IsNil(o.ExcludeList) {
		toSerialize["exclude_list"] = o.ExcludeList
	}
	toSerialize["enable_periodic_rotation"] = o.EnablePeriodicRotation
	if !IsNil(o.PeriodicRotationDurationInSeconds) {
		toSerialize["periodic_rotation_duration_in_seconds"] = o.PeriodicRotationDurationInSeconds
	}
	toSerialize["character_options"] = o.CharacterOptions
	toSerialize["min_length_in_bytes"] = o.MinLengthInBytes
	toSerialize["max_length_in_bytes"] = o.MaxLengthInBytes
	if !IsNil(o.ModifiedAt) {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	return toSerialize, nil
}

type NullablePasswordPolicyWithExclude struct {
	value *PasswordPolicyWithExclude
	isSet bool
}

func (v NullablePasswordPolicyWithExclude) Get() *PasswordPolicyWithExclude {
	return v.value
}

func (v *NullablePasswordPolicyWithExclude) Set(val *PasswordPolicyWithExclude) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPolicyWithExclude) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPolicyWithExclude) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPolicyWithExclude(val *PasswordPolicyWithExclude) *NullablePasswordPolicyWithExclude {
	return &NullablePasswordPolicyWithExclude{value: val, isSet: true}
}

func (v NullablePasswordPolicyWithExclude) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPolicyWithExclude) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
