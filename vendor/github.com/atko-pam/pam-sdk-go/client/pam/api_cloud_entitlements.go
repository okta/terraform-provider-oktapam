/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// CloudEntitlementsAPIService CloudEntitlementsAPI service
type CloudEntitlementsAPIService service

type ApiCloudConnectionsCheckRequest struct {
	ctx                         context.Context
	ApiService                  *CloudEntitlementsAPIService
	teamName                    string
	cloudConnectionCheckRequest *CloudConnectionCheckRequest
}

func (r ApiCloudConnectionsCheckRequest) CloudConnectionCheckRequest(cloudConnectionCheckRequest CloudConnectionCheckRequest) ApiCloudConnectionsCheckRequest {
	r.cloudConnectionCheckRequest = &cloudConnectionCheckRequest
	return r
}

func (r ApiCloudConnectionsCheckRequest) Execute() (*CloudConnectionCheckResponse, *http.Response, error) {
	return r.ApiService.CloudConnectionsCheckExecute(r)
}

/*
	CloudConnectionsCheck Check a Cloud Connection

	    Checks an existing Cloud Connection.

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiCloudConnectionsCheckRequest
*/
func (a *CloudEntitlementsAPIService) CloudConnectionsCheck(ctx context.Context, teamName string) ApiCloudConnectionsCheckRequest {
	return ApiCloudConnectionsCheckRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return CloudConnectionCheckResponse
func (a *CloudEntitlementsAPIService) CloudConnectionsCheckExecute(r ApiCloudConnectionsCheckRequest) (*CloudConnectionCheckResponse, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.cloudConnectionsCheck"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudConnectionCheckResponse
	)

	localVarPath := "/v1/teams/{team_name}/cloud_connections/check"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudConnectionCheckRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiCreateCloudConnectionRequest struct {
	ctx             context.Context
	ApiService      *CloudEntitlementsAPIService
	teamName        string
	cloudConnection *CloudConnection
}

func (r ApiCreateCloudConnectionRequest) CloudConnection(cloudConnection CloudConnection) ApiCreateCloudConnectionRequest {
	r.cloudConnection = &cloudConnection
	return r
}

func (r ApiCreateCloudConnectionRequest) Execute() (*CloudConnection, *http.Response, error) {
	return r.ApiService.CreateCloudConnectionExecute(r)
}

/*
	CreateCloudConnection Create a Cloud Connection

	    Creates a connection to a specified cloud provider. Currently, this only supports AWS.

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiCreateCloudConnectionRequest
*/
func (a *CloudEntitlementsAPIService) CreateCloudConnection(ctx context.Context, teamName string) ApiCreateCloudConnectionRequest {
	return ApiCreateCloudConnectionRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return CloudConnection
func (a *CloudEntitlementsAPIService) CreateCloudConnectionExecute(r ApiCreateCloudConnectionRequest) (*CloudConnection, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.createCloudConnection"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudConnection
	)

	localVarPath := "/v1/teams/{team_name}/cloud_connections"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudConnection
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiCreateCloudEntitlementAnalysisRequest struct {
	ctx                 context.Context
	ApiService          *CloudEntitlementsAPIService
	teamName            string
	cloudEntitlementJob *CloudEntitlementJob
}

func (r ApiCreateCloudEntitlementAnalysisRequest) CloudEntitlementJob(cloudEntitlementJob CloudEntitlementJob) ApiCreateCloudEntitlementAnalysisRequest {
	r.cloudEntitlementJob = &cloudEntitlementJob
	return r
}

func (r ApiCreateCloudEntitlementAnalysisRequest) Execute() (*CloudEntitlementJob, *http.Response, error) {
	return r.ApiService.CreateCloudEntitlementAnalysisExecute(r)
}

/*
	CreateCloudEntitlementAnalysis Create a Cloud Entitlement Job

	    Creates a Cloud Entitlement Job

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiCreateCloudEntitlementAnalysisRequest
*/
func (a *CloudEntitlementsAPIService) CreateCloudEntitlementAnalysis(ctx context.Context, teamName string) ApiCreateCloudEntitlementAnalysisRequest {
	return ApiCreateCloudEntitlementAnalysisRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return CloudEntitlementJob
func (a *CloudEntitlementsAPIService) CreateCloudEntitlementAnalysisExecute(r ApiCreateCloudEntitlementAnalysisRequest) (*CloudEntitlementJob, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.createCloudEntitlementAnalysis"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudEntitlementJob
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudEntitlementJob
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiDeleteCloudConnectionRequest struct {
	ctx          context.Context
	ApiService   *CloudEntitlementsAPIService
	teamName     string
	connectionId string
}

func (r ApiDeleteCloudConnectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCloudConnectionExecute(r)
}

/*
	DeleteCloudConnection Delete a Cloud Connection

	    Deletes an existing Cloud Connection

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param connectionId The UUID of a Cloud Connection
	@return ApiDeleteCloudConnectionRequest
*/
func (a *CloudEntitlementsAPIService) DeleteCloudConnection(ctx context.Context, teamName string, connectionId string) ApiDeleteCloudConnectionRequest {
	return ApiDeleteCloudConnectionRequest{
		ApiService:   a,
		ctx:          ctx,
		teamName:     teamName,
		connectionId: connectionId,
	}
}

// Execute executes the request
func (a *CloudEntitlementsAPIService) DeleteCloudConnectionExecute(r ApiDeleteCloudConnectionRequest) (*http.Response, error) {
	var (
		traceKey           = "cloudentitlementsapi.deleteCloudConnection"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/cloud_connections/{connection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connection_id"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if localVarHTTPResponse == nil && err != nil {
		return nil, err
	}

	return localVarHTTPResponse, err
}

type ApiDeleteCloudEntitlementAnalysisRequest struct {
	ctx                        context.Context
	ApiService                 *CloudEntitlementsAPIService
	teamName                   string
	cloudEntitlementAnalysisId string
}

func (r ApiDeleteCloudEntitlementAnalysisRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCloudEntitlementAnalysisExecute(r)
}

/*
	DeleteCloudEntitlementAnalysis Delete a Cloud Entitlement Job

	    Deletes an existing Cloud Entitlement Job

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param cloudEntitlementAnalysisId The UUID of a Cloud Entitlement Job
	@return ApiDeleteCloudEntitlementAnalysisRequest
*/
func (a *CloudEntitlementsAPIService) DeleteCloudEntitlementAnalysis(ctx context.Context, teamName string, cloudEntitlementAnalysisId string) ApiDeleteCloudEntitlementAnalysisRequest {
	return ApiDeleteCloudEntitlementAnalysisRequest{
		ApiService:                 a,
		ctx:                        ctx,
		teamName:                   teamName,
		cloudEntitlementAnalysisId: cloudEntitlementAnalysisId,
	}
}

// Execute executes the request
func (a *CloudEntitlementsAPIService) DeleteCloudEntitlementAnalysisExecute(r ApiDeleteCloudEntitlementAnalysisRequest) (*http.Response, error) {
	var (
		traceKey           = "cloudentitlementsapi.deleteCloudEntitlementAnalysis"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses/{cloud_entitlement_analysis_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_entitlement_analysis_id"+"}", url.PathEscape(parameterValueToString(r.cloudEntitlementAnalysisId, "cloudEntitlementAnalysisId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if localVarHTTPResponse == nil && err != nil {
		return nil, err
	}

	return localVarHTTPResponse, err
}

type ApiGetCloudConnectionRequest struct {
	ctx          context.Context
	ApiService   *CloudEntitlementsAPIService
	teamName     string
	connectionId string
}

func (r ApiGetCloudConnectionRequest) Execute() (*CloudConnection, *http.Response, error) {
	return r.ApiService.GetCloudConnectionExecute(r)
}

/*
	GetCloudConnection Retrieve a Cloud Connection

	    Retrieves an existing Cloud Connection

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param connectionId The UUID of a Cloud Connection
	@return ApiGetCloudConnectionRequest
*/
func (a *CloudEntitlementsAPIService) GetCloudConnection(ctx context.Context, teamName string, connectionId string) ApiGetCloudConnectionRequest {
	return ApiGetCloudConnectionRequest{
		ApiService:   a,
		ctx:          ctx,
		teamName:     teamName,
		connectionId: connectionId,
	}
}

// Execute executes the request
//
//	@return CloudConnection
func (a *CloudEntitlementsAPIService) GetCloudConnectionExecute(r ApiGetCloudConnectionRequest) (*CloudConnection, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.getCloudConnection"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudConnection
	)

	localVarPath := "/v1/teams/{team_name}/cloud_connections/{connection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connection_id"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetCloudEntitlementAnalysisRequest struct {
	ctx                        context.Context
	ApiService                 *CloudEntitlementsAPIService
	teamName                   string
	cloudEntitlementAnalysisId string
}

func (r ApiGetCloudEntitlementAnalysisRequest) Execute() (*CloudEntitlementJob, *http.Response, error) {
	return r.ApiService.GetCloudEntitlementAnalysisExecute(r)
}

/*
	GetCloudEntitlementAnalysis Retrieve a Cloud Entitlement Job

	    Retrieves a specified Cloud Entitlement Job

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param cloudEntitlementAnalysisId The UUID of a Cloud Entitlement Job
	@return ApiGetCloudEntitlementAnalysisRequest
*/
func (a *CloudEntitlementsAPIService) GetCloudEntitlementAnalysis(ctx context.Context, teamName string, cloudEntitlementAnalysisId string) ApiGetCloudEntitlementAnalysisRequest {
	return ApiGetCloudEntitlementAnalysisRequest{
		ApiService:                 a,
		ctx:                        ctx,
		teamName:                   teamName,
		cloudEntitlementAnalysisId: cloudEntitlementAnalysisId,
	}
}

// Execute executes the request
//
//	@return CloudEntitlementJob
func (a *CloudEntitlementsAPIService) GetCloudEntitlementAnalysisExecute(r ApiGetCloudEntitlementAnalysisRequest) (*CloudEntitlementJob, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.getCloudEntitlementAnalysis"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudEntitlementJob
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses/{cloud_entitlement_analysis_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_entitlement_analysis_id"+"}", url.PathEscape(parameterValueToString(r.cloudEntitlementAnalysisId, "cloudEntitlementAnalysisId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetCloudEntitlementAnalysisSummaryRequest struct {
	ctx                        context.Context
	ApiService                 *CloudEntitlementsAPIService
	teamName                   string
	cloudEntitlementAnalysisId string
}

func (r ApiGetCloudEntitlementAnalysisSummaryRequest) Execute() (*CloudEntitlementJobSummary, *http.Response, error) {
	return r.ApiService.GetCloudEntitlementAnalysisSummaryExecute(r)
}

/*
	GetCloudEntitlementAnalysisSummary Retrieve a Cloud Entitlement Job Summary

	    Retrieves a high-level summary of a previously run Cloud Entitlement Job. If the specified job doesn't have a status of `COMPLETED` or `ERROR`, this operation returns an empty response.

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param cloudEntitlementAnalysisId The UUID of a Cloud Entitlement Job
	@return ApiGetCloudEntitlementAnalysisSummaryRequest
*/
func (a *CloudEntitlementsAPIService) GetCloudEntitlementAnalysisSummary(ctx context.Context, teamName string, cloudEntitlementAnalysisId string) ApiGetCloudEntitlementAnalysisSummaryRequest {
	return ApiGetCloudEntitlementAnalysisSummaryRequest{
		ApiService:                 a,
		ctx:                        ctx,
		teamName:                   teamName,
		cloudEntitlementAnalysisId: cloudEntitlementAnalysisId,
	}
}

// Execute executes the request
//
//	@return CloudEntitlementJobSummary
func (a *CloudEntitlementsAPIService) GetCloudEntitlementAnalysisSummaryExecute(r ApiGetCloudEntitlementAnalysisSummaryRequest) (*CloudEntitlementJobSummary, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.getCloudEntitlementAnalysisSummary"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudEntitlementJobSummary
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses/{cloud_entitlement_analysis_id}/summary"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_entitlement_analysis_id"+"}", url.PathEscape(parameterValueToString(r.cloudEntitlementAnalysisId, "cloudEntitlementAnalysisId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetCloudEntitlementAnalysisSummaryResourceRequest struct {
	ctx                          context.Context
	ApiService                   *CloudEntitlementsAPIService
	teamName                     string
	cloudEntitlementAnalysisId   string
	cloudEntitlementSummaryParam string
}

func (r ApiGetCloudEntitlementAnalysisSummaryResourceRequest) Execute() (*CloudEntitlementResources, *http.Response, error) {
	return r.ApiService.GetCloudEntitlementAnalysisSummaryResourceExecute(r)
}

/*
	GetCloudEntitlementAnalysisSummaryResource Retrieve a Resource from a Cloud Entitlement Job

	    Retrieves a specified Resource from a Cloud Entitlement Job

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param cloudEntitlementAnalysisId The UUID of a Cloud Entitlement Job
	    @param cloudEntitlementSummaryParam A specific param within a Cloud Entitlement Job
	@return ApiGetCloudEntitlementAnalysisSummaryResourceRequest
*/
func (a *CloudEntitlementsAPIService) GetCloudEntitlementAnalysisSummaryResource(ctx context.Context, teamName string, cloudEntitlementAnalysisId string, cloudEntitlementSummaryParam string) ApiGetCloudEntitlementAnalysisSummaryResourceRequest {
	return ApiGetCloudEntitlementAnalysisSummaryResourceRequest{
		ApiService:                   a,
		ctx:                          ctx,
		teamName:                     teamName,
		cloudEntitlementAnalysisId:   cloudEntitlementAnalysisId,
		cloudEntitlementSummaryParam: cloudEntitlementSummaryParam,
	}
}

// Execute executes the request
//
//	@return CloudEntitlementResources
func (a *CloudEntitlementsAPIService) GetCloudEntitlementAnalysisSummaryResourceExecute(r ApiGetCloudEntitlementAnalysisSummaryResourceRequest) (*CloudEntitlementResources, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.getCloudEntitlementAnalysisSummaryResource"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudEntitlementResources
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses/{cloud_entitlement_analysis_id}/resources/{cloud_entitlement_summary_param}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_entitlement_analysis_id"+"}", url.PathEscape(parameterValueToString(r.cloudEntitlementAnalysisId, "cloudEntitlementAnalysisId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_entitlement_summary_param"+"}", url.PathEscape(parameterValueToString(r.cloudEntitlementSummaryParam, "cloudEntitlementSummaryParam")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListAccountsForCloudConnectionRequest struct {
	ctx          context.Context
	ApiService   *CloudEntitlementsAPIService
	teamName     string
	connectionId string
}

func (r ApiListAccountsForCloudConnectionRequest) Execute() (*CloudConnectionAccounts, *http.Response, error) {
	return r.ApiService.ListAccountsForCloudConnectionExecute(r)
}

/*
	ListAccountsForCloudConnection List all accounts for a Cloud Connection

	    Lists all accounts for a specified Cloud Connection. This is used to run Entitlement Analysis jobs.

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param connectionId The UUID of a Cloud Connection
	@return ApiListAccountsForCloudConnectionRequest
*/
func (a *CloudEntitlementsAPIService) ListAccountsForCloudConnection(ctx context.Context, teamName string, connectionId string) ApiListAccountsForCloudConnectionRequest {
	return ApiListAccountsForCloudConnectionRequest{
		ApiService:   a,
		ctx:          ctx,
		teamName:     teamName,
		connectionId: connectionId,
	}
}

// Execute executes the request
//
//	@return CloudConnectionAccounts
func (a *CloudEntitlementsAPIService) ListAccountsForCloudConnectionExecute(r ApiListAccountsForCloudConnectionRequest) (*CloudConnectionAccounts, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.listAccountsForCloudConnection"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudConnectionAccounts
	)

	localVarPath := "/v1/teams/{team_name}/cloud_connections/{connection_id}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connection_id"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListCloudConnectionsRequest struct {
	ctx        context.Context
	ApiService *CloudEntitlementsAPIService
	teamName   string
}

func (r ApiListCloudConnectionsRequest) Execute() (*ListCloudConnectionsResponse, *http.Response, error) {
	return r.ApiService.ListCloudConnectionsExecute(r)
}

/*
	ListCloudConnections List all Cloud Connections

	    Lists all existing Cloud Connections

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiListCloudConnectionsRequest
*/
func (a *CloudEntitlementsAPIService) ListCloudConnections(ctx context.Context, teamName string) ApiListCloudConnectionsRequest {
	return ApiListCloudConnectionsRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListCloudConnectionsResponse
func (a *CloudEntitlementsAPIService) ListCloudConnectionsExecute(r ApiListCloudConnectionsRequest) (*ListCloudConnectionsResponse, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.listCloudConnections"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListCloudConnectionsResponse
	)

	localVarPath := "/v1/teams/{team_name}/cloud_connections"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListCloudEntitlementAnalysesRequest struct {
	ctx        context.Context
	ApiService *CloudEntitlementsAPIService
	teamName   string
}

func (r ApiListCloudEntitlementAnalysesRequest) Execute() (*ListCloudEntitlementAnalysesResponse, *http.Response, error) {
	return r.ApiService.ListCloudEntitlementAnalysesExecute(r)
}

/*
	ListCloudEntitlementAnalyses List all Cloud Entitlement Jobs

	    Lists all Cloud Entitlement Jobs.

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiListCloudEntitlementAnalysesRequest
*/
func (a *CloudEntitlementsAPIService) ListCloudEntitlementAnalyses(ctx context.Context, teamName string) ApiListCloudEntitlementAnalysesRequest {
	return ApiListCloudEntitlementAnalysesRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListCloudEntitlementAnalysesResponse
func (a *CloudEntitlementsAPIService) ListCloudEntitlementAnalysesExecute(r ApiListCloudEntitlementAnalysesRequest) (*ListCloudEntitlementAnalysesResponse, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.listCloudEntitlementAnalyses"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListCloudEntitlementAnalysesResponse
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListCloudEntitlementAnalysisAssignedUsersRequest struct {
	ctx                              context.Context
	ApiService                       *CloudEntitlementsAPIService
	teamName                         string
	cloudEntitlementAnalysisId       string
	cloudEntitlementJobAssignedUsers *CloudEntitlementJobAssignedUsers
}

func (r ApiListCloudEntitlementAnalysisAssignedUsersRequest) CloudEntitlementJobAssignedUsers(cloudEntitlementJobAssignedUsers CloudEntitlementJobAssignedUsers) ApiListCloudEntitlementAnalysisAssignedUsersRequest {
	r.cloudEntitlementJobAssignedUsers = &cloudEntitlementJobAssignedUsers
	return r
}

func (r ApiListCloudEntitlementAnalysisAssignedUsersRequest) Execute() (*ListCloudEntitlementAnalysisAssignedUsersResponse, *http.Response, error) {
	return r.ApiService.ListCloudEntitlementAnalysisAssignedUsersExecute(r)
}

/*
	ListCloudEntitlementAnalysisAssignedUsers List all Assigned Users for a Cloud Entitlement Job

	    Lists all assigned users discovered by a Cloud Entitlement Job. You can filter by users assigned to a specific group or by users associated with a specific permission set within an account.

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param cloudEntitlementAnalysisId The UUID of a Cloud Entitlement Job
	@return ApiListCloudEntitlementAnalysisAssignedUsersRequest
*/
func (a *CloudEntitlementsAPIService) ListCloudEntitlementAnalysisAssignedUsers(ctx context.Context, teamName string, cloudEntitlementAnalysisId string) ApiListCloudEntitlementAnalysisAssignedUsersRequest {
	return ApiListCloudEntitlementAnalysisAssignedUsersRequest{
		ApiService:                 a,
		ctx:                        ctx,
		teamName:                   teamName,
		cloudEntitlementAnalysisId: cloudEntitlementAnalysisId,
	}
}

// Execute executes the request
//
//	@return ListCloudEntitlementAnalysisAssignedUsersResponse
func (a *CloudEntitlementsAPIService) ListCloudEntitlementAnalysisAssignedUsersExecute(r ApiListCloudEntitlementAnalysisAssignedUsersRequest) (*ListCloudEntitlementAnalysisAssignedUsersResponse, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.listCloudEntitlementAnalysisAssignedUsers"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListCloudEntitlementAnalysisAssignedUsersResponse
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses/{cloud_entitlement_analysis_id}/list_users"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_entitlement_analysis_id"+"}", url.PathEscape(parameterValueToString(r.cloudEntitlementAnalysisId, "cloudEntitlementAnalysisId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudEntitlementJobAssignedUsers
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListCloudEntitlementAnalysisSummaryResourcesRequest struct {
	ctx                        context.Context
	ApiService                 *CloudEntitlementsAPIService
	teamName                   string
	cloudEntitlementAnalysisId string
}

func (r ApiListCloudEntitlementAnalysisSummaryResourcesRequest) Execute() (*ListCloudEntitlementAnalysisSummaryResourcesResponse, *http.Response, error) {
	return r.ApiService.ListCloudEntitlementAnalysisSummaryResourcesExecute(r)
}

/*
	ListCloudEntitlementAnalysisSummaryResources List all Resources for a Cloud Entitlement Job

	    Lists all resources discovered by a Cloud Entitlement Job. This list is sorted by risk.

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param cloudEntitlementAnalysisId The UUID of a Cloud Entitlement Job
	@return ApiListCloudEntitlementAnalysisSummaryResourcesRequest
*/
func (a *CloudEntitlementsAPIService) ListCloudEntitlementAnalysisSummaryResources(ctx context.Context, teamName string, cloudEntitlementAnalysisId string) ApiListCloudEntitlementAnalysisSummaryResourcesRequest {
	return ApiListCloudEntitlementAnalysisSummaryResourcesRequest{
		ApiService:                 a,
		ctx:                        ctx,
		teamName:                   teamName,
		cloudEntitlementAnalysisId: cloudEntitlementAnalysisId,
	}
}

// Execute executes the request
//
//	@return ListCloudEntitlementAnalysisSummaryResourcesResponse
func (a *CloudEntitlementsAPIService) ListCloudEntitlementAnalysisSummaryResourcesExecute(r ApiListCloudEntitlementAnalysisSummaryResourcesRequest) (*ListCloudEntitlementAnalysisSummaryResourcesResponse, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.listCloudEntitlementAnalysisSummaryResources"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListCloudEntitlementAnalysisSummaryResourcesResponse
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses/{cloud_entitlement_analysis_id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_entitlement_analysis_id"+"}", url.PathEscape(parameterValueToString(r.cloudEntitlementAnalysisId, "cloudEntitlementAnalysisId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiRunCloudEntitlementAnalysisRequest struct {
	ctx                        context.Context
	ApiService                 *CloudEntitlementsAPIService
	teamName                   string
	cloudEntitlementAnalysisId string
}

func (r ApiRunCloudEntitlementAnalysisRequest) Execute() (*http.Response, error) {
	return r.ApiService.RunCloudEntitlementAnalysisExecute(r)
}

/*
	RunCloudEntitlementAnalysis Run a Cloud Entitlement Job

	    Runs the specified Cloud Entitlement Job

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param cloudEntitlementAnalysisId The UUID of a Cloud Entitlement Job
	@return ApiRunCloudEntitlementAnalysisRequest
*/
func (a *CloudEntitlementsAPIService) RunCloudEntitlementAnalysis(ctx context.Context, teamName string, cloudEntitlementAnalysisId string) ApiRunCloudEntitlementAnalysisRequest {
	return ApiRunCloudEntitlementAnalysisRequest{
		ApiService:                 a,
		ctx:                        ctx,
		teamName:                   teamName,
		cloudEntitlementAnalysisId: cloudEntitlementAnalysisId,
	}
}

// Execute executes the request
func (a *CloudEntitlementsAPIService) RunCloudEntitlementAnalysisExecute(r ApiRunCloudEntitlementAnalysisRequest) (*http.Response, error) {
	var (
		traceKey           = "cloudentitlementsapi.runCloudEntitlementAnalysis"
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses/{cloud_entitlement_analysis_id}/run"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_entitlement_analysis_id"+"}", url.PathEscape(parameterValueToString(r.cloudEntitlementAnalysisId, "cloudEntitlementAnalysisId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if localVarHTTPResponse == nil && err != nil {
		return nil, err
	}

	return localVarHTTPResponse, err
}

type ApiUpdateCloudConnectionRequest struct {
	ctx                   context.Context
	ApiService            *CloudEntitlementsAPIService
	teamName              string
	connectionId          string
	updateCloudConnection *UpdateCloudConnection
}

func (r ApiUpdateCloudConnectionRequest) UpdateCloudConnection(updateCloudConnection UpdateCloudConnection) ApiUpdateCloudConnectionRequest {
	r.updateCloudConnection = &updateCloudConnection
	return r
}

func (r ApiUpdateCloudConnectionRequest) Execute() (*CloudConnection, *http.Response, error) {
	return r.ApiService.UpdateCloudConnectionExecute(r)
}

/*
	UpdateCloudConnection Update a Cloud Connection

	    Updates an existing Cloud Connection

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param connectionId The UUID of a Cloud Connection
	@return ApiUpdateCloudConnectionRequest
*/
func (a *CloudEntitlementsAPIService) UpdateCloudConnection(ctx context.Context, teamName string, connectionId string) ApiUpdateCloudConnectionRequest {
	return ApiUpdateCloudConnectionRequest{
		ApiService:   a,
		ctx:          ctx,
		teamName:     teamName,
		connectionId: connectionId,
	}
}

// Execute executes the request
//
//	@return CloudConnection
func (a *CloudEntitlementsAPIService) UpdateCloudConnectionExecute(r ApiUpdateCloudConnectionRequest) (*CloudConnection, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.updateCloudConnection"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudConnection
	)

	localVarPath := "/v1/teams/{team_name}/cloud_connections/{connection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connection_id"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateCloudConnection
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateCloudEntitlementAnalysisRequest struct {
	ctx                        context.Context
	ApiService                 *CloudEntitlementsAPIService
	teamName                   string
	cloudEntitlementAnalysisId string
	cloudEntitlementJob        *CloudEntitlementJob
}

func (r ApiUpdateCloudEntitlementAnalysisRequest) CloudEntitlementJob(cloudEntitlementJob CloudEntitlementJob) ApiUpdateCloudEntitlementAnalysisRequest {
	r.cloudEntitlementJob = &cloudEntitlementJob
	return r
}

func (r ApiUpdateCloudEntitlementAnalysisRequest) Execute() (*CloudEntitlementJob, *http.Response, error) {
	return r.ApiService.UpdateCloudEntitlementAnalysisExecute(r)
}

/*
	UpdateCloudEntitlementAnalysis Update a Cloud Entitlement Job

	    Updates an existing Cloud Entitlement Job

This endpoint requires the following role: `resource_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param cloudEntitlementAnalysisId The UUID of a Cloud Entitlement Job
	@return ApiUpdateCloudEntitlementAnalysisRequest
*/
func (a *CloudEntitlementsAPIService) UpdateCloudEntitlementAnalysis(ctx context.Context, teamName string, cloudEntitlementAnalysisId string) ApiUpdateCloudEntitlementAnalysisRequest {
	return ApiUpdateCloudEntitlementAnalysisRequest{
		ApiService:                 a,
		ctx:                        ctx,
		teamName:                   teamName,
		cloudEntitlementAnalysisId: cloudEntitlementAnalysisId,
	}
}

// Execute executes the request
//
//	@return CloudEntitlementJob
func (a *CloudEntitlementsAPIService) UpdateCloudEntitlementAnalysisExecute(r ApiUpdateCloudEntitlementAnalysisRequest) (*CloudEntitlementJob, *http.Response, error) {
	var (
		traceKey            = "cloudentitlementsapi.updateCloudEntitlementAnalysis"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CloudEntitlementJob
	)

	localVarPath := "/v1/teams/{team_name}/cloud_entitlement_analyses/{cloud_entitlement_analysis_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_entitlement_analysis_id"+"}", url.PathEscape(parameterValueToString(r.cloudEntitlementAnalysisId, "cloudEntitlementAnalysisId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudEntitlementJob
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
