/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector{}

// SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector Principals can access Active Directory accounts which are matched to them via discovery rules
type SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector struct {
	ByCondition *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelectorByCondition `json:"by_condition,omitempty"`
	// Allow access to a subset of the matched individual accounts they matched to
	ByDomain []string `json:"by_domain,omitempty"`
}

// NewSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector instantiates a new SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector() *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector {
	this := SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector{}
	return &this
}

// NewSecurityPolicyRuleActiveDirectoryIndividualAccountsSelectorWithDefaults instantiates a new SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRuleActiveDirectoryIndividualAccountsSelectorWithDefaults() *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector {
	this := SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector{}
	return &this
}

// GetByCondition returns the ByCondition field value if set, zero value otherwise.
func (o *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) GetByCondition() SecurityPolicyRuleActiveDirectoryIndividualAccountsSelectorByCondition {
	if o == nil || IsNil(o.ByCondition) {
		var ret SecurityPolicyRuleActiveDirectoryIndividualAccountsSelectorByCondition
		return ret
	}
	return *o.ByCondition
}

// GetByConditionOk returns a tuple with the ByCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) GetByConditionOk() (*SecurityPolicyRuleActiveDirectoryIndividualAccountsSelectorByCondition, bool) {
	if o == nil || IsNil(o.ByCondition) {
		return nil, false
	}
	return o.ByCondition, true
}

// HasByCondition returns a boolean if a field has been set.
func (o *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) HasByCondition() bool {
	if o != nil && !IsNil(o.ByCondition) {
		return true
	}

	return false
}

// SetByCondition gets a reference to the given SecurityPolicyRuleActiveDirectoryIndividualAccountsSelectorByCondition and assigns it to the ByCondition field.
func (o *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) SetByCondition(v SecurityPolicyRuleActiveDirectoryIndividualAccountsSelectorByCondition) *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector {
	o.ByCondition = &v
	return o
}

// GetByDomain returns the ByDomain field value if set, zero value otherwise.
func (o *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) GetByDomain() []string {
	if o == nil || IsNil(o.ByDomain) {
		var ret []string
		return ret
	}
	return o.ByDomain
}

// GetByDomainOk returns a tuple with the ByDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) GetByDomainOk() ([]string, bool) {
	if o == nil || IsNil(o.ByDomain) {
		return nil, false
	}
	return o.ByDomain, true
}

// HasByDomain returns a boolean if a field has been set.
func (o *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) HasByDomain() bool {
	if o != nil && !IsNil(o.ByDomain) {
		return true
	}

	return false
}

// SetByDomain gets a reference to the given []string and assigns it to the ByDomain field.
func (o *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) SetByDomain(v []string) *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector {
	o.ByDomain = v
	return o
}

func (o SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ByCondition) {
		toSerialize["by_condition"] = o.ByCondition
	}
	if !IsNil(o.ByDomain) {
		toSerialize["by_domain"] = o.ByDomain
	}
	return toSerialize, nil
}

type NullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector struct {
	value *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector
	isSet bool
}

func (v NullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) Get() *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector {
	return v.value
}

func (v *NullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) Set(val *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector(val *SecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) *NullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector {
	return &NullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleActiveDirectoryIndividualAccountsSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
