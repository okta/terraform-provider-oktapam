/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ADUserSync type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ADUserSync{}

// ADUserSync struct for ADUserSync
type ADUserSync struct {
	// The UUID of the user sync job
	Id *string `json:"id,omitempty"`
	// The name of the user sync job
	Name *string `json:"name,omitempty"`
	// Indicates how often the user sync job runs. Possible values: `1`, `6`, `12`, `24`.
	Frequency *string `json:"frequency,omitempty"`
	// A UTC timestamp that indicates the hour range when the user sync job runs. Only used if `frequency` is set to 24.
	StartHourUtc *string `json:"start_hour_utc,omitempty"`
	// The domain to search for user accounts
	BaseDn *string `json:"base_dn,omitempty"`
	// Defines the criteria used to filter user accounts
	LDAPQueryFilter *string `json:"LDAP_query_filter,omitempty"`
	// The AD attribute that defines the User Principal Name (UPN) for accounts. Most AD tenants use `userPrincipalName`.
	UPNField *string `json:"UPN_Field,omitempty"`
	// The AD attribute that defines the security identifier (SID) for accounts. Most AD tenants use `objectSID`.
	SIDField *string `json:"SID_Field,omitempty"`
	// If `true`, enables the user sync job
	IsActive *bool `json:"is_active,omitempty"`
	// The results from the most recent user sync job run
	RecentTaskResult *string `json:"recent_task_result,omitempty"`
}

// NewADUserSync instantiates a new ADUserSync object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADUserSync() *ADUserSync {
	this := ADUserSync{}
	return &this
}

// NewADUserSyncWithDefaults instantiates a new ADUserSync object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADUserSyncWithDefaults() *ADUserSync {
	this := ADUserSync{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ADUserSync) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ADUserSync) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ADUserSync) SetId(v string) *ADUserSync {
	o.Id = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ADUserSync) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ADUserSync) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ADUserSync) SetName(v string) *ADUserSync {
	o.Name = &v
	return o
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *ADUserSync) GetFrequency() string {
	if o == nil || IsNil(o.Frequency) {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *ADUserSync) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *ADUserSync) SetFrequency(v string) *ADUserSync {
	o.Frequency = &v
	return o
}

// GetStartHourUtc returns the StartHourUtc field value if set, zero value otherwise.
func (o *ADUserSync) GetStartHourUtc() string {
	if o == nil || IsNil(o.StartHourUtc) {
		var ret string
		return ret
	}
	return *o.StartHourUtc
}

// GetStartHourUtcOk returns a tuple with the StartHourUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetStartHourUtcOk() (*string, bool) {
	if o == nil || IsNil(o.StartHourUtc) {
		return nil, false
	}
	return o.StartHourUtc, true
}

// HasStartHourUtc returns a boolean if a field has been set.
func (o *ADUserSync) HasStartHourUtc() bool {
	if o != nil && !IsNil(o.StartHourUtc) {
		return true
	}

	return false
}

// SetStartHourUtc gets a reference to the given string and assigns it to the StartHourUtc field.
func (o *ADUserSync) SetStartHourUtc(v string) *ADUserSync {
	o.StartHourUtc = &v
	return o
}

// GetBaseDn returns the BaseDn field value if set, zero value otherwise.
func (o *ADUserSync) GetBaseDn() string {
	if o == nil || IsNil(o.BaseDn) {
		var ret string
		return ret
	}
	return *o.BaseDn
}

// GetBaseDnOk returns a tuple with the BaseDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetBaseDnOk() (*string, bool) {
	if o == nil || IsNil(o.BaseDn) {
		return nil, false
	}
	return o.BaseDn, true
}

// HasBaseDn returns a boolean if a field has been set.
func (o *ADUserSync) HasBaseDn() bool {
	if o != nil && !IsNil(o.BaseDn) {
		return true
	}

	return false
}

// SetBaseDn gets a reference to the given string and assigns it to the BaseDn field.
func (o *ADUserSync) SetBaseDn(v string) *ADUserSync {
	o.BaseDn = &v
	return o
}

// GetLDAPQueryFilter returns the LDAPQueryFilter field value if set, zero value otherwise.
func (o *ADUserSync) GetLDAPQueryFilter() string {
	if o == nil || IsNil(o.LDAPQueryFilter) {
		var ret string
		return ret
	}
	return *o.LDAPQueryFilter
}

// GetLDAPQueryFilterOk returns a tuple with the LDAPQueryFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetLDAPQueryFilterOk() (*string, bool) {
	if o == nil || IsNil(o.LDAPQueryFilter) {
		return nil, false
	}
	return o.LDAPQueryFilter, true
}

// HasLDAPQueryFilter returns a boolean if a field has been set.
func (o *ADUserSync) HasLDAPQueryFilter() bool {
	if o != nil && !IsNil(o.LDAPQueryFilter) {
		return true
	}

	return false
}

// SetLDAPQueryFilter gets a reference to the given string and assigns it to the LDAPQueryFilter field.
func (o *ADUserSync) SetLDAPQueryFilter(v string) *ADUserSync {
	o.LDAPQueryFilter = &v
	return o
}

// GetUPNField returns the UPNField field value if set, zero value otherwise.
func (o *ADUserSync) GetUPNField() string {
	if o == nil || IsNil(o.UPNField) {
		var ret string
		return ret
	}
	return *o.UPNField
}

// GetUPNFieldOk returns a tuple with the UPNField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetUPNFieldOk() (*string, bool) {
	if o == nil || IsNil(o.UPNField) {
		return nil, false
	}
	return o.UPNField, true
}

// HasUPNField returns a boolean if a field has been set.
func (o *ADUserSync) HasUPNField() bool {
	if o != nil && !IsNil(o.UPNField) {
		return true
	}

	return false
}

// SetUPNField gets a reference to the given string and assigns it to the UPNField field.
func (o *ADUserSync) SetUPNField(v string) *ADUserSync {
	o.UPNField = &v
	return o
}

// GetSIDField returns the SIDField field value if set, zero value otherwise.
func (o *ADUserSync) GetSIDField() string {
	if o == nil || IsNil(o.SIDField) {
		var ret string
		return ret
	}
	return *o.SIDField
}

// GetSIDFieldOk returns a tuple with the SIDField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetSIDFieldOk() (*string, bool) {
	if o == nil || IsNil(o.SIDField) {
		return nil, false
	}
	return o.SIDField, true
}

// HasSIDField returns a boolean if a field has been set.
func (o *ADUserSync) HasSIDField() bool {
	if o != nil && !IsNil(o.SIDField) {
		return true
	}

	return false
}

// SetSIDField gets a reference to the given string and assigns it to the SIDField field.
func (o *ADUserSync) SetSIDField(v string) *ADUserSync {
	o.SIDField = &v
	return o
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *ADUserSync) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *ADUserSync) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *ADUserSync) SetIsActive(v bool) *ADUserSync {
	o.IsActive = &v
	return o
}

// GetRecentTaskResult returns the RecentTaskResult field value if set, zero value otherwise.
func (o *ADUserSync) GetRecentTaskResult() string {
	if o == nil || IsNil(o.RecentTaskResult) {
		var ret string
		return ret
	}
	return *o.RecentTaskResult
}

// GetRecentTaskResultOk returns a tuple with the RecentTaskResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserSync) GetRecentTaskResultOk() (*string, bool) {
	if o == nil || IsNil(o.RecentTaskResult) {
		return nil, false
	}
	return o.RecentTaskResult, true
}

// HasRecentTaskResult returns a boolean if a field has been set.
func (o *ADUserSync) HasRecentTaskResult() bool {
	if o != nil && !IsNil(o.RecentTaskResult) {
		return true
	}

	return false
}

// SetRecentTaskResult gets a reference to the given string and assigns it to the RecentTaskResult field.
func (o *ADUserSync) SetRecentTaskResult(v string) *ADUserSync {
	o.RecentTaskResult = &v
	return o
}

func (o ADUserSync) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ADUserSync) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.StartHourUtc) {
		toSerialize["start_hour_utc"] = o.StartHourUtc
	}
	if !IsNil(o.BaseDn) {
		toSerialize["base_dn"] = o.BaseDn
	}
	if !IsNil(o.LDAPQueryFilter) {
		toSerialize["LDAP_query_filter"] = o.LDAPQueryFilter
	}
	if !IsNil(o.UPNField) {
		toSerialize["UPN_Field"] = o.UPNField
	}
	if !IsNil(o.SIDField) {
		toSerialize["SID_Field"] = o.SIDField
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.RecentTaskResult) {
		toSerialize["recent_task_result"] = o.RecentTaskResult
	}
	return toSerialize, nil
}

type NullableADUserSync struct {
	value *ADUserSync
	isSet bool
}

func (v NullableADUserSync) Get() *ADUserSync {
	return v.value
}

func (v *NullableADUserSync) Set(val *ADUserSync) {
	v.value = val
	v.isSet = true
}

func (v NullableADUserSync) IsSet() bool {
	return v.isSet
}

func (v *NullableADUserSync) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADUserSync(val *ADUserSync) *NullableADUserSync {
	return &NullableADUserSync{value: val, isSet: true}
}

func (v NullableADUserSync) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADUserSync) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
