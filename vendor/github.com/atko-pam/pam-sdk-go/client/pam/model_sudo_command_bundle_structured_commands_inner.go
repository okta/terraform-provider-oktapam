/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SudoCommandBundleStructuredCommandsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SudoCommandBundleStructuredCommandsInner{}

// SudoCommandBundleStructuredCommandsInner struct for SudoCommandBundleStructuredCommandsInner
type SudoCommandBundleStructuredCommandsInner struct {
	Args            *string     `json:"args,omitempty"`
	ArgsType        *ArgsType   `json:"args_type,omitempty"`
	CommandType     CommandType `json:"command_type"`
	Command         string      `json:"command"`
	RenderedCommand *string     `json:"rendered_command,omitempty"`
}

// NewSudoCommandBundleStructuredCommandsInner instantiates a new SudoCommandBundleStructuredCommandsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSudoCommandBundleStructuredCommandsInner(commandType CommandType, command string) *SudoCommandBundleStructuredCommandsInner {
	this := SudoCommandBundleStructuredCommandsInner{}
	this.CommandType = commandType
	this.Command = command
	return &this
}

// NewSudoCommandBundleStructuredCommandsInnerWithDefaults instantiates a new SudoCommandBundleStructuredCommandsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSudoCommandBundleStructuredCommandsInnerWithDefaults() *SudoCommandBundleStructuredCommandsInner {
	this := SudoCommandBundleStructuredCommandsInner{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *SudoCommandBundleStructuredCommandsInner) GetArgs() string {
	if o == nil || IsNil(o.Args) {
		var ret string
		return ret
	}
	return *o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleStructuredCommandsInner) GetArgsOk() (*string, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *SudoCommandBundleStructuredCommandsInner) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given string and assigns it to the Args field.
func (o *SudoCommandBundleStructuredCommandsInner) SetArgs(v string) *SudoCommandBundleStructuredCommandsInner {
	o.Args = &v
	return o
}

// GetArgsType returns the ArgsType field value if set, zero value otherwise.
func (o *SudoCommandBundleStructuredCommandsInner) GetArgsType() ArgsType {
	if o == nil || IsNil(o.ArgsType) {
		var ret ArgsType
		return ret
	}
	return *o.ArgsType
}

// GetArgsTypeOk returns a tuple with the ArgsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleStructuredCommandsInner) GetArgsTypeOk() (*ArgsType, bool) {
	if o == nil || IsNil(o.ArgsType) {
		return nil, false
	}
	return o.ArgsType, true
}

// HasArgsType returns a boolean if a field has been set.
func (o *SudoCommandBundleStructuredCommandsInner) HasArgsType() bool {
	if o != nil && !IsNil(o.ArgsType) {
		return true
	}

	return false
}

// SetArgsType gets a reference to the given ArgsType and assigns it to the ArgsType field.
func (o *SudoCommandBundleStructuredCommandsInner) SetArgsType(v ArgsType) *SudoCommandBundleStructuredCommandsInner {
	o.ArgsType = &v
	return o
}

// GetCommandType returns the CommandType field value
func (o *SudoCommandBundleStructuredCommandsInner) GetCommandType() CommandType {
	if o == nil {
		var ret CommandType
		return ret
	}

	return o.CommandType
}

// GetCommandTypeOk returns a tuple with the CommandType field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleStructuredCommandsInner) GetCommandTypeOk() (*CommandType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandType, true
}

// SetCommandType sets field value
func (o *SudoCommandBundleStructuredCommandsInner) SetCommandType(v CommandType) *SudoCommandBundleStructuredCommandsInner {
	o.CommandType = v
	return o
}

// GetCommand returns the Command field value
func (o *SudoCommandBundleStructuredCommandsInner) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleStructuredCommandsInner) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *SudoCommandBundleStructuredCommandsInner) SetCommand(v string) *SudoCommandBundleStructuredCommandsInner {
	o.Command = v
	return o
}

// GetRenderedCommand returns the RenderedCommand field value if set, zero value otherwise.
func (o *SudoCommandBundleStructuredCommandsInner) GetRenderedCommand() string {
	if o == nil || IsNil(o.RenderedCommand) {
		var ret string
		return ret
	}
	return *o.RenderedCommand
}

// GetRenderedCommandOk returns a tuple with the RenderedCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleStructuredCommandsInner) GetRenderedCommandOk() (*string, bool) {
	if o == nil || IsNil(o.RenderedCommand) {
		return nil, false
	}
	return o.RenderedCommand, true
}

// HasRenderedCommand returns a boolean if a field has been set.
func (o *SudoCommandBundleStructuredCommandsInner) HasRenderedCommand() bool {
	if o != nil && !IsNil(o.RenderedCommand) {
		return true
	}

	return false
}

// SetRenderedCommand gets a reference to the given string and assigns it to the RenderedCommand field.
func (o *SudoCommandBundleStructuredCommandsInner) SetRenderedCommand(v string) *SudoCommandBundleStructuredCommandsInner {
	o.RenderedCommand = &v
	return o
}

func (o SudoCommandBundleStructuredCommandsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SudoCommandBundleStructuredCommandsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.ArgsType) {
		toSerialize["args_type"] = o.ArgsType
	}
	toSerialize["command_type"] = o.CommandType
	toSerialize["command"] = o.Command
	if !IsNil(o.RenderedCommand) {
		toSerialize["rendered_command"] = o.RenderedCommand
	}
	return toSerialize, nil
}

type NullableSudoCommandBundleStructuredCommandsInner struct {
	value *SudoCommandBundleStructuredCommandsInner
	isSet bool
}

func (v NullableSudoCommandBundleStructuredCommandsInner) Get() *SudoCommandBundleStructuredCommandsInner {
	return v.value
}

func (v *NullableSudoCommandBundleStructuredCommandsInner) Set(val *SudoCommandBundleStructuredCommandsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSudoCommandBundleStructuredCommandsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSudoCommandBundleStructuredCommandsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSudoCommandBundleStructuredCommandsInner(val *SudoCommandBundleStructuredCommandsInner) *NullableSudoCommandBundleStructuredCommandsInner {
	return &NullableSudoCommandBundleStructuredCommandsInner{value: val, isSet: true}
}

func (v NullableSudoCommandBundleStructuredCommandsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSudoCommandBundleStructuredCommandsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
