/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	// The name of the Team
	TeamName string `json:"team_name"`
	// The UUID of the User
	Id string `json:"id"`
	// The username for the User
	Name string `json:"name"`
	// The status of the User: `ACTIVE`, `DISABLED`, or `DELETED`. Users can't disable or delete their own account.
	Status  string              `json:"status"`
	Details NullableUserDetails `json:"details"`
	// The type of User. Possible values: `service` or `human`.
	UserType string `json:"user_type"`
	// If defined, indicates the OAuth Client Application ID tied to a Service User. Only available when the user was created as part of an OAuth approval flow.
	OauthClientApplicationId NullableString `json:"oauth_client_application_id,omitempty"`
	// The permission roles available to the User
	RoleGrants []string `json:"role_grants,omitempty"`
	// A timestamp indicating when the User was deleted
	DeletedAt NullableTime `json:"deleted_at"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(teamName string, id string, name string, status string, details NullableUserDetails, userType string, deletedAt NullableTime) *User {
	this := User{}
	this.TeamName = teamName
	this.Id = id
	this.Name = name
	this.Status = status
	this.Details = details
	this.UserType = userType
	this.DeletedAt = deletedAt
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetTeamName returns the TeamName field value
func (o *User) GetTeamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value
// and a boolean to check if the value has been set.
func (o *User) GetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamName, true
}

// SetTeamName sets field value
func (o *User) SetTeamName(v string) *User {
	o.TeamName = v
	return o
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) *User {
	o.Id = v
	return o
}

// GetName returns the Name field value
func (o *User) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *User) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *User) SetName(v string) *User {
	o.Name = v
	return o
}

// GetStatus returns the Status field value
func (o *User) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *User) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *User) SetStatus(v string) *User {
	o.Status = v
	return o
}

// GetDetails returns the Details field value
// If the value is explicit nil, the zero value for UserDetails will be returned
func (o *User) GetDetails() UserDetails {
	if o == nil || o.Details.Get() == nil {
		var ret UserDetails
		return ret
	}

	return *o.Details.Get()
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetDetailsOk() (*UserDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.Details.Get(), o.Details.IsSet()
}

// SetDetails sets field value
func (o *User) SetDetails(v UserDetails) *User {
	o.Details.Set(&v)
	return o
}

// GetUserType returns the UserType field value
func (o *User) GetUserType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value
// and a boolean to check if the value has been set.
func (o *User) GetUserTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserType, true
}

// SetUserType sets field value
func (o *User) SetUserType(v string) *User {
	o.UserType = v
	return o
}

// GetOauthClientApplicationId returns the OauthClientApplicationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetOauthClientApplicationId() string {
	if o == nil || IsNil(o.OauthClientApplicationId.Get()) {
		var ret string
		return ret
	}
	return *o.OauthClientApplicationId.Get()
}

// GetOauthClientApplicationIdOk returns a tuple with the OauthClientApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetOauthClientApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OauthClientApplicationId.Get(), o.OauthClientApplicationId.IsSet()
}

// HasOauthClientApplicationId returns a boolean if a field has been set.
func (o *User) HasOauthClientApplicationId() bool {
	if o != nil && o.OauthClientApplicationId.IsSet() {
		return true
	}

	return false
}

// SetOauthClientApplicationId gets a reference to the given NullableString and assigns it to the OauthClientApplicationId field.
func (o *User) SetOauthClientApplicationId(v string) *User {
	o.OauthClientApplicationId.Set(&v)
	return o
}

// SetOauthClientApplicationIdNil sets the value for OauthClientApplicationId to be an explicit nil
func (o *User) SetOauthClientApplicationIdNil() *User {
	o.OauthClientApplicationId.Set(nil)
	return o
}

// UnsetOauthClientApplicationId ensures that no value is present for OauthClientApplicationId, not even an explicit nil
func (o *User) UnsetOauthClientApplicationId() *User {
	o.OauthClientApplicationId.Unset()
	return o
}

// GetRoleGrants returns the RoleGrants field value if set, zero value otherwise.
func (o *User) GetRoleGrants() []string {
	if o == nil || IsNil(o.RoleGrants) {
		var ret []string
		return ret
	}
	return o.RoleGrants
}

// GetRoleGrantsOk returns a tuple with the RoleGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetRoleGrantsOk() ([]string, bool) {
	if o == nil || IsNil(o.RoleGrants) {
		return nil, false
	}
	return o.RoleGrants, true
}

// HasRoleGrants returns a boolean if a field has been set.
func (o *User) HasRoleGrants() bool {
	if o != nil && !IsNil(o.RoleGrants) {
		return true
	}

	return false
}

// SetRoleGrants gets a reference to the given []string and assigns it to the RoleGrants field.
func (o *User) SetRoleGrants(v []string) *User {
	o.RoleGrants = v
	return o
}

// GetDeletedAt returns the DeletedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *User) GetDeletedAt() time.Time {
	if o == nil || o.DeletedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.DeletedAt.Get()
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletedAt.Get(), o.DeletedAt.IsSet()
}

// SetDeletedAt sets field value
func (o *User) SetDeletedAt(v time.Time) *User {
	o.DeletedAt.Set(&v)
	return o
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["team_name"] = o.TeamName
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["details"] = o.Details.Get()
	toSerialize["user_type"] = o.UserType
	if o.OauthClientApplicationId.IsSet() {
		toSerialize["oauth_client_application_id"] = o.OauthClientApplicationId.Get()
	}
	if !IsNil(o.RoleGrants) {
		toSerialize["role_grants"] = o.RoleGrants
	}
	toSerialize["deleted_at"] = o.DeletedAt.Get()
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
