/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryMatchingCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryMatchingCriteria{}

// ActiveDirectoryMatchingCriteria struct for ActiveDirectoryMatchingCriteria
type ActiveDirectoryMatchingCriteria struct {
	// If set, username attribute must match
	Username *bool `json:"username,omitempty"`
	// If set, first and last name attributes must match
	FirstAndLastName *bool `json:"first_and_last_name,omitempty"`
	// If set, display name attribute must match
	DisplayName *bool `json:"display_name,omitempty"`
	// If set, email attribute must match
	Email *bool `json:"email,omitempty"`
}

// NewActiveDirectoryMatchingCriteria instantiates a new ActiveDirectoryMatchingCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryMatchingCriteria() *ActiveDirectoryMatchingCriteria {
	this := ActiveDirectoryMatchingCriteria{}
	return &this
}

// NewActiveDirectoryMatchingCriteriaWithDefaults instantiates a new ActiveDirectoryMatchingCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryMatchingCriteriaWithDefaults() *ActiveDirectoryMatchingCriteria {
	this := ActiveDirectoryMatchingCriteria{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ActiveDirectoryMatchingCriteria) GetUsername() bool {
	if o == nil || IsNil(o.Username) {
		var ret bool
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryMatchingCriteria) GetUsernameOk() (*bool, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ActiveDirectoryMatchingCriteria) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given bool and assigns it to the Username field.
func (o *ActiveDirectoryMatchingCriteria) SetUsername(v bool) *ActiveDirectoryMatchingCriteria {
	o.Username = &v
	return o
}

// GetFirstAndLastName returns the FirstAndLastName field value if set, zero value otherwise.
func (o *ActiveDirectoryMatchingCriteria) GetFirstAndLastName() bool {
	if o == nil || IsNil(o.FirstAndLastName) {
		var ret bool
		return ret
	}
	return *o.FirstAndLastName
}

// GetFirstAndLastNameOk returns a tuple with the FirstAndLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryMatchingCriteria) GetFirstAndLastNameOk() (*bool, bool) {
	if o == nil || IsNil(o.FirstAndLastName) {
		return nil, false
	}
	return o.FirstAndLastName, true
}

// HasFirstAndLastName returns a boolean if a field has been set.
func (o *ActiveDirectoryMatchingCriteria) HasFirstAndLastName() bool {
	if o != nil && !IsNil(o.FirstAndLastName) {
		return true
	}

	return false
}

// SetFirstAndLastName gets a reference to the given bool and assigns it to the FirstAndLastName field.
func (o *ActiveDirectoryMatchingCriteria) SetFirstAndLastName(v bool) *ActiveDirectoryMatchingCriteria {
	o.FirstAndLastName = &v
	return o
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ActiveDirectoryMatchingCriteria) GetDisplayName() bool {
	if o == nil || IsNil(o.DisplayName) {
		var ret bool
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryMatchingCriteria) GetDisplayNameOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ActiveDirectoryMatchingCriteria) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given bool and assigns it to the DisplayName field.
func (o *ActiveDirectoryMatchingCriteria) SetDisplayName(v bool) *ActiveDirectoryMatchingCriteria {
	o.DisplayName = &v
	return o
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ActiveDirectoryMatchingCriteria) GetEmail() bool {
	if o == nil || IsNil(o.Email) {
		var ret bool
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryMatchingCriteria) GetEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ActiveDirectoryMatchingCriteria) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given bool and assigns it to the Email field.
func (o *ActiveDirectoryMatchingCriteria) SetEmail(v bool) *ActiveDirectoryMatchingCriteria {
	o.Email = &v
	return o
}

func (o ActiveDirectoryMatchingCriteria) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryMatchingCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.FirstAndLastName) {
		toSerialize["first_and_last_name"] = o.FirstAndLastName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableActiveDirectoryMatchingCriteria struct {
	value *ActiveDirectoryMatchingCriteria
	isSet bool
}

func (v NullableActiveDirectoryMatchingCriteria) Get() *ActiveDirectoryMatchingCriteria {
	return v.value
}

func (v *NullableActiveDirectoryMatchingCriteria) Set(val *ActiveDirectoryMatchingCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryMatchingCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryMatchingCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryMatchingCriteria(val *ActiveDirectoryMatchingCriteria) *NullableActiveDirectoryMatchingCriteria {
	return &NullableActiveDirectoryMatchingCriteria{value: val, isSet: true}
}

func (v NullableActiveDirectoryMatchingCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryMatchingCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
