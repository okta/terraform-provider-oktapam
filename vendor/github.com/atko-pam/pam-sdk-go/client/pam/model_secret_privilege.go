/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecretPrivilege type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretPrivilege{}

// SecretPrivilege struct for SecretPrivilege
type SecretPrivilege struct {
	// If `true`, the user has the privilege to list the contents of the folder
	List *bool `json:"list,omitempty"`
	// If `true`, the user has the privilege to create a folder
	FolderCreate *bool `json:"folder_create,omitempty"`
	// If `true`, the user has the privilege to update a folder
	FolderUpdate *bool `json:"folder_update,omitempty"`
	// If `true`, the user has the privilege to delete a folder
	FolderDelete *bool `json:"folder_delete,omitempty"`
	// If `true`, the user has the privilege to create a secret
	SecretCreate *bool `json:"secret_create,omitempty"`
	// If `true`, the user has the privilege to update a secret
	SecretUpdate *bool `json:"secret_update,omitempty"`
	// If `true`, the user has the privilege to reveal a secret
	SecretReveal *bool `json:"secret_reveal,omitempty"`
	// If `true`, the user has the privilege to delete a secret
	SecretDelete *bool `json:"secret_delete,omitempty"`
}

// NewSecretPrivilege instantiates a new SecretPrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretPrivilege() *SecretPrivilege {
	this := SecretPrivilege{}
	return &this
}

// NewSecretPrivilegeWithDefaults instantiates a new SecretPrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretPrivilegeWithDefaults() *SecretPrivilege {
	this := SecretPrivilege{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *SecretPrivilege) GetList() bool {
	if o == nil || IsNil(o.List) {
		var ret bool
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPrivilege) GetListOk() (*bool, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *SecretPrivilege) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given bool and assigns it to the List field.
func (o *SecretPrivilege) SetList(v bool) *SecretPrivilege {
	o.List = &v
	return o
}

// GetFolderCreate returns the FolderCreate field value if set, zero value otherwise.
func (o *SecretPrivilege) GetFolderCreate() bool {
	if o == nil || IsNil(o.FolderCreate) {
		var ret bool
		return ret
	}
	return *o.FolderCreate
}

// GetFolderCreateOk returns a tuple with the FolderCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPrivilege) GetFolderCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.FolderCreate) {
		return nil, false
	}
	return o.FolderCreate, true
}

// HasFolderCreate returns a boolean if a field has been set.
func (o *SecretPrivilege) HasFolderCreate() bool {
	if o != nil && !IsNil(o.FolderCreate) {
		return true
	}

	return false
}

// SetFolderCreate gets a reference to the given bool and assigns it to the FolderCreate field.
func (o *SecretPrivilege) SetFolderCreate(v bool) *SecretPrivilege {
	o.FolderCreate = &v
	return o
}

// GetFolderUpdate returns the FolderUpdate field value if set, zero value otherwise.
func (o *SecretPrivilege) GetFolderUpdate() bool {
	if o == nil || IsNil(o.FolderUpdate) {
		var ret bool
		return ret
	}
	return *o.FolderUpdate
}

// GetFolderUpdateOk returns a tuple with the FolderUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPrivilege) GetFolderUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.FolderUpdate) {
		return nil, false
	}
	return o.FolderUpdate, true
}

// HasFolderUpdate returns a boolean if a field has been set.
func (o *SecretPrivilege) HasFolderUpdate() bool {
	if o != nil && !IsNil(o.FolderUpdate) {
		return true
	}

	return false
}

// SetFolderUpdate gets a reference to the given bool and assigns it to the FolderUpdate field.
func (o *SecretPrivilege) SetFolderUpdate(v bool) *SecretPrivilege {
	o.FolderUpdate = &v
	return o
}

// GetFolderDelete returns the FolderDelete field value if set, zero value otherwise.
func (o *SecretPrivilege) GetFolderDelete() bool {
	if o == nil || IsNil(o.FolderDelete) {
		var ret bool
		return ret
	}
	return *o.FolderDelete
}

// GetFolderDeleteOk returns a tuple with the FolderDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPrivilege) GetFolderDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.FolderDelete) {
		return nil, false
	}
	return o.FolderDelete, true
}

// HasFolderDelete returns a boolean if a field has been set.
func (o *SecretPrivilege) HasFolderDelete() bool {
	if o != nil && !IsNil(o.FolderDelete) {
		return true
	}

	return false
}

// SetFolderDelete gets a reference to the given bool and assigns it to the FolderDelete field.
func (o *SecretPrivilege) SetFolderDelete(v bool) *SecretPrivilege {
	o.FolderDelete = &v
	return o
}

// GetSecretCreate returns the SecretCreate field value if set, zero value otherwise.
func (o *SecretPrivilege) GetSecretCreate() bool {
	if o == nil || IsNil(o.SecretCreate) {
		var ret bool
		return ret
	}
	return *o.SecretCreate
}

// GetSecretCreateOk returns a tuple with the SecretCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPrivilege) GetSecretCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.SecretCreate) {
		return nil, false
	}
	return o.SecretCreate, true
}

// HasSecretCreate returns a boolean if a field has been set.
func (o *SecretPrivilege) HasSecretCreate() bool {
	if o != nil && !IsNil(o.SecretCreate) {
		return true
	}

	return false
}

// SetSecretCreate gets a reference to the given bool and assigns it to the SecretCreate field.
func (o *SecretPrivilege) SetSecretCreate(v bool) *SecretPrivilege {
	o.SecretCreate = &v
	return o
}

// GetSecretUpdate returns the SecretUpdate field value if set, zero value otherwise.
func (o *SecretPrivilege) GetSecretUpdate() bool {
	if o == nil || IsNil(o.SecretUpdate) {
		var ret bool
		return ret
	}
	return *o.SecretUpdate
}

// GetSecretUpdateOk returns a tuple with the SecretUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPrivilege) GetSecretUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.SecretUpdate) {
		return nil, false
	}
	return o.SecretUpdate, true
}

// HasSecretUpdate returns a boolean if a field has been set.
func (o *SecretPrivilege) HasSecretUpdate() bool {
	if o != nil && !IsNil(o.SecretUpdate) {
		return true
	}

	return false
}

// SetSecretUpdate gets a reference to the given bool and assigns it to the SecretUpdate field.
func (o *SecretPrivilege) SetSecretUpdate(v bool) *SecretPrivilege {
	o.SecretUpdate = &v
	return o
}

// GetSecretReveal returns the SecretReveal field value if set, zero value otherwise.
func (o *SecretPrivilege) GetSecretReveal() bool {
	if o == nil || IsNil(o.SecretReveal) {
		var ret bool
		return ret
	}
	return *o.SecretReveal
}

// GetSecretRevealOk returns a tuple with the SecretReveal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPrivilege) GetSecretRevealOk() (*bool, bool) {
	if o == nil || IsNil(o.SecretReveal) {
		return nil, false
	}
	return o.SecretReveal, true
}

// HasSecretReveal returns a boolean if a field has been set.
func (o *SecretPrivilege) HasSecretReveal() bool {
	if o != nil && !IsNil(o.SecretReveal) {
		return true
	}

	return false
}

// SetSecretReveal gets a reference to the given bool and assigns it to the SecretReveal field.
func (o *SecretPrivilege) SetSecretReveal(v bool) *SecretPrivilege {
	o.SecretReveal = &v
	return o
}

// GetSecretDelete returns the SecretDelete field value if set, zero value otherwise.
func (o *SecretPrivilege) GetSecretDelete() bool {
	if o == nil || IsNil(o.SecretDelete) {
		var ret bool
		return ret
	}
	return *o.SecretDelete
}

// GetSecretDeleteOk returns a tuple with the SecretDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretPrivilege) GetSecretDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.SecretDelete) {
		return nil, false
	}
	return o.SecretDelete, true
}

// HasSecretDelete returns a boolean if a field has been set.
func (o *SecretPrivilege) HasSecretDelete() bool {
	if o != nil && !IsNil(o.SecretDelete) {
		return true
	}

	return false
}

// SetSecretDelete gets a reference to the given bool and assigns it to the SecretDelete field.
func (o *SecretPrivilege) SetSecretDelete(v bool) *SecretPrivilege {
	o.SecretDelete = &v
	return o
}

func (o SecretPrivilege) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretPrivilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	if !IsNil(o.FolderCreate) {
		toSerialize["folder_create"] = o.FolderCreate
	}
	if !IsNil(o.FolderUpdate) {
		toSerialize["folder_update"] = o.FolderUpdate
	}
	if !IsNil(o.FolderDelete) {
		toSerialize["folder_delete"] = o.FolderDelete
	}
	if !IsNil(o.SecretCreate) {
		toSerialize["secret_create"] = o.SecretCreate
	}
	if !IsNil(o.SecretUpdate) {
		toSerialize["secret_update"] = o.SecretUpdate
	}
	if !IsNil(o.SecretReveal) {
		toSerialize["secret_reveal"] = o.SecretReveal
	}
	if !IsNil(o.SecretDelete) {
		toSerialize["secret_delete"] = o.SecretDelete
	}
	return toSerialize, nil
}

type NullableSecretPrivilege struct {
	value *SecretPrivilege
	isSet bool
}

func (v NullableSecretPrivilege) Get() *SecretPrivilege {
	return v.value
}

func (v *NullableSecretPrivilege) Set(val *SecretPrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretPrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretPrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretPrivilege(val *SecretPrivilege) *NullableSecretPrivilege {
	return &NullableSecretPrivilege{value: val, isSet: true}
}

func (v NullableSecretPrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretPrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
