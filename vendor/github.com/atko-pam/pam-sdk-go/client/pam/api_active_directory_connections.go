/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ActiveDirectoryConnectionsAPIService ActiveDirectoryConnectionsAPI service
type ActiveDirectoryConnectionsAPIService service

type ApiGetActiveDirectoryConnectionRequest struct {
	ctx            context.Context
	ApiService     *ActiveDirectoryConnectionsAPIService
	teamName       string
	adConnectionId string
}

func (r ApiGetActiveDirectoryConnectionRequest) Execute() (*ActiveDirectoryConnection, *http.Response, error) {
	return r.ApiService.GetActiveDirectoryConnectionExecute(r)
}

/*
GetActiveDirectoryConnection Retrieve an Active Directory connection

	Retrieves an Active Directory connection

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param adConnectionId The UUID of an Active Directory connection

@return ApiGetActiveDirectoryConnectionRequest
*/
func (a *ActiveDirectoryConnectionsAPIService) GetActiveDirectoryConnection(ctx context.Context, teamName string, adConnectionId string) ApiGetActiveDirectoryConnectionRequest {
	return ApiGetActiveDirectoryConnectionRequest{
		ApiService:     a,
		ctx:            ctx,
		teamName:       teamName,
		adConnectionId: adConnectionId,
	}
}

// Execute executes the request
//
//	@return ActiveDirectoryConnection
func (a *ActiveDirectoryConnectionsAPIService) GetActiveDirectoryConnectionExecute(r ApiGetActiveDirectoryConnectionRequest) (*ActiveDirectoryConnection, *http.Response, error) {
	var (
		traceKey            = "activedirectoryconnectionsapi.getActiveDirectoryConnection"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ActiveDirectoryConnection
	)

	localVarPath := "/v1/teams/{team_name}/connections/active_directory/{ad_connection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ad_connection_id"+"}", url.PathEscape(parameterValueToString(r.adConnectionId, "adConnectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		if localVarHTTPResponse.StatusCode == 401 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v UnauthorizedAccessResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return nil, localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return nil, localVarHTTPResponse, nonDefaultResponse

		}
		if localVarHTTPResponse.StatusCode == 404 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v NotFoundResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return nil, localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return nil, localVarHTTPResponse, nonDefaultResponse

		}
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListActiveDirectoryConnectionsRequest struct {
	ctx        context.Context
	ApiService *ActiveDirectoryConnectionsAPIService
	teamName   string
}

func (r ApiListActiveDirectoryConnectionsRequest) Execute() (*ListActiveDirectoryConnectionsResponse, *http.Response, error) {
	return r.ApiService.ListActiveDirectoryConnectionsExecute(r)
}

/*
ListActiveDirectoryConnections List all Active Directory connections

	Lists all Active Directory connections

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team

@return ApiListActiveDirectoryConnectionsRequest
*/
func (a *ActiveDirectoryConnectionsAPIService) ListActiveDirectoryConnections(ctx context.Context, teamName string) ApiListActiveDirectoryConnectionsRequest {
	return ApiListActiveDirectoryConnectionsRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListActiveDirectoryConnectionsResponse
func (a *ActiveDirectoryConnectionsAPIService) ListActiveDirectoryConnectionsExecute(r ApiListActiveDirectoryConnectionsRequest) (*ListActiveDirectoryConnectionsResponse, *http.Response, error) {
	var (
		traceKey            = "activedirectoryconnectionsapi.listActiveDirectoryConnections"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListActiveDirectoryConnectionsResponse
	)

	localVarPath := "/v1/teams/{team_name}/connections/active_directory"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		if localVarHTTPResponse.StatusCode == 401 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v UnauthorizedAccessResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return nil, localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return nil, localVarHTTPResponse, nonDefaultResponse

		}
		if localVarHTTPResponse.StatusCode == 404 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v NotFoundResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return nil, localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return nil, localVarHTTPResponse, nonDefaultResponse

		}
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiStartActiveDirectoryAccountForceSyncRequest struct {
	ctx            context.Context
	ApiService     *ActiveDirectoryConnectionsAPIService
	teamName       string
	adConnectionId string
}

func (r ApiStartActiveDirectoryAccountForceSyncRequest) Execute() (*http.Response, error) {
	return r.ApiService.StartActiveDirectoryAccountForceSyncExecute(r)
}

/*
	StartActiveDirectoryAccountForceSync Start Active Directory account force sync

	    Starts Active Directory account force sync:

* Updates the state of an Active Directory account managed by Okta Privileged Access with the state in Universal Directory AD apps
* Performs account matching through configured account rules
* Returns a conflict error if a sync is already running

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your team
	    @param adConnectionId The UUID of an Active Directory connection
	@return ApiStartActiveDirectoryAccountForceSyncRequest
*/
func (a *ActiveDirectoryConnectionsAPIService) StartActiveDirectoryAccountForceSync(ctx context.Context, teamName string, adConnectionId string) ApiStartActiveDirectoryAccountForceSyncRequest {
	return ApiStartActiveDirectoryAccountForceSyncRequest{
		ApiService:     a,
		ctx:            ctx,
		teamName:       teamName,
		adConnectionId: adConnectionId,
	}
}

// Execute executes the request
func (a *ActiveDirectoryConnectionsAPIService) StartActiveDirectoryAccountForceSyncExecute(r ApiStartActiveDirectoryAccountForceSyncRequest) (*http.Response, error) {
	var (
		traceKey           = "activedirectoryconnectionsapi.startActiveDirectoryAccountForceSync"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_assignment/active_directory/{ad_connection_id}/force_sync"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ad_connection_id"+"}", url.PathEscape(parameterValueToString(r.adConnectionId, "adConnectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		if localVarHTTPResponse.StatusCode == 401 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v UnauthorizedAccessResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return localVarHTTPResponse, nonDefaultResponse

		}
		if localVarHTTPResponse.StatusCode == 404 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v NotFoundResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return localVarHTTPResponse, nonDefaultResponse

		}
		if localVarHTTPResponse.StatusCode == 409 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v ConflictResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return localVarHTTPResponse, nonDefaultResponse

		}
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiUpdateActiveDirectoryConnectionStatusRequest struct {
	ctx                                          context.Context
	ApiService                                   *ActiveDirectoryConnectionsAPIService
	teamName                                     string
	adConnectionId                               string
	updateActiveDirectoryConnectionStatusRequest *UpdateActiveDirectoryConnectionStatusRequest
}

func (r ApiUpdateActiveDirectoryConnectionStatusRequest) UpdateActiveDirectoryConnectionStatusRequest(updateActiveDirectoryConnectionStatusRequest UpdateActiveDirectoryConnectionStatusRequest) ApiUpdateActiveDirectoryConnectionStatusRequest {
	r.updateActiveDirectoryConnectionStatusRequest = &updateActiveDirectoryConnectionStatusRequest
	return r
}

func (r ApiUpdateActiveDirectoryConnectionStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateActiveDirectoryConnectionStatusExecute(r)
}

/*
UpdateActiveDirectoryConnectionStatus Update the status of an Active Directory connection

	Updates the status of an Active Directory connection. You can't create account assignment rules for this connection if the status is `disconnected`.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param adConnectionId The UUID of an Active Directory connection

@return ApiUpdateActiveDirectoryConnectionStatusRequest
*/
func (a *ActiveDirectoryConnectionsAPIService) UpdateActiveDirectoryConnectionStatus(ctx context.Context, teamName string, adConnectionId string) ApiUpdateActiveDirectoryConnectionStatusRequest {
	return ApiUpdateActiveDirectoryConnectionStatusRequest{
		ApiService:     a,
		ctx:            ctx,
		teamName:       teamName,
		adConnectionId: adConnectionId,
	}
}

// Execute executes the request
func (a *ActiveDirectoryConnectionsAPIService) UpdateActiveDirectoryConnectionStatusExecute(r ApiUpdateActiveDirectoryConnectionStatusRequest) (*http.Response, error) {
	var (
		traceKey           = "activedirectoryconnectionsapi.updateActiveDirectoryConnectionStatus"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/connections/active_directory/{ad_connection_id}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ad_connection_id"+"}", url.PathEscape(parameterValueToString(r.adConnectionId, "adConnectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateActiveDirectoryConnectionStatusRequest == nil {
		return nil, reportError("updateActiveDirectoryConnectionStatusRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateActiveDirectoryConnectionStatusRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		if localVarHTTPResponse.StatusCode == 401 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v UnauthorizedAccessResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return localVarHTTPResponse, nonDefaultResponse

		}
		if localVarHTTPResponse.StatusCode == 404 {

			var nonDefaultResponse ErrNonDefaultResponse
			var v NotFoundResponse
			if err := json.Unmarshal(bodyBytes, &v); err != nil {
				return localVarHTTPResponse, err
			}
			nonDefaultResponse.Result = v
			nonDefaultResponse.StatusCode = localVarHTTPResponse.StatusCode
			return localVarHTTPResponse, nonDefaultResponse

		}
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}
