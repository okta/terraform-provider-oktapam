/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// SecurityPolicyRuleServerBasedResourceSubSelectorType The type of selector used to target server based resources
type SecurityPolicyRuleServerBasedResourceSubSelectorType string

// List of SecurityPolicyRuleServerBasedResourceSubSelectorType
const (
	SecurityPolicyRuleServerBasedResourceSubSelectorType_INDIVIDUAL_SERVER         SecurityPolicyRuleServerBasedResourceSubSelectorType = "individual_server"
	SecurityPolicyRuleServerBasedResourceSubSelectorType_INDIVIDUAL_SERVER_ACCOUNT SecurityPolicyRuleServerBasedResourceSubSelectorType = "individual_server_account"
	SecurityPolicyRuleServerBasedResourceSubSelectorType_SERVER_LABEL              SecurityPolicyRuleServerBasedResourceSubSelectorType = "server_label"
)

// All allowed values of SecurityPolicyRuleServerBasedResourceSubSelectorType enum
var AllowedSecurityPolicyRuleServerBasedResourceSubSelectorTypeEnumValues = []SecurityPolicyRuleServerBasedResourceSubSelectorType{
	"individual_server",
	"individual_server_account",
	"server_label",
}

func (v *SecurityPolicyRuleServerBasedResourceSubSelectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityPolicyRuleServerBasedResourceSubSelectorType(value)

	*v = enumTypeValue

	return nil
}

// NewSecurityPolicyRuleServerBasedResourceSubSelectorTypeFromValue returns a pointer to a valid SecurityPolicyRuleServerBasedResourceSubSelectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityPolicyRuleServerBasedResourceSubSelectorTypeFromValue(v string) (*SecurityPolicyRuleServerBasedResourceSubSelectorType, error) {
	ev := SecurityPolicyRuleServerBasedResourceSubSelectorType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityPolicyRuleServerBasedResourceSubSelectorType) IsValid() bool {
	for _, existing := range AllowedSecurityPolicyRuleServerBasedResourceSubSelectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityPolicyRuleServerBasedResourceSubSelectorType value
func (v SecurityPolicyRuleServerBasedResourceSubSelectorType) Ptr() *SecurityPolicyRuleServerBasedResourceSubSelectorType {
	return &v
}

type NullableSecurityPolicyRuleServerBasedResourceSubSelectorType struct {
	value *SecurityPolicyRuleServerBasedResourceSubSelectorType
	isSet bool
}

func (v NullableSecurityPolicyRuleServerBasedResourceSubSelectorType) Get() *SecurityPolicyRuleServerBasedResourceSubSelectorType {
	return v.value
}

func (v *NullableSecurityPolicyRuleServerBasedResourceSubSelectorType) Set(val *SecurityPolicyRuleServerBasedResourceSubSelectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleServerBasedResourceSubSelectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleServerBasedResourceSubSelectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleServerBasedResourceSubSelectorType(val *SecurityPolicyRuleServerBasedResourceSubSelectorType) *NullableSecurityPolicyRuleServerBasedResourceSubSelectorType {
	return &NullableSecurityPolicyRuleServerBasedResourceSubSelectorType{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleServerBasedResourceSubSelectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleServerBasedResourceSubSelectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
