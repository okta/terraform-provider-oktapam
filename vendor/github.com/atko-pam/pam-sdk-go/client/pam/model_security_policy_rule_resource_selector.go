/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// SecurityPolicyRuleResourceSelector - The specific parameters used to target resources. The organization of this object depends on the `selector_type`.
type SecurityPolicyRuleResourceSelector struct {
	SelectorIndividualServer        *SelectorIndividualServer
	SelectorIndividualServerAccount *SelectorIndividualServerAccount
	SelectorServerLabel             *SelectorServerLabel
}

// SelectorIndividualServerAsSecurityPolicyRuleResourceSelector is a convenience function that returns SelectorIndividualServer wrapped in SecurityPolicyRuleResourceSelector
func SelectorIndividualServerAsSecurityPolicyRuleResourceSelector(v *SelectorIndividualServer) SecurityPolicyRuleResourceSelector {
	return SecurityPolicyRuleResourceSelector{
		SelectorIndividualServer: v,
	}
}

// SelectorIndividualServerAccountAsSecurityPolicyRuleResourceSelector is a convenience function that returns SelectorIndividualServerAccount wrapped in SecurityPolicyRuleResourceSelector
func SelectorIndividualServerAccountAsSecurityPolicyRuleResourceSelector(v *SelectorIndividualServerAccount) SecurityPolicyRuleResourceSelector {
	return SecurityPolicyRuleResourceSelector{
		SelectorIndividualServerAccount: v,
	}
}

// SelectorServerLabelAsSecurityPolicyRuleResourceSelector is a convenience function that returns SelectorServerLabel wrapped in SecurityPolicyRuleResourceSelector
func SelectorServerLabelAsSecurityPolicyRuleResourceSelector(v *SelectorServerLabel) SecurityPolicyRuleResourceSelector {
	return SecurityPolicyRuleResourceSelector{
		SelectorServerLabel: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecurityPolicyRuleResourceSelector) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SelectorIndividualServer
	err = json.Unmarshal(data, &dst.SelectorIndividualServer)
	if err == nil {
		jsonSelectorIndividualServer, _ := json.Marshal(dst.SelectorIndividualServer)
		if string(jsonSelectorIndividualServer) == "{}" { // empty struct
			dst.SelectorIndividualServer = nil
		} else {
			match++
		}
	} else {
		dst.SelectorIndividualServer = nil
	}

	// try to unmarshal data into SelectorIndividualServerAccount
	err = json.Unmarshal(data, &dst.SelectorIndividualServerAccount)
	if err == nil {
		jsonSelectorIndividualServerAccount, _ := json.Marshal(dst.SelectorIndividualServerAccount)
		if string(jsonSelectorIndividualServerAccount) == "{}" { // empty struct
			dst.SelectorIndividualServerAccount = nil
		} else {
			match++
		}
	} else {
		dst.SelectorIndividualServerAccount = nil
	}

	// try to unmarshal data into SelectorServerLabel
	err = json.Unmarshal(data, &dst.SelectorServerLabel)
	if err == nil {
		jsonSelectorServerLabel, _ := json.Marshal(dst.SelectorServerLabel)
		if string(jsonSelectorServerLabel) == "{}" { // empty struct
			dst.SelectorServerLabel = nil
		} else {
			match++
		}
	} else {
		dst.SelectorServerLabel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SelectorIndividualServer = nil
		dst.SelectorIndividualServerAccount = nil
		dst.SelectorServerLabel = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SecurityPolicyRuleResourceSelector)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SecurityPolicyRuleResourceSelector)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecurityPolicyRuleResourceSelector) MarshalJSON() ([]byte, error) {
	if src.SelectorIndividualServer != nil {
		return json.Marshal(&src.SelectorIndividualServer)
	}

	if src.SelectorIndividualServerAccount != nil {
		return json.Marshal(&src.SelectorIndividualServerAccount)
	}

	if src.SelectorServerLabel != nil {
		return json.Marshal(&src.SelectorServerLabel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecurityPolicyRuleResourceSelector) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SelectorIndividualServer != nil {
		return obj.SelectorIndividualServer
	}

	if obj.SelectorIndividualServerAccount != nil {
		return obj.SelectorIndividualServerAccount
	}

	if obj.SelectorServerLabel != nil {
		return obj.SelectorServerLabel
	}

	// all schemas are nil
	return nil
}

type NullableSecurityPolicyRuleResourceSelector struct {
	value *SecurityPolicyRuleResourceSelector
	isSet bool
}

func (v NullableSecurityPolicyRuleResourceSelector) Get() *SecurityPolicyRuleResourceSelector {
	return v.value
}

func (v *NullableSecurityPolicyRuleResourceSelector) Set(val *SecurityPolicyRuleResourceSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleResourceSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleResourceSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleResourceSelector(val *SecurityPolicyRuleResourceSelector) *NullableSecurityPolicyRuleResourceSelector {
	return &NullableSecurityPolicyRuleResourceSelector{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleResourceSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleResourceSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
