/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the CheckinResourceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckinResourceRequest{}

// CheckinResourceRequest struct for CheckinResourceRequest
type CheckinResourceRequest struct {
	// The UUID or ORN of the resource
	ResourceId   string               `json:"resource_id"`
	ResourceType CheckoutResourceType `json:"resource_type"`
}

// NewCheckinResourceRequest instantiates a new CheckinResourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckinResourceRequest(resourceId string, resourceType CheckoutResourceType) *CheckinResourceRequest {
	this := CheckinResourceRequest{}
	this.ResourceId = resourceId
	this.ResourceType = resourceType
	return &this
}

// NewCheckinResourceRequestWithDefaults instantiates a new CheckinResourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckinResourceRequestWithDefaults() *CheckinResourceRequest {
	this := CheckinResourceRequest{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *CheckinResourceRequest) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *CheckinResourceRequest) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *CheckinResourceRequest) SetResourceId(v string) *CheckinResourceRequest {
	o.ResourceId = v
	return o
}

// GetResourceType returns the ResourceType field value
func (o *CheckinResourceRequest) GetResourceType() CheckoutResourceType {
	if o == nil {
		var ret CheckoutResourceType
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *CheckinResourceRequest) GetResourceTypeOk() (*CheckoutResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *CheckinResourceRequest) SetResourceType(v CheckoutResourceType) *CheckinResourceRequest {
	o.ResourceType = v
	return o
}

func (o CheckinResourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckinResourceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["resource_type"] = o.ResourceType
	return toSerialize, nil
}

type NullableCheckinResourceRequest struct {
	value *CheckinResourceRequest
	isSet bool
}

func (v NullableCheckinResourceRequest) Get() *CheckinResourceRequest {
	return v.value
}

func (v *NullableCheckinResourceRequest) Set(val *CheckinResourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckinResourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckinResourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckinResourceRequest(val *CheckinResourceRequest) *NullableCheckinResourceRequest {
	return &NullableCheckinResourceRequest{value: val, isSet: true}
}

func (v NullableCheckinResourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckinResourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
