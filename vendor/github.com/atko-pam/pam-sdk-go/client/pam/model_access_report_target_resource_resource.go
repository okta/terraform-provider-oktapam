/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the AccessReportTargetResourceResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessReportTargetResourceResource{}

// AccessReportTargetResourceResource struct for AccessReportTargetResourceResource
type AccessReportTargetResourceResource struct {
	// The UUID of an existing OPA User or Resource
	Id           *string                         `json:"id,omitempty"`
	ResourceType *AccessReportTargetResourceType `json:"resource_type,omitempty"`
}

// NewAccessReportTargetResourceResource instantiates a new AccessReportTargetResourceResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessReportTargetResourceResource() *AccessReportTargetResourceResource {
	this := AccessReportTargetResourceResource{}
	return &this
}

// NewAccessReportTargetResourceResourceWithDefaults instantiates a new AccessReportTargetResourceResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessReportTargetResourceResourceWithDefaults() *AccessReportTargetResourceResource {
	this := AccessReportTargetResourceResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessReportTargetResourceResource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReportTargetResourceResource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessReportTargetResourceResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccessReportTargetResourceResource) SetId(v string) *AccessReportTargetResourceResource {
	o.Id = &v
	return o
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *AccessReportTargetResourceResource) GetResourceType() AccessReportTargetResourceType {
	if o == nil || IsNil(o.ResourceType) {
		var ret AccessReportTargetResourceType
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReportTargetResourceResource) GetResourceTypeOk() (*AccessReportTargetResourceType, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *AccessReportTargetResourceResource) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given AccessReportTargetResourceType and assigns it to the ResourceType field.
func (o *AccessReportTargetResourceResource) SetResourceType(v AccessReportTargetResourceType) *AccessReportTargetResourceResource {
	o.ResourceType = &v
	return o
}

func (o AccessReportTargetResourceResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessReportTargetResourceResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	return toSerialize, nil
}

type NullableAccessReportTargetResourceResource struct {
	value *AccessReportTargetResourceResource
	isSet bool
}

func (v NullableAccessReportTargetResourceResource) Get() *AccessReportTargetResourceResource {
	return v.value
}

func (v *NullableAccessReportTargetResourceResource) Set(val *AccessReportTargetResourceResource) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessReportTargetResourceResource) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessReportTargetResourceResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessReportTargetResourceResource(val *AccessReportTargetResourceResource) *NullableAccessReportTargetResourceResource {
	return &NullableAccessReportTargetResourceResource{value: val, isSet: true}
}

func (v NullableAccessReportTargetResourceResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessReportTargetResourceResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
