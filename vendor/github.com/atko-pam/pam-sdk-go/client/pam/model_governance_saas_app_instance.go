/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the GovernanceSaasAppInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GovernanceSaasAppInstance{}

// GovernanceSaasAppInstance struct for GovernanceSaasAppInstance
type GovernanceSaasAppInstance struct {
	// The Okta app instance ID of the SaaS application
	Id *string `json:"id,omitempty"`
	// The name of the SaaS application instance
	Name *string `json:"name,omitempty"`
	// The type of container that encompasses specific resource types (used for governance)
	ContainerType string `json:"containerType"`
}

// NewGovernanceSaasAppInstance instantiates a new GovernanceSaasAppInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGovernanceSaasAppInstance(containerType string) *GovernanceSaasAppInstance {
	this := GovernanceSaasAppInstance{}
	this.ContainerType = containerType
	return &this
}

// NewGovernanceSaasAppInstanceWithDefaults instantiates a new GovernanceSaasAppInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGovernanceSaasAppInstanceWithDefaults() *GovernanceSaasAppInstance {
	this := GovernanceSaasAppInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GovernanceSaasAppInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GovernanceSaasAppInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GovernanceSaasAppInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GovernanceSaasAppInstance) SetId(v string) *GovernanceSaasAppInstance {
	o.Id = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GovernanceSaasAppInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GovernanceSaasAppInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GovernanceSaasAppInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GovernanceSaasAppInstance) SetName(v string) *GovernanceSaasAppInstance {
	o.Name = &v
	return o
}

// GetContainerType returns the ContainerType field value
func (o *GovernanceSaasAppInstance) GetContainerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerType
}

// GetContainerTypeOk returns a tuple with the ContainerType field value
// and a boolean to check if the value has been set.
func (o *GovernanceSaasAppInstance) GetContainerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerType, true
}

// SetContainerType sets field value
func (o *GovernanceSaasAppInstance) SetContainerType(v string) *GovernanceSaasAppInstance {
	o.ContainerType = v
	return o
}

func (o GovernanceSaasAppInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GovernanceSaasAppInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["containerType"] = o.ContainerType
	return toSerialize, nil
}

type NullableGovernanceSaasAppInstance struct {
	value *GovernanceSaasAppInstance
	isSet bool
}

func (v NullableGovernanceSaasAppInstance) Get() *GovernanceSaasAppInstance {
	return v.value
}

func (v *NullableGovernanceSaasAppInstance) Set(val *GovernanceSaasAppInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableGovernanceSaasAppInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableGovernanceSaasAppInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGovernanceSaasAppInstance(val *GovernanceSaasAppInstance) *NullableGovernanceSaasAppInstance {
	return &NullableGovernanceSaasAppInstance{value: val, isSet: true}
}

func (v NullableGovernanceSaasAppInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGovernanceSaasAppInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
