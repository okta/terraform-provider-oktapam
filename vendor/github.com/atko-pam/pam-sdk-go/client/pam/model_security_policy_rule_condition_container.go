/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyRuleConditionContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyRuleConditionContainer{}

// SecurityPolicyRuleConditionContainer struct for SecurityPolicyRuleConditionContainer
type SecurityPolicyRuleConditionContainer struct {
	ConditionType  *SecurityPolicyRuleConditionType `json:"condition_type,omitempty"`
	ConditionValue *SecurityPolicyRuleCondition     `json:"condition_value,omitempty"`
}

// NewSecurityPolicyRuleConditionContainer instantiates a new SecurityPolicyRuleConditionContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyRuleConditionContainer() *SecurityPolicyRuleConditionContainer {
	this := SecurityPolicyRuleConditionContainer{}
	return &this
}

// NewSecurityPolicyRuleConditionContainerWithDefaults instantiates a new SecurityPolicyRuleConditionContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyRuleConditionContainerWithDefaults() *SecurityPolicyRuleConditionContainer {
	this := SecurityPolicyRuleConditionContainer{}
	return &this
}

// GetConditionType returns the ConditionType field value if set, zero value otherwise.
func (o *SecurityPolicyRuleConditionContainer) GetConditionType() SecurityPolicyRuleConditionType {
	if o == nil || IsNil(o.ConditionType) {
		var ret SecurityPolicyRuleConditionType
		return ret
	}
	return *o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleConditionContainer) GetConditionTypeOk() (*SecurityPolicyRuleConditionType, bool) {
	if o == nil || IsNil(o.ConditionType) {
		return nil, false
	}
	return o.ConditionType, true
}

// HasConditionType returns a boolean if a field has been set.
func (o *SecurityPolicyRuleConditionContainer) HasConditionType() bool {
	if o != nil && !IsNil(o.ConditionType) {
		return true
	}

	return false
}

// SetConditionType gets a reference to the given SecurityPolicyRuleConditionType and assigns it to the ConditionType field.
func (o *SecurityPolicyRuleConditionContainer) SetConditionType(v SecurityPolicyRuleConditionType) *SecurityPolicyRuleConditionContainer {
	o.ConditionType = &v
	return o
}

// GetConditionValue returns the ConditionValue field value if set, zero value otherwise.
func (o *SecurityPolicyRuleConditionContainer) GetConditionValue() SecurityPolicyRuleCondition {
	if o == nil || IsNil(o.ConditionValue) {
		var ret SecurityPolicyRuleCondition
		return ret
	}
	return *o.ConditionValue
}

// GetConditionValueOk returns a tuple with the ConditionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyRuleConditionContainer) GetConditionValueOk() (*SecurityPolicyRuleCondition, bool) {
	if o == nil || IsNil(o.ConditionValue) {
		return nil, false
	}
	return o.ConditionValue, true
}

// HasConditionValue returns a boolean if a field has been set.
func (o *SecurityPolicyRuleConditionContainer) HasConditionValue() bool {
	if o != nil && !IsNil(o.ConditionValue) {
		return true
	}

	return false
}

// SetConditionValue gets a reference to the given SecurityPolicyRuleCondition and assigns it to the ConditionValue field.
func (o *SecurityPolicyRuleConditionContainer) SetConditionValue(v SecurityPolicyRuleCondition) *SecurityPolicyRuleConditionContainer {
	o.ConditionValue = &v
	return o
}

func (o SecurityPolicyRuleConditionContainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyRuleConditionContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConditionType) {
		toSerialize["condition_type"] = o.ConditionType
	}
	if !IsNil(o.ConditionValue) {
		toSerialize["condition_value"] = o.ConditionValue
	}
	return toSerialize, nil
}

type NullableSecurityPolicyRuleConditionContainer struct {
	value *SecurityPolicyRuleConditionContainer
	isSet bool
}

func (v NullableSecurityPolicyRuleConditionContainer) Get() *SecurityPolicyRuleConditionContainer {
	return v.value
}

func (v *NullableSecurityPolicyRuleConditionContainer) Set(val *SecurityPolicyRuleConditionContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleConditionContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleConditionContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleConditionContainer(val *SecurityPolicyRuleConditionContainer) *NullableSecurityPolicyRuleConditionContainer {
	return &NullableSecurityPolicyRuleConditionContainer{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleConditionContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleConditionContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
