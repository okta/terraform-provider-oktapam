/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// ActiveDirectoryAccountType Describes the type of an Active Directory account
type ActiveDirectoryAccountType string

// List of ActiveDirectoryAccountType
const (
	ActiveDirectoryAccountType_SHARED     ActiveDirectoryAccountType = "SHARED"
	ActiveDirectoryAccountType_INDIVIDUAL ActiveDirectoryAccountType = "INDIVIDUAL"
)

// All allowed values of ActiveDirectoryAccountType enum
var AllowedActiveDirectoryAccountTypeEnumValues = []ActiveDirectoryAccountType{
	"SHARED",
	"INDIVIDUAL",
}

func (v *ActiveDirectoryAccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActiveDirectoryAccountType(value)

	*v = enumTypeValue

	return nil
}

// NewActiveDirectoryAccountTypeFromValue returns a pointer to a valid ActiveDirectoryAccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActiveDirectoryAccountTypeFromValue(v string) (*ActiveDirectoryAccountType, error) {
	ev := ActiveDirectoryAccountType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActiveDirectoryAccountType) IsValid() bool {
	for _, existing := range AllowedActiveDirectoryAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActiveDirectoryAccountType value
func (v ActiveDirectoryAccountType) Ptr() *ActiveDirectoryAccountType {
	return &v
}

type NullableActiveDirectoryAccountType struct {
	value *ActiveDirectoryAccountType
	isSet bool
}

func (v NullableActiveDirectoryAccountType) Get() *ActiveDirectoryAccountType {
	return v.value
}

func (v *NullableActiveDirectoryAccountType) Set(val *ActiveDirectoryAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountType(val *ActiveDirectoryAccountType) *NullableActiveDirectoryAccountType {
	return &NullableActiveDirectoryAccountType{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
