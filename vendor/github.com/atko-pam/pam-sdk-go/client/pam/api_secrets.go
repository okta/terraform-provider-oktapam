/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// SecretsAPIService SecretsAPI service
type SecretsAPIService service

type ApiCreateSecretRequest struct {
	ctx                         context.Context
	ApiService                  *SecretsAPIService
	resourceGroupId             string
	projectId                   string
	teamName                    string
	secretCreateOrUpdateRequest *SecretCreateOrUpdateRequest
}

func (r ApiCreateSecretRequest) SecretCreateOrUpdateRequest(secretCreateOrUpdateRequest SecretCreateOrUpdateRequest) ApiCreateSecretRequest {
	r.secretCreateOrUpdateRequest = &secretCreateOrUpdateRequest
	return r
}

func (r ApiCreateSecretRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.CreateSecretExecute(r)
}

/*
	CreateSecret Create a Secret

	    Creates a Secret.

A user may only perform this action if authorized via a security policy.
This endpoint requires one of the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	@return ApiCreateSecretRequest
*/
func (a *SecretsAPIService) CreateSecret(ctx context.Context, resourceGroupId string, projectId string, teamName string) ApiCreateSecretRequest {
	return ApiCreateSecretRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *SecretsAPIService) CreateSecretExecute(r ApiCreateSecretRequest) (*Secret, *http.Response, error) {
	var (
		traceKey            = "secretsapi.createSecret"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secrets"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretCreateOrUpdateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiCreateSecretFolderRequest struct {
	ctx                       context.Context
	ApiService                *SecretsAPIService
	resourceGroupId           string
	projectId                 string
	teamName                  string
	secretFolderCreateRequest *SecretFolderCreateRequest
}

func (r ApiCreateSecretFolderRequest) SecretFolderCreateRequest(secretFolderCreateRequest SecretFolderCreateRequest) ApiCreateSecretFolderRequest {
	r.secretFolderCreateRequest = &secretFolderCreateRequest
	return r
}

func (r ApiCreateSecretFolderRequest) Execute() (*SecretFolderResponse, *http.Response, error) {
	return r.ApiService.CreateSecretFolderExecute(r)
}

/*
	CreateSecretFolder Create a Secret Folder

	    Creates a Secret Folder. Users must be authorized to perform this action by an existing Security Policy.

This endpoint requires the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	@return ApiCreateSecretFolderRequest
*/
func (a *SecretsAPIService) CreateSecretFolder(ctx context.Context, resourceGroupId string, projectId string, teamName string) ApiCreateSecretFolderRequest {
	return ApiCreateSecretFolderRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
	}
}

// Execute executes the request
//
//	@return SecretFolderResponse
func (a *SecretsAPIService) CreateSecretFolderExecute(r ApiCreateSecretFolderRequest) (*SecretFolderResponse, *http.Response, error) {
	var (
		traceKey            = "secretsapi.createSecretFolder"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretFolderResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secret_folders"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretFolderCreateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiDeleteSecretRequest struct {
	ctx             context.Context
	ApiService      *SecretsAPIService
	resourceGroupId string
	projectId       string
	teamName        string
	secretId        string
}

func (r ApiDeleteSecretRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSecretExecute(r)
}

/*
	DeleteSecret Delete a Secret

	    Deletes the specified Secret.

A user may only perform this action if authorized via a security policy.
This endpoint requires one of the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	    @param secretId The UUID of a Secret
	@return ApiDeleteSecretRequest
*/
func (a *SecretsAPIService) DeleteSecret(ctx context.Context, resourceGroupId string, projectId string, teamName string, secretId string) ApiDeleteSecretRequest {
	return ApiDeleteSecretRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
		secretId:        secretId,
	}
}

// Execute executes the request
func (a *SecretsAPIService) DeleteSecretExecute(r ApiDeleteSecretRequest) (*http.Response, error) {
	var (
		traceKey           = "secretsapi.deleteSecret"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secrets/{secret_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secret_id"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	return localVarHTTPResponse, err
}

type ApiDeleteSecretFolderRequest struct {
	ctx             context.Context
	ApiService      *SecretsAPIService
	resourceGroupId string
	projectId       string
	teamName        string
	secretFolderId  string
}

func (r ApiDeleteSecretFolderRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSecretFolderExecute(r)
}

/*
	DeleteSecretFolder Delete a Secret Folder

	    Deletes the specified Secret Folder. Users must be authorized to perform this action by an existing Security Policy.

This endpoint requires the following roles: `authenticated_client`, `authenticated_service_user`, `end_user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	    @param secretFolderId The UUID of a Secret Folder
	@return ApiDeleteSecretFolderRequest
*/
func (a *SecretsAPIService) DeleteSecretFolder(ctx context.Context, resourceGroupId string, projectId string, teamName string, secretFolderId string) ApiDeleteSecretFolderRequest {
	return ApiDeleteSecretFolderRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
		secretFolderId:  secretFolderId,
	}
}

// Execute executes the request
func (a *SecretsAPIService) DeleteSecretFolderExecute(r ApiDeleteSecretFolderRequest) (*http.Response, error) {
	var (
		traceKey           = "secretsapi.deleteSecretFolder"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secret_folders/{secret_folder_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secret_folder_id"+"}", url.PathEscape(parameterValueToString(r.secretFolderId, "secretFolderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	return localVarHTTPResponse, err
}

type ApiGetSecretRequest struct {
	ctx             context.Context
	ApiService      *SecretsAPIService
	resourceGroupId string
	projectId       string
	teamName        string
	secretId        string
}

func (r ApiGetSecretRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.GetSecretExecute(r)
}

/*
	GetSecret Retrieve a Secret

	    Retrieves the specified Secret.

A user may only perform this action if authorized via a security policy.
This endpoint requires one of the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	    @param secretId The UUID of a Secret
	@return ApiGetSecretRequest
*/
func (a *SecretsAPIService) GetSecret(ctx context.Context, resourceGroupId string, projectId string, teamName string, secretId string) ApiGetSecretRequest {
	return ApiGetSecretRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
		secretId:        secretId,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *SecretsAPIService) GetSecretExecute(r ApiGetSecretRequest) (*Secret, *http.Response, error) {
	var (
		traceKey            = "secretsapi.getSecret"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secrets/{secret_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secret_id"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetSecretFolderRequest struct {
	ctx             context.Context
	ApiService      *SecretsAPIService
	resourceGroupId string
	projectId       string
	teamName        string
	secretFolderId  string
}

func (r ApiGetSecretFolderRequest) Execute() (*SecretFolderResponse, *http.Response, error) {
	return r.ApiService.GetSecretFolderExecute(r)
}

/*
	GetSecretFolder Retrieve a Secret Folder

	    Retrieves the specified Secret Folder. Users must be authorized to perform this action by an existing Security Policy.

This endpoint requires the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	    @param secretFolderId The UUID of a Secret Folder
	@return ApiGetSecretFolderRequest
*/
func (a *SecretsAPIService) GetSecretFolder(ctx context.Context, resourceGroupId string, projectId string, teamName string, secretFolderId string) ApiGetSecretFolderRequest {
	return ApiGetSecretFolderRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
		secretFolderId:  secretFolderId,
	}
}

// Execute executes the request
//
//	@return SecretFolderResponse
func (a *SecretsAPIService) GetSecretFolderExecute(r ApiGetSecretFolderRequest) (*SecretFolderResponse, *http.Response, error) {
	var (
		traceKey            = "secretsapi.getSecretFolder"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretFolderResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secret_folders/{secret_folder_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secret_folder_id"+"}", url.PathEscape(parameterValueToString(r.secretFolderId, "secretFolderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListTopLevelSecretFoldersForProjectRequest struct {
	ctx             context.Context
	ApiService      *SecretsAPIService
	resourceGroupId string
	projectId       string
	teamName        string
}

func (r ApiListTopLevelSecretFoldersForProjectRequest) Execute() ([]SecretOrFolderListResponse, *http.Response, error) {
	return r.ApiService.ListTopLevelSecretFoldersForProjectExecute(r)
}

/*
	ListTopLevelSecretFoldersForProject List Top Level Secret Folders for Project

	    Lists all Top Level Secret Folders for a Project. Users must be authorized to perform this action by an existing Security Policy.

This endpoint requires the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	@return ApiListTopLevelSecretFoldersForProjectRequest
*/
func (a *SecretsAPIService) ListTopLevelSecretFoldersForProject(ctx context.Context, resourceGroupId string, projectId string, teamName string) ApiListTopLevelSecretFoldersForProjectRequest {
	return ApiListTopLevelSecretFoldersForProjectRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
	}
}

// Execute executes the request
//
//	@return []SecretOrFolderListResponse
func (a *SecretsAPIService) ListTopLevelSecretFoldersForProjectExecute(r ApiListTopLevelSecretFoldersForProjectRequest) ([]SecretOrFolderListResponse, *http.Response, error) {
	var (
		traceKey            = "secretsapi.listTopLevelSecretFoldersForProject"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SecretOrFolderListResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secret_folders"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListTopLevelSecretFoldersForTeamRequest struct {
	ctx        context.Context
	ApiService *SecretsAPIService
	teamName   string
}

func (r ApiListTopLevelSecretFoldersForTeamRequest) Execute() ([]SecretOrFolderListResponse, *http.Response, error) {
	return r.ApiService.ListTopLevelSecretFoldersForTeamExecute(r)
}

/*
	ListTopLevelSecretFoldersForTeam List Top Level Secret Folders for Team

	    Lists all Top Level Secret Folders for a Team.

This endpoint requires the following roles: `security_admin`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiListTopLevelSecretFoldersForTeamRequest
*/
func (a *SecretsAPIService) ListTopLevelSecretFoldersForTeam(ctx context.Context, teamName string) ApiListTopLevelSecretFoldersForTeamRequest {
	return ApiListTopLevelSecretFoldersForTeamRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return []SecretOrFolderListResponse
func (a *SecretsAPIService) ListTopLevelSecretFoldersForTeamExecute(r ApiListTopLevelSecretFoldersForTeamRequest) ([]SecretOrFolderListResponse, *http.Response, error) {
	var (
		traceKey            = "secretsapi.listTopLevelSecretFoldersForTeam"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SecretOrFolderListResponse
	)

	localVarPath := "/v1/teams/{team_name}/secret_folders"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListTopLevelSecretFoldersForUserRequest struct {
	ctx        context.Context
	ApiService *SecretsAPIService
	teamName   string
}

func (r ApiListTopLevelSecretFoldersForUserRequest) Execute() ([]SecretOrFolderListResponse, *http.Response, error) {
	return r.ApiService.ListTopLevelSecretFoldersForUserExecute(r)
}

/*
	ListTopLevelSecretFoldersForUser List Top Level Secret Folders for User

	    Lists all Top Level Secret Folders for a User. Users must be authorized to perform this action by an existing Security Policy.

This endpoint requires one of the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiListTopLevelSecretFoldersForUserRequest
*/
func (a *SecretsAPIService) ListTopLevelSecretFoldersForUser(ctx context.Context, teamName string) ApiListTopLevelSecretFoldersForUserRequest {
	return ApiListTopLevelSecretFoldersForUserRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return []SecretOrFolderListResponse
func (a *SecretsAPIService) ListTopLevelSecretFoldersForUserExecute(r ApiListTopLevelSecretFoldersForUserRequest) ([]SecretOrFolderListResponse, *http.Response, error) {
	var (
		traceKey            = "secretsapi.listTopLevelSecretFoldersForUser"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SecretOrFolderListResponse
	)

	localVarPath := "/v1/teams/{team_name}/secrets"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiResolveSecretOrFolderRequest struct {
	ctx                          context.Context
	ApiService                   *SecretsAPIService
	teamName                     string
	resolveSecretOrFolderRequest *ResolveSecretOrFolderRequest
}

func (r ApiResolveSecretOrFolderRequest) ResolveSecretOrFolderRequest(resolveSecretOrFolderRequest ResolveSecretOrFolderRequest) ApiResolveSecretOrFolderRequest {
	r.resolveSecretOrFolderRequest = &resolveSecretOrFolderRequest
	return r
}

func (r ApiResolveSecretOrFolderRequest) Execute() (*ResolveSecretOrFolderResponse, *http.Response, error) {
	return r.ApiService.ResolveSecretOrFolderExecute(r)
}

/*
	ResolveSecretOrFolder Resolve Secret or Folder

	    Resolves the ID or path for a Secret or Secret Folder. To resolve the ID, the request must include the named path. To resolve the path, the request must include the ID.

A user may only perform this action if authorized via a security policy.
This endpoint requires one of the following roles: `authenticated_client`, `authenticated_service_user`, `security_admin`, `delegated_security_admin`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiResolveSecretOrFolderRequest
*/
func (a *SecretsAPIService) ResolveSecretOrFolder(ctx context.Context, teamName string) ApiResolveSecretOrFolderRequest {
	return ApiResolveSecretOrFolderRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ResolveSecretOrFolderResponse
func (a *SecretsAPIService) ResolveSecretOrFolderExecute(r ApiResolveSecretOrFolderRequest) (*ResolveSecretOrFolderResponse, *http.Response, error) {
	var (
		traceKey            = "secretsapi.resolveSecretOrFolder"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResolveSecretOrFolderResponse
	)

	localVarPath := "/v1/teams/{team_name}/resolve_secret"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resolveSecretOrFolderRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiRevealSecretRequest struct {
	ctx                 context.Context
	ApiService          *SecretsAPIService
	resourceGroupId     string
	projectId           string
	teamName            string
	secretId            string
	secretRevealRequest *SecretRevealRequest
}

func (r ApiRevealSecretRequest) SecretRevealRequest(secretRevealRequest SecretRevealRequest) ApiRevealSecretRequest {
	r.secretRevealRequest = &secretRevealRequest
	return r
}

func (r ApiRevealSecretRequest) Execute() (*SecretRevealResponse, *http.Response, error) {
	return r.ApiService.RevealSecretExecute(r)
}

/*
	RevealSecret Reveal a Secret

	    Reveals the specified Secret.

A user may only perform this action if authorized via a security policy.
This endpoint requires one of the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	    @param secretId The UUID of a Secret
	@return ApiRevealSecretRequest
*/
func (a *SecretsAPIService) RevealSecret(ctx context.Context, resourceGroupId string, projectId string, teamName string, secretId string) ApiRevealSecretRequest {
	return ApiRevealSecretRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
		secretId:        secretId,
	}
}

// Execute executes the request
//
//	@return SecretRevealResponse
func (a *SecretsAPIService) RevealSecretExecute(r ApiRevealSecretRequest) (*SecretRevealResponse, *http.Response, error) {
	var (
		traceKey            = "secretsapi.revealSecret"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretRevealResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secrets/{secret_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secret_id"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRevealRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateSecretRequest struct {
	ctx                         context.Context
	ApiService                  *SecretsAPIService
	resourceGroupId             string
	projectId                   string
	teamName                    string
	secretId                    string
	secretCreateOrUpdateRequest *SecretCreateOrUpdateRequest
}

func (r ApiUpdateSecretRequest) SecretCreateOrUpdateRequest(secretCreateOrUpdateRequest SecretCreateOrUpdateRequest) ApiUpdateSecretRequest {
	r.secretCreateOrUpdateRequest = &secretCreateOrUpdateRequest
	return r
}

func (r ApiUpdateSecretRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.UpdateSecretExecute(r)
}

/*
	UpdateSecret Update a Secret

	    Updates the specified Secret.

A user may only perform this action if authorized via a security policy.
This endpoint requires one of the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	    @param secretId The UUID of a Secret
	@return ApiUpdateSecretRequest
*/
func (a *SecretsAPIService) UpdateSecret(ctx context.Context, resourceGroupId string, projectId string, teamName string, secretId string) ApiUpdateSecretRequest {
	return ApiUpdateSecretRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
		secretId:        secretId,
	}
}

// Execute executes the request
//
//	@return Secret
func (a *SecretsAPIService) UpdateSecretExecute(r ApiUpdateSecretRequest) (*Secret, *http.Response, error) {
	var (
		traceKey            = "secretsapi.updateSecret"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Secret
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secrets/{secret_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secret_id"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretCreateOrUpdateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateSecretFolderRequest struct {
	ctx                       context.Context
	ApiService                *SecretsAPIService
	resourceGroupId           string
	projectId                 string
	teamName                  string
	secretFolderId            string
	secretFolderUpdateRequest *SecretFolderUpdateRequest
}

func (r ApiUpdateSecretFolderRequest) SecretFolderUpdateRequest(secretFolderUpdateRequest SecretFolderUpdateRequest) ApiUpdateSecretFolderRequest {
	r.secretFolderUpdateRequest = &secretFolderUpdateRequest
	return r
}

func (r ApiUpdateSecretFolderRequest) Execute() (*SecretFolderResponse, *http.Response, error) {
	return r.ApiService.UpdateSecretFolderExecute(r)
}

/*
	UpdateSecretFolder Update a Secret Folder

	    Updates the specified Secret Folder. Users must be authorized to perform this action by an existing Security Policy.

This endpoint requires the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	    @param secretFolderId The UUID of a Secret Folder
	@return ApiUpdateSecretFolderRequest
*/
func (a *SecretsAPIService) UpdateSecretFolder(ctx context.Context, resourceGroupId string, projectId string, teamName string, secretFolderId string) ApiUpdateSecretFolderRequest {
	return ApiUpdateSecretFolderRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
		secretFolderId:  secretFolderId,
	}
}

// Execute executes the request
//
//	@return SecretFolderResponse
func (a *SecretsAPIService) UpdateSecretFolderExecute(r ApiUpdateSecretFolderRequest) (*SecretFolderResponse, *http.Response, error) {
	var (
		traceKey            = "secretsapi.updateSecretFolder"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecretFolderResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secret_folders/{secret_folder_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secret_folder_id"+"}", url.PathEscape(parameterValueToString(r.secretFolderId, "secretFolderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretFolderUpdateRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiV1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGetRequest struct {
	ctx             context.Context
	ApiService      *SecretsAPIService
	resourceGroupId string
	projectId       string
	teamName        string
	secretFolderId  string
}

func (r ApiV1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGetRequest) Execute() ([]SecretOrFolderListResponse, *http.Response, error) {
	return r.ApiService.V1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGetExecute(r)
}

/*
	V1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGet List all items in a Secret Folder

	    Lists all items in a Secret Folder. Users must be authorized to perform this action by an existing Security Policy.

This endpoint requires the following roles: `authenticated_client`, `authenticated_service_user`, `end_user`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param resourceGroupId The UUID of a Resource Group
	    @param projectId The UUID of a Project
	    @param teamName The name of your Team
	    @param secretFolderId The UUID of a Secret Folder
	@return ApiV1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGetRequest
*/
func (a *SecretsAPIService) V1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGet(ctx context.Context, resourceGroupId string, projectId string, teamName string, secretFolderId string) ApiV1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGetRequest {
	return ApiV1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGetRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
		projectId:       projectId,
		teamName:        teamName,
		secretFolderId:  secretFolderId,
	}
}

// Execute executes the request
//
//	@return []SecretOrFolderListResponse
func (a *SecretsAPIService) V1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGetExecute(r ApiV1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGetRequest) ([]SecretOrFolderListResponse, *http.Response, error) {
	var (
		traceKey            = "secretsapi.v1TeamsTeamNameResourceGroupsResourceGroupIdProjectsProjectIdSecretFoldersSecretFolderIdItemsGet"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SecretOrFolderListResponse
	)

	localVarPath := "/v1/teams/{team_name}/resource_groups/{resource_group_id}/projects/{project_id}/secret_folders/{secret_folder_id}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secret_folder_id"+"}", url.PathEscape(parameterValueToString(r.secretFolderId, "secretFolderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	return localVarReturnValue, localVarHTTPResponse, err
}
