/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// TeamUserAttributeName The type of attribute
type TeamUserAttributeName string

// List of TeamUserAttributeName
const (
	TeamUserAttributeName_USER_SHELL                             TeamUserAttributeName = "user_shell"
	TeamUserAttributeName_ACTIVE_DIRECTORY_PASSWORDLESS_IDENTITY TeamUserAttributeName = "active_directory_passwordless_identity"
	TeamUserAttributeName_WINDOWS_USER_NAME                      TeamUserAttributeName = "windows_user_name"
	TeamUserAttributeName_GECOS_FIELD                            TeamUserAttributeName = "gecos_field"
	TeamUserAttributeName_UNIX_GID                               TeamUserAttributeName = "unix_gid"
	TeamUserAttributeName_ACTIVE_DIRECTORY_IDENTITY              TeamUserAttributeName = "active_directory_identity"
	TeamUserAttributeName_UNIX_USER_NAME                         TeamUserAttributeName = "unix_user_name"
	TeamUserAttributeName_UNIX_UID                               TeamUserAttributeName = "unix_uid"
)

// All allowed values of TeamUserAttributeName enum
var AllowedTeamUserAttributeNameEnumValues = []TeamUserAttributeName{
	"user_shell",
	"active_directory_passwordless_identity",
	"windows_user_name",
	"gecos_field",
	"unix_gid",
	"active_directory_identity",
	"unix_user_name",
	"unix_uid",
}

func (v *TeamUserAttributeName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TeamUserAttributeName(value)

	*v = enumTypeValue

	return nil
}

// NewTeamUserAttributeNameFromValue returns a pointer to a valid TeamUserAttributeName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTeamUserAttributeNameFromValue(v string) (*TeamUserAttributeName, error) {
	ev := TeamUserAttributeName(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TeamUserAttributeName) IsValid() bool {
	for _, existing := range AllowedTeamUserAttributeNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TeamUserAttributeName value
func (v TeamUserAttributeName) Ptr() *TeamUserAttributeName {
	return &v
}

type NullableTeamUserAttributeName struct {
	value *TeamUserAttributeName
	isSet bool
}

func (v NullableTeamUserAttributeName) Get() *TeamUserAttributeName {
	return v.value
}

func (v *NullableTeamUserAttributeName) Set(val *TeamUserAttributeName) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamUserAttributeName) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamUserAttributeName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamUserAttributeName(val *TeamUserAttributeName) *NullableTeamUserAttributeName {
	return &NullableTeamUserAttributeName{value: val, isSet: true}
}

func (v NullableTeamUserAttributeName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamUserAttributeName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
