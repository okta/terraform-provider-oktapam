/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts The type of privilege granted to a user for an Active Directory account
type SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts string

// List of SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts
const (
	SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts_REVEAL_PASSWORD       SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts = "reveal_password"
	SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts_PASSWORD_CHECKOUT_RDP SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts = "password_checkout_rdp"
	SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts_ROTATE_PASSWORD       SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts = "rotate_password"
)

// All allowed values of SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts enum
var AllowedSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccountsEnumValues = []SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts{
	"reveal_password",
	"password_checkout_rdp",
	"rotate_password",
}

func (v *SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts(value)

	*v = enumTypeValue

	return nil
}

// NewSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccountsFromValue returns a pointer to a valid SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccountsFromValue(v string) (*SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts, error) {
	ev := SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) IsValid() bool {
	for _, existing := range AllowedSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccountsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts value
func (v SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) Ptr() *SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts {
	return &v
}

type NullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts struct {
	value *SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts
	isSet bool
}

func (v NullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) Get() *SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts {
	return v.value
}

func (v *NullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) Set(val *SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts(val *SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) *NullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts {
	return &NullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts{value: val, isSet: true}
}

func (v NullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
