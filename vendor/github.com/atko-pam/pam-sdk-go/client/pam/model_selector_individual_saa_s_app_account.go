/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SelectorIndividualSaaSAppAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectorIndividualSaaSAppAccount{}

// SelectorIndividualSaaSAppAccount This resource selector identifies a Service Account that exists on a specific SaaS Application
type SelectorIndividualSaaSAppAccount struct {
	Type           string                                   `json:"_type"`
	ServiceAccount NamedObject                              `json:"service_account"`
	SaasApp        *SelectorIndividualSaaSAppAccountSaasApp `json:"saas_app,omitempty"`
}

// NewSelectorIndividualSaaSAppAccount instantiates a new SelectorIndividualSaaSAppAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorIndividualSaaSAppAccount(type_ string, serviceAccount NamedObject) *SelectorIndividualSaaSAppAccount {
	this := SelectorIndividualSaaSAppAccount{}
	this.Type = type_
	this.ServiceAccount = serviceAccount
	return &this
}

// NewSelectorIndividualSaaSAppAccountWithDefaults instantiates a new SelectorIndividualSaaSAppAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorIndividualSaaSAppAccountWithDefaults() *SelectorIndividualSaaSAppAccount {
	this := SelectorIndividualSaaSAppAccount{}
	return &this
}

// GetType returns the Type field value
func (o *SelectorIndividualSaaSAppAccount) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SelectorIndividualSaaSAppAccount) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SelectorIndividualSaaSAppAccount) SetType(v string) *SelectorIndividualSaaSAppAccount {
	o.Type = v
	return o
}

// GetServiceAccount returns the ServiceAccount field value
func (o *SelectorIndividualSaaSAppAccount) GetServiceAccount() NamedObject {
	if o == nil {
		var ret NamedObject
		return ret
	}

	return o.ServiceAccount
}

// GetServiceAccountOk returns a tuple with the ServiceAccount field value
// and a boolean to check if the value has been set.
func (o *SelectorIndividualSaaSAppAccount) GetServiceAccountOk() (*NamedObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceAccount, true
}

// SetServiceAccount sets field value
func (o *SelectorIndividualSaaSAppAccount) SetServiceAccount(v NamedObject) *SelectorIndividualSaaSAppAccount {
	o.ServiceAccount = v
	return o
}

// GetSaasApp returns the SaasApp field value if set, zero value otherwise.
func (o *SelectorIndividualSaaSAppAccount) GetSaasApp() SelectorIndividualSaaSAppAccountSaasApp {
	if o == nil || IsNil(o.SaasApp) {
		var ret SelectorIndividualSaaSAppAccountSaasApp
		return ret
	}
	return *o.SaasApp
}

// GetSaasAppOk returns a tuple with the SaasApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorIndividualSaaSAppAccount) GetSaasAppOk() (*SelectorIndividualSaaSAppAccountSaasApp, bool) {
	if o == nil || IsNil(o.SaasApp) {
		return nil, false
	}
	return o.SaasApp, true
}

// HasSaasApp returns a boolean if a field has been set.
func (o *SelectorIndividualSaaSAppAccount) HasSaasApp() bool {
	if o != nil && !IsNil(o.SaasApp) {
		return true
	}

	return false
}

// SetSaasApp gets a reference to the given SelectorIndividualSaaSAppAccountSaasApp and assigns it to the SaasApp field.
func (o *SelectorIndividualSaaSAppAccount) SetSaasApp(v SelectorIndividualSaaSAppAccountSaasApp) *SelectorIndividualSaaSAppAccount {
	o.SaasApp = &v
	return o
}

func (o SelectorIndividualSaaSAppAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectorIndividualSaaSAppAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_type"] = o.Type
	toSerialize["service_account"] = o.ServiceAccount
	if !IsNil(o.SaasApp) {
		toSerialize["saas_app"] = o.SaasApp
	}
	return toSerialize, nil
}

type NullableSelectorIndividualSaaSAppAccount struct {
	value *SelectorIndividualSaaSAppAccount
	isSet bool
}

func (v NullableSelectorIndividualSaaSAppAccount) Get() *SelectorIndividualSaaSAppAccount {
	return v.value
}

func (v *NullableSelectorIndividualSaaSAppAccount) Set(val *SelectorIndividualSaaSAppAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorIndividualSaaSAppAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorIndividualSaaSAppAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorIndividualSaaSAppAccount(val *SelectorIndividualSaaSAppAccount) *NullableSelectorIndividualSaaSAppAccount {
	return &NullableSelectorIndividualSaaSAppAccount{value: val, isSet: true}
}

func (v NullableSelectorIndividualSaaSAppAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorIndividualSaaSAppAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
