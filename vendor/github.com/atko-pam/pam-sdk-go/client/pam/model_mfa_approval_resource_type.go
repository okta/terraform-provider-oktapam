/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// MFAApprovalResourceType the model 'MFAApprovalResourceType'
type MFAApprovalResourceType string

// List of MFAApprovalResourceType
const (
	MFAApprovalResourceType_SERVER                        MFAApprovalResourceType = "server"
	MFAApprovalResourceType_SERVER_ACCOUNT_PASSWORD_LOGIN MFAApprovalResourceType = "server_account_password_login"
	MFAApprovalResourceType_SECRET                        MFAApprovalResourceType = "secret"
	MFAApprovalResourceType_SERVICE_ACCOUNT               MFAApprovalResourceType = "service_account"
)

// All allowed values of MFAApprovalResourceType enum
var AllowedMFAApprovalResourceTypeEnumValues = []MFAApprovalResourceType{
	"server",
	"server_account_password_login",
	"secret",
	"service_account",
}

func (v *MFAApprovalResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MFAApprovalResourceType(value)

	*v = enumTypeValue

	return nil
}

// NewMFAApprovalResourceTypeFromValue returns a pointer to a valid MFAApprovalResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMFAApprovalResourceTypeFromValue(v string) (*MFAApprovalResourceType, error) {
	ev := MFAApprovalResourceType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MFAApprovalResourceType) IsValid() bool {
	for _, existing := range AllowedMFAApprovalResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MFAApprovalResourceType value
func (v MFAApprovalResourceType) Ptr() *MFAApprovalResourceType {
	return &v
}

type NullableMFAApprovalResourceType struct {
	value *MFAApprovalResourceType
	isSet bool
}

func (v NullableMFAApprovalResourceType) Get() *MFAApprovalResourceType {
	return v.value
}

func (v *NullableMFAApprovalResourceType) Set(val *MFAApprovalResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableMFAApprovalResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableMFAApprovalResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFAApprovalResourceType(val *MFAApprovalResourceType) *NullableMFAApprovalResourceType {
	return &NullableMFAApprovalResourceType{value: val, isSet: true}
}

func (v NullableMFAApprovalResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFAApprovalResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
