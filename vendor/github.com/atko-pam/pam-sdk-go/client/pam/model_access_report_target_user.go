/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the AccessReportTargetUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessReportTargetUser{}

// AccessReportTargetUser struct for AccessReportTargetUser
type AccessReportTargetUser struct {
	User *AccessReportTargetUserUser `json:"user,omitempty"`
}

// NewAccessReportTargetUser instantiates a new AccessReportTargetUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessReportTargetUser() *AccessReportTargetUser {
	this := AccessReportTargetUser{}
	return &this
}

// NewAccessReportTargetUserWithDefaults instantiates a new AccessReportTargetUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessReportTargetUserWithDefaults() *AccessReportTargetUser {
	this := AccessReportTargetUser{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AccessReportTargetUser) GetUser() AccessReportTargetUserUser {
	if o == nil || IsNil(o.User) {
		var ret AccessReportTargetUserUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReportTargetUser) GetUserOk() (*AccessReportTargetUserUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AccessReportTargetUser) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AccessReportTargetUserUser and assigns it to the User field.
func (o *AccessReportTargetUser) SetUser(v AccessReportTargetUserUser) *AccessReportTargetUser {
	o.User = &v
	return o
}

func (o AccessReportTargetUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessReportTargetUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableAccessReportTargetUser struct {
	value *AccessReportTargetUser
	isSet bool
}

func (v NullableAccessReportTargetUser) Get() *AccessReportTargetUser {
	return v.value
}

func (v *NullableAccessReportTargetUser) Set(val *AccessReportTargetUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessReportTargetUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessReportTargetUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessReportTargetUser(val *AccessReportTargetUser) *NullableAccessReportTargetUser {
	return &NullableAccessReportTargetUser{value: val, isSet: true}
}

func (v NullableAccessReportTargetUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessReportTargetUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
