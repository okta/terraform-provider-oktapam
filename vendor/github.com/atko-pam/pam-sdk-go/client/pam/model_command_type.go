/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// CommandType the model 'CommandType'
type CommandType string

// List of command_type
const (
	CommandType_RAW        CommandType = "raw"
	CommandType_EXECUTABLE CommandType = "executable"
	CommandType_DIRECTORY  CommandType = "directory"
)

// All allowed values of CommandType enum
var AllowedCommandTypeEnumValues = []CommandType{
	"raw",
	"executable",
	"directory",
}

func (v *CommandType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommandType(value)

	*v = enumTypeValue

	return nil
}

// NewCommandTypeFromValue returns a pointer to a valid CommandType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommandTypeFromValue(v string) (*CommandType, error) {
	ev := CommandType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommandType) IsValid() bool {
	for _, existing := range AllowedCommandTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to command_type value
func (v CommandType) Ptr() *CommandType {
	return &v
}

type NullableCommandType struct {
	value *CommandType
	isSet bool
}

func (v NullableCommandType) Get() *CommandType {
	return v.value
}

func (v *NullableCommandType) Set(val *CommandType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandType(val *CommandType) *NullableCommandType {
	return &NullableCommandType{value: val, isSet: true}
}

func (v NullableCommandType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
