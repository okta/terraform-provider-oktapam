/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SelectorActiveDirectoryServerLabelServerSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectorActiveDirectoryServerLabelServerSelector{}

// SelectorActiveDirectoryServerLabelServerSelector Contains an object called `labels`. Currently, only a single Server Selector object is allowed per rule.
type SelectorActiveDirectoryServerLabelServerSelector struct {
	// Contains key/value pairs used to match labels applied to one or more enrolled servers.
	Labels map[string]interface{} `json:"labels,omitempty"`
}

// NewSelectorActiveDirectoryServerLabelServerSelector instantiates a new SelectorActiveDirectoryServerLabelServerSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorActiveDirectoryServerLabelServerSelector() *SelectorActiveDirectoryServerLabelServerSelector {
	this := SelectorActiveDirectoryServerLabelServerSelector{}
	return &this
}

// NewSelectorActiveDirectoryServerLabelServerSelectorWithDefaults instantiates a new SelectorActiveDirectoryServerLabelServerSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorActiveDirectoryServerLabelServerSelectorWithDefaults() *SelectorActiveDirectoryServerLabelServerSelector {
	this := SelectorActiveDirectoryServerLabelServerSelector{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *SelectorActiveDirectoryServerLabelServerSelector) GetLabels() map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorActiveDirectoryServerLabelServerSelector) GetLabelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *SelectorActiveDirectoryServerLabelServerSelector) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *SelectorActiveDirectoryServerLabelServerSelector) SetLabels(v map[string]interface{}) *SelectorActiveDirectoryServerLabelServerSelector {
	o.Labels = v
	return o
}

func (o SelectorActiveDirectoryServerLabelServerSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectorActiveDirectoryServerLabelServerSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableSelectorActiveDirectoryServerLabelServerSelector struct {
	value *SelectorActiveDirectoryServerLabelServerSelector
	isSet bool
}

func (v NullableSelectorActiveDirectoryServerLabelServerSelector) Get() *SelectorActiveDirectoryServerLabelServerSelector {
	return v.value
}

func (v *NullableSelectorActiveDirectoryServerLabelServerSelector) Set(val *SelectorActiveDirectoryServerLabelServerSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorActiveDirectoryServerLabelServerSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorActiveDirectoryServerLabelServerSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorActiveDirectoryServerLabelServerSelector(val *SelectorActiveDirectoryServerLabelServerSelector) *NullableSelectorActiveDirectoryServerLabelServerSelector {
	return &NullableSelectorActiveDirectoryServerLabelServerSelector{value: val, isSet: true}
}

func (v NullableSelectorActiveDirectoryServerLabelServerSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorActiveDirectoryServerLabelServerSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
