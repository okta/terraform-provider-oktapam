/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// CloudEntitlementJobStatus The status of the job
type CloudEntitlementJobStatus string

// List of CloudEntitlementJobStatus
const (
	CloudEntitlementJobStatus_CREATED     CloudEntitlementJobStatus = "CREATED"
	CloudEntitlementJobStatus_QUEUED      CloudEntitlementJobStatus = "QUEUED"
	CloudEntitlementJobStatus_IN_PROGRESS CloudEntitlementJobStatus = "IN PROGRESS"
	CloudEntitlementJobStatus_ERROR       CloudEntitlementJobStatus = "ERROR"
	CloudEntitlementJobStatus_COMPLETED   CloudEntitlementJobStatus = "COMPLETED"
)

// All allowed values of CloudEntitlementJobStatus enum
var AllowedCloudEntitlementJobStatusEnumValues = []CloudEntitlementJobStatus{
	"CREATED",
	"QUEUED",
	"IN PROGRESS",
	"ERROR",
	"COMPLETED",
}

func (v *CloudEntitlementJobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudEntitlementJobStatus(value)
	for _, existing := range AllowedCloudEntitlementJobStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudEntitlementJobStatus", value)
}

// NewCloudEntitlementJobStatusFromValue returns a pointer to a valid CloudEntitlementJobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudEntitlementJobStatusFromValue(v string) (*CloudEntitlementJobStatus, error) {
	ev := CloudEntitlementJobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudEntitlementJobStatus: valid values are %v", v, AllowedCloudEntitlementJobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudEntitlementJobStatus) IsValid() bool {
	for _, existing := range AllowedCloudEntitlementJobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudEntitlementJobStatus value
func (v CloudEntitlementJobStatus) Ptr() *CloudEntitlementJobStatus {
	return &v
}

type NullableCloudEntitlementJobStatus struct {
	value *CloudEntitlementJobStatus
	isSet bool
}

func (v NullableCloudEntitlementJobStatus) Get() *CloudEntitlementJobStatus {
	return v.value
}

func (v *NullableCloudEntitlementJobStatus) Set(val *CloudEntitlementJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudEntitlementJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudEntitlementJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudEntitlementJobStatus(val *CloudEntitlementJobStatus) *NullableCloudEntitlementJobStatus {
	return &NullableCloudEntitlementJobStatus{value: val, isSet: true}
}

func (v NullableCloudEntitlementJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudEntitlementJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
