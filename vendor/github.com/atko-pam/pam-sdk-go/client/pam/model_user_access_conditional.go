/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the UserAccessConditional type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAccessConditional{}

// UserAccessConditional struct for UserAccessConditional
type UserAccessConditional struct {
	Type *UserAccessConditionalType `json:"type,omitempty"`
	// If `true`, the condition is currently met
	ConditionIsMet *bool `json:"condition_is_met,omitempty"`
	// A human-readable description of the condition
	Description *string `json:"description,omitempty"`
	// Used by `access_request` conditionals to define the ID of a specific Request Type
	AccessRequestTypeId *string `json:"access_request_type_id,omitempty"`
	// Used by `access_request` conditionals to define the name of a specific Request Type
	AccessRequestTypeName *string `json:"access_request_type_name,omitempty"`
	// Used by `access_request` conditionals to define the number of seconds the approval remains valid
	ExpiresAfterSeconds *int64 `json:"expires_after_seconds,omitempty"`
}

// NewUserAccessConditional instantiates a new UserAccessConditional object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccessConditional() *UserAccessConditional {
	this := UserAccessConditional{}
	return &this
}

// NewUserAccessConditionalWithDefaults instantiates a new UserAccessConditional object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccessConditionalWithDefaults() *UserAccessConditional {
	this := UserAccessConditional{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserAccessConditional) GetType() UserAccessConditionalType {
	if o == nil || IsNil(o.Type) {
		var ret UserAccessConditionalType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccessConditional) GetTypeOk() (*UserAccessConditionalType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserAccessConditional) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given UserAccessConditionalType and assigns it to the Type field.
func (o *UserAccessConditional) SetType(v UserAccessConditionalType) *UserAccessConditional {
	o.Type = &v
	return o
}

// GetConditionIsMet returns the ConditionIsMet field value if set, zero value otherwise.
func (o *UserAccessConditional) GetConditionIsMet() bool {
	if o == nil || IsNil(o.ConditionIsMet) {
		var ret bool
		return ret
	}
	return *o.ConditionIsMet
}

// GetConditionIsMetOk returns a tuple with the ConditionIsMet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccessConditional) GetConditionIsMetOk() (*bool, bool) {
	if o == nil || IsNil(o.ConditionIsMet) {
		return nil, false
	}
	return o.ConditionIsMet, true
}

// HasConditionIsMet returns a boolean if a field has been set.
func (o *UserAccessConditional) HasConditionIsMet() bool {
	if o != nil && !IsNil(o.ConditionIsMet) {
		return true
	}

	return false
}

// SetConditionIsMet gets a reference to the given bool and assigns it to the ConditionIsMet field.
func (o *UserAccessConditional) SetConditionIsMet(v bool) *UserAccessConditional {
	o.ConditionIsMet = &v
	return o
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserAccessConditional) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccessConditional) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UserAccessConditional) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UserAccessConditional) SetDescription(v string) *UserAccessConditional {
	o.Description = &v
	return o
}

// GetAccessRequestTypeId returns the AccessRequestTypeId field value if set, zero value otherwise.
func (o *UserAccessConditional) GetAccessRequestTypeId() string {
	if o == nil || IsNil(o.AccessRequestTypeId) {
		var ret string
		return ret
	}
	return *o.AccessRequestTypeId
}

// GetAccessRequestTypeIdOk returns a tuple with the AccessRequestTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccessConditional) GetAccessRequestTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessRequestTypeId) {
		return nil, false
	}
	return o.AccessRequestTypeId, true
}

// HasAccessRequestTypeId returns a boolean if a field has been set.
func (o *UserAccessConditional) HasAccessRequestTypeId() bool {
	if o != nil && !IsNil(o.AccessRequestTypeId) {
		return true
	}

	return false
}

// SetAccessRequestTypeId gets a reference to the given string and assigns it to the AccessRequestTypeId field.
func (o *UserAccessConditional) SetAccessRequestTypeId(v string) *UserAccessConditional {
	o.AccessRequestTypeId = &v
	return o
}

// GetAccessRequestTypeName returns the AccessRequestTypeName field value if set, zero value otherwise.
func (o *UserAccessConditional) GetAccessRequestTypeName() string {
	if o == nil || IsNil(o.AccessRequestTypeName) {
		var ret string
		return ret
	}
	return *o.AccessRequestTypeName
}

// GetAccessRequestTypeNameOk returns a tuple with the AccessRequestTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccessConditional) GetAccessRequestTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccessRequestTypeName) {
		return nil, false
	}
	return o.AccessRequestTypeName, true
}

// HasAccessRequestTypeName returns a boolean if a field has been set.
func (o *UserAccessConditional) HasAccessRequestTypeName() bool {
	if o != nil && !IsNil(o.AccessRequestTypeName) {
		return true
	}

	return false
}

// SetAccessRequestTypeName gets a reference to the given string and assigns it to the AccessRequestTypeName field.
func (o *UserAccessConditional) SetAccessRequestTypeName(v string) *UserAccessConditional {
	o.AccessRequestTypeName = &v
	return o
}

// GetExpiresAfterSeconds returns the ExpiresAfterSeconds field value if set, zero value otherwise.
func (o *UserAccessConditional) GetExpiresAfterSeconds() int64 {
	if o == nil || IsNil(o.ExpiresAfterSeconds) {
		var ret int64
		return ret
	}
	return *o.ExpiresAfterSeconds
}

// GetExpiresAfterSecondsOk returns a tuple with the ExpiresAfterSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccessConditional) GetExpiresAfterSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiresAfterSeconds) {
		return nil, false
	}
	return o.ExpiresAfterSeconds, true
}

// HasExpiresAfterSeconds returns a boolean if a field has been set.
func (o *UserAccessConditional) HasExpiresAfterSeconds() bool {
	if o != nil && !IsNil(o.ExpiresAfterSeconds) {
		return true
	}

	return false
}

// SetExpiresAfterSeconds gets a reference to the given int64 and assigns it to the ExpiresAfterSeconds field.
func (o *UserAccessConditional) SetExpiresAfterSeconds(v int64) *UserAccessConditional {
	o.ExpiresAfterSeconds = &v
	return o
}

func (o UserAccessConditional) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAccessConditional) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ConditionIsMet) {
		toSerialize["condition_is_met"] = o.ConditionIsMet
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AccessRequestTypeId) {
		toSerialize["access_request_type_id"] = o.AccessRequestTypeId
	}
	if !IsNil(o.AccessRequestTypeName) {
		toSerialize["access_request_type_name"] = o.AccessRequestTypeName
	}
	if !IsNil(o.ExpiresAfterSeconds) {
		toSerialize["expires_after_seconds"] = o.ExpiresAfterSeconds
	}
	return toSerialize, nil
}

type NullableUserAccessConditional struct {
	value *UserAccessConditional
	isSet bool
}

func (v NullableUserAccessConditional) Get() *UserAccessConditional {
	return v.value
}

func (v *NullableUserAccessConditional) Set(val *UserAccessConditional) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccessConditional) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccessConditional) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccessConditional(val *UserAccessConditional) *NullableUserAccessConditional {
	return &NullableUserAccessConditional{value: val, isSet: true}
}

func (v NullableUserAccessConditional) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccessConditional) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
