/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryAccountRuleEnhancedFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAccountRuleEnhancedFilter{}

// ActiveDirectoryAccountRuleEnhancedFilter Enhanced filter for Active Directory account rules. Multiple filter expressions are combined with the AND logic so that all filter expression conditions must be met.
type ActiveDirectoryAccountRuleEnhancedFilter struct {
	// The organizational unit to apply the enhanced filter
	OrganizationalUnit *string `json:"organizational_unit,omitempty"`
	// List of field-based filter expressions to apply to the Active Directory accounts. All filter expressions in the list are combined with the AND logic, so returned accounts must match all filters.
	Filters []ActiveDirectoryAccountFieldNameFilter `json:"filters,omitempty"`
}

// NewActiveDirectoryAccountRuleEnhancedFilter instantiates a new ActiveDirectoryAccountRuleEnhancedFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAccountRuleEnhancedFilter() *ActiveDirectoryAccountRuleEnhancedFilter {
	this := ActiveDirectoryAccountRuleEnhancedFilter{}
	return &this
}

// NewActiveDirectoryAccountRuleEnhancedFilterWithDefaults instantiates a new ActiveDirectoryAccountRuleEnhancedFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAccountRuleEnhancedFilterWithDefaults() *ActiveDirectoryAccountRuleEnhancedFilter {
	this := ActiveDirectoryAccountRuleEnhancedFilter{}
	return &this
}

// GetOrganizationalUnit returns the OrganizationalUnit field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountRuleEnhancedFilter) GetOrganizationalUnit() string {
	if o == nil || IsNil(o.OrganizationalUnit) {
		var ret string
		return ret
	}
	return *o.OrganizationalUnit
}

// GetOrganizationalUnitOk returns a tuple with the OrganizationalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountRuleEnhancedFilter) GetOrganizationalUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationalUnit) {
		return nil, false
	}
	return o.OrganizationalUnit, true
}

// HasOrganizationalUnit returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountRuleEnhancedFilter) HasOrganizationalUnit() bool {
	if o != nil && !IsNil(o.OrganizationalUnit) {
		return true
	}

	return false
}

// SetOrganizationalUnit gets a reference to the given string and assigns it to the OrganizationalUnit field.
func (o *ActiveDirectoryAccountRuleEnhancedFilter) SetOrganizationalUnit(v string) *ActiveDirectoryAccountRuleEnhancedFilter {
	o.OrganizationalUnit = &v
	return o
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountRuleEnhancedFilter) GetFilters() []ActiveDirectoryAccountFieldNameFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []ActiveDirectoryAccountFieldNameFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountRuleEnhancedFilter) GetFiltersOk() ([]ActiveDirectoryAccountFieldNameFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountRuleEnhancedFilter) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []ActiveDirectoryAccountFieldNameFilter and assigns it to the Filters field.
func (o *ActiveDirectoryAccountRuleEnhancedFilter) SetFilters(v []ActiveDirectoryAccountFieldNameFilter) *ActiveDirectoryAccountRuleEnhancedFilter {
	o.Filters = v
	return o
}

func (o ActiveDirectoryAccountRuleEnhancedFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAccountRuleEnhancedFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrganizationalUnit) {
		toSerialize["organizational_unit"] = o.OrganizationalUnit
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableActiveDirectoryAccountRuleEnhancedFilter struct {
	value *ActiveDirectoryAccountRuleEnhancedFilter
	isSet bool
}

func (v NullableActiveDirectoryAccountRuleEnhancedFilter) Get() *ActiveDirectoryAccountRuleEnhancedFilter {
	return v.value
}

func (v *NullableActiveDirectoryAccountRuleEnhancedFilter) Set(val *ActiveDirectoryAccountRuleEnhancedFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountRuleEnhancedFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountRuleEnhancedFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountRuleEnhancedFilter(val *ActiveDirectoryAccountRuleEnhancedFilter) *NullableActiveDirectoryAccountRuleEnhancedFilter {
	return &NullableActiveDirectoryAccountRuleEnhancedFilter{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountRuleEnhancedFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountRuleEnhancedFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
