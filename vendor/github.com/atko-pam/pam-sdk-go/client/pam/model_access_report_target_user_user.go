/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the AccessReportTargetUserUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessReportTargetUserUser{}

// AccessReportTargetUserUser struct for AccessReportTargetUserUser
type AccessReportTargetUserUser struct {
	// The UUID of an existing Okta Privileged Access user or resource
	Id                 *string                         `json:"id,omitempty"`
	ResourceTypeFilter *AccessReportTargetResourceType `json:"resource_type_filter,omitempty"`
}

// NewAccessReportTargetUserUser instantiates a new AccessReportTargetUserUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessReportTargetUserUser() *AccessReportTargetUserUser {
	this := AccessReportTargetUserUser{}
	return &this
}

// NewAccessReportTargetUserUserWithDefaults instantiates a new AccessReportTargetUserUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessReportTargetUserUserWithDefaults() *AccessReportTargetUserUser {
	this := AccessReportTargetUserUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessReportTargetUserUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReportTargetUserUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessReportTargetUserUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccessReportTargetUserUser) SetId(v string) *AccessReportTargetUserUser {
	o.Id = &v
	return o
}

// GetResourceTypeFilter returns the ResourceTypeFilter field value if set, zero value otherwise.
func (o *AccessReportTargetUserUser) GetResourceTypeFilter() AccessReportTargetResourceType {
	if o == nil || IsNil(o.ResourceTypeFilter) {
		var ret AccessReportTargetResourceType
		return ret
	}
	return *o.ResourceTypeFilter
}

// GetResourceTypeFilterOk returns a tuple with the ResourceTypeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReportTargetUserUser) GetResourceTypeFilterOk() (*AccessReportTargetResourceType, bool) {
	if o == nil || IsNil(o.ResourceTypeFilter) {
		return nil, false
	}
	return o.ResourceTypeFilter, true
}

// HasResourceTypeFilter returns a boolean if a field has been set.
func (o *AccessReportTargetUserUser) HasResourceTypeFilter() bool {
	if o != nil && !IsNil(o.ResourceTypeFilter) {
		return true
	}

	return false
}

// SetResourceTypeFilter gets a reference to the given AccessReportTargetResourceType and assigns it to the ResourceTypeFilter field.
func (o *AccessReportTargetUserUser) SetResourceTypeFilter(v AccessReportTargetResourceType) *AccessReportTargetUserUser {
	o.ResourceTypeFilter = &v
	return o
}

func (o AccessReportTargetUserUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessReportTargetUserUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ResourceTypeFilter) {
		toSerialize["resource_type_filter"] = o.ResourceTypeFilter
	}
	return toSerialize, nil
}

type NullableAccessReportTargetUserUser struct {
	value *AccessReportTargetUserUser
	isSet bool
}

func (v NullableAccessReportTargetUserUser) Get() *AccessReportTargetUserUser {
	return v.value
}

func (v *NullableAccessReportTargetUserUser) Set(val *AccessReportTargetUserUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessReportTargetUserUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessReportTargetUserUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessReportTargetUserUser(val *AccessReportTargetUserUser) *NullableAccessReportTargetUserUser {
	return &NullableAccessReportTargetUserUser{value: val, isSet: true}
}

func (v NullableAccessReportTargetUserUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessReportTargetUserUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
