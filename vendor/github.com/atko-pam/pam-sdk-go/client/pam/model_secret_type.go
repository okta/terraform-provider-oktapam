/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// SecretType the model 'SecretType'
type SecretType string

// List of SecretType
const (
	SecretType_FOLDER           SecretType = "folder"
	SecretType_KEY_VALUE_SECRET SecretType = "key_value_secret"
)

// All allowed values of SecretType enum
var AllowedSecretTypeEnumValues = []SecretType{
	"folder",
	"key_value_secret",
}

func (v *SecretType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecretType(value)
	for _, existing := range AllowedSecretTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecretType", value)
}

// NewSecretTypeFromValue returns a pointer to a valid SecretType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecretTypeFromValue(v string) (*SecretType, error) {
	ev := SecretType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecretType: valid values are %v", v, AllowedSecretTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecretType) IsValid() bool {
	for _, existing := range AllowedSecretTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecretType value
func (v SecretType) Ptr() *SecretType {
	return &v
}

type NullableSecretType struct {
	value *SecretType
	isSet bool
}

func (v NullableSecretType) Get() *SecretType {
	return v.value
}

func (v *NullableSecretType) Set(val *SecretType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretType(val *SecretType) *NullableSecretType {
	return &NullableSecretType{value: val, isSet: true}
}

func (v NullableSecretType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
