/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// StagedPrivilegedAccountsAPIService StagedPrivilegedAccountsAPI service
type StagedPrivilegedAccountsAPIService service

type ApiAssignStagedPrivilegedAccountRequest struct {
	ctx                            context.Context
	ApiService                     *StagedPrivilegedAccountsAPIService
	teamName                       string
	stagedPrivilegedAccountId      string
	assignPrivilegedAccountRequest *AssignPrivilegedAccountRequest
}

func (r ApiAssignStagedPrivilegedAccountRequest) AssignPrivilegedAccountRequest(assignPrivilegedAccountRequest AssignPrivilegedAccountRequest) ApiAssignStagedPrivilegedAccountRequest {
	r.assignPrivilegedAccountRequest = &assignPrivilegedAccountRequest
	return r
}

func (r ApiAssignStagedPrivilegedAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.AssignStagedPrivilegedAccountExecute(r)
}

/*
	AssignStagedPrivilegedAccount Assign a SaaS or Okta Privileged Account to a Resource Group and Project

	    Assigns a SaaS or Okta Privileged Account to a Resource Group and Project.

If the account can be actively managed, rotates the password for the account immediately.
This endpoint requires the `resource_admin` role.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param stagedPrivilegedAccountId The UUID of a `STAGED` Privileged Account
	@return ApiAssignStagedPrivilegedAccountRequest
*/
func (a *StagedPrivilegedAccountsAPIService) AssignStagedPrivilegedAccount(ctx context.Context, teamName string, stagedPrivilegedAccountId string) ApiAssignStagedPrivilegedAccountRequest {
	return ApiAssignStagedPrivilegedAccountRequest{
		ApiService:                a,
		ctx:                       ctx,
		teamName:                  teamName,
		stagedPrivilegedAccountId: stagedPrivilegedAccountId,
	}
}

// Execute executes the request
func (a *StagedPrivilegedAccountsAPIService) AssignStagedPrivilegedAccountExecute(r ApiAssignStagedPrivilegedAccountRequest) (*http.Response, error) {
	var (
		traceKey           = "stagedprivilegedaccountsapi.assignStagedPrivilegedAccount"
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/staged_privileged_accounts/{staged_privileged_account_id}/assign"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"staged_privileged_account_id"+"}", url.PathEscape(parameterValueToString(r.stagedPrivilegedAccountId, "stagedPrivilegedAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assignPrivilegedAccountRequest
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if localVarHTTPResponse == nil && err != nil {
		return nil, err
	}

	return localVarHTTPResponse, err
}

type ApiListStagedPrivilegedAccountsRequest struct {
	ctx        context.Context
	ApiService *StagedPrivilegedAccountsAPIService
	teamName   string
}

func (r ApiListStagedPrivilegedAccountsRequest) Execute() (*ListStagedPrivilegedAccountsResponse, *http.Response, error) {
	return r.ApiService.ListStagedPrivilegedAccountsExecute(r)
}

/*
	ListStagedPrivilegedAccounts List all staged Privileged Accounts from Okta Universal Directory

	    Lists all SaaS and Okta Privileged Accounts from Okta Universal Directory that have not been assigned to a Project or Resource Group.

This endpoint requires the `resource_admin` role.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiListStagedPrivilegedAccountsRequest
*/
func (a *StagedPrivilegedAccountsAPIService) ListStagedPrivilegedAccounts(ctx context.Context, teamName string) ApiListStagedPrivilegedAccountsRequest {
	return ApiListStagedPrivilegedAccountsRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListStagedPrivilegedAccountsResponse
func (a *StagedPrivilegedAccountsAPIService) ListStagedPrivilegedAccountsExecute(r ApiListStagedPrivilegedAccountsRequest) (*ListStagedPrivilegedAccountsResponse, *http.Response, error) {
	var (
		traceKey            = "stagedprivilegedaccountsapi.listStagedPrivilegedAccounts"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListStagedPrivilegedAccountsResponse
	)

	localVarPath := "/v1/teams/{team_name}/staged_privileged_accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
