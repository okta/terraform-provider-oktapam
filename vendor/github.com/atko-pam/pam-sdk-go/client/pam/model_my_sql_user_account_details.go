/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the MySQLUserAccountDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MySQLUserAccountDetails{}

// MySQLUserAccountDetails The details of the MySQL user account
type MySQLUserAccountDetails struct {
	// Type of this object
	Type *string `json:"_type,omitempty"`
	// The username of the MySQL user Static Account
	Username string `json:"username"`
	// The hostname of the MySQL user Static Account
	HostName string `json:"host_name"`
}

// NewMySQLUserAccountDetails instantiates a new MySQLUserAccountDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMySQLUserAccountDetails(username string, hostName string) *MySQLUserAccountDetails {
	this := MySQLUserAccountDetails{}
	this.Username = username
	this.HostName = hostName
	return &this
}

// NewMySQLUserAccountDetailsWithDefaults instantiates a new MySQLUserAccountDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMySQLUserAccountDetailsWithDefaults() *MySQLUserAccountDetails {
	this := MySQLUserAccountDetails{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MySQLUserAccountDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLUserAccountDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MySQLUserAccountDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MySQLUserAccountDetails) SetType(v string) *MySQLUserAccountDetails {
	o.Type = &v
	return o
}

// GetUsername returns the Username field value
func (o *MySQLUserAccountDetails) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *MySQLUserAccountDetails) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *MySQLUserAccountDetails) SetUsername(v string) *MySQLUserAccountDetails {
	o.Username = v
	return o
}

// GetHostName returns the HostName field value
func (o *MySQLUserAccountDetails) GetHostName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value
// and a boolean to check if the value has been set.
func (o *MySQLUserAccountDetails) GetHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostName, true
}

// SetHostName sets field value
func (o *MySQLUserAccountDetails) SetHostName(v string) *MySQLUserAccountDetails {
	o.HostName = v
	return o
}

func (o MySQLUserAccountDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MySQLUserAccountDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["_type"] = o.Type
	}
	toSerialize["username"] = o.Username
	toSerialize["host_name"] = o.HostName
	return toSerialize, nil
}

type NullableMySQLUserAccountDetails struct {
	value *MySQLUserAccountDetails
	isSet bool
}

func (v NullableMySQLUserAccountDetails) Get() *MySQLUserAccountDetails {
	return v.value
}

func (v *NullableMySQLUserAccountDetails) Set(val *MySQLUserAccountDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableMySQLUserAccountDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableMySQLUserAccountDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMySQLUserAccountDetails(val *MySQLUserAccountDetails) *NullableMySQLUserAccountDetails {
	return &NullableMySQLUserAccountDetails{value: val, isSet: true}
}

func (v NullableMySQLUserAccountDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMySQLUserAccountDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
