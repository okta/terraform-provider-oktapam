/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryAccountPrivilegeContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAccountPrivilegeContainer{}

// ActiveDirectoryAccountPrivilegeContainer Privileges granted to a user for an Active Directory account
type ActiveDirectoryAccountPrivilegeContainer struct {
	PrivilegeType  *SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts `json:"privilege_type,omitempty"`
	PrivilegeValue *ActiveDirectoryAccountPrivilegeContainerPrivilegeValue    `json:"privilege_value,omitempty"`
}

// NewActiveDirectoryAccountPrivilegeContainer instantiates a new ActiveDirectoryAccountPrivilegeContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAccountPrivilegeContainer() *ActiveDirectoryAccountPrivilegeContainer {
	this := ActiveDirectoryAccountPrivilegeContainer{}
	return &this
}

// NewActiveDirectoryAccountPrivilegeContainerWithDefaults instantiates a new ActiveDirectoryAccountPrivilegeContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAccountPrivilegeContainerWithDefaults() *ActiveDirectoryAccountPrivilegeContainer {
	this := ActiveDirectoryAccountPrivilegeContainer{}
	return &this
}

// GetPrivilegeType returns the PrivilegeType field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountPrivilegeContainer) GetPrivilegeType() SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts {
	if o == nil || IsNil(o.PrivilegeType) {
		var ret SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts
		return ret
	}
	return *o.PrivilegeType
}

// GetPrivilegeTypeOk returns a tuple with the PrivilegeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountPrivilegeContainer) GetPrivilegeTypeOk() (*SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts, bool) {
	if o == nil || IsNil(o.PrivilegeType) {
		return nil, false
	}
	return o.PrivilegeType, true
}

// HasPrivilegeType returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountPrivilegeContainer) HasPrivilegeType() bool {
	if o != nil && !IsNil(o.PrivilegeType) {
		return true
	}

	return false
}

// SetPrivilegeType gets a reference to the given SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts and assigns it to the PrivilegeType field.
func (o *ActiveDirectoryAccountPrivilegeContainer) SetPrivilegeType(v SecurityPolicyRulePrivilegeTypeForActiveDirectoryAccounts) *ActiveDirectoryAccountPrivilegeContainer {
	o.PrivilegeType = &v
	return o
}

// GetPrivilegeValue returns the PrivilegeValue field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountPrivilegeContainer) GetPrivilegeValue() ActiveDirectoryAccountPrivilegeContainerPrivilegeValue {
	if o == nil || IsNil(o.PrivilegeValue) {
		var ret ActiveDirectoryAccountPrivilegeContainerPrivilegeValue
		return ret
	}
	return *o.PrivilegeValue
}

// GetPrivilegeValueOk returns a tuple with the PrivilegeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountPrivilegeContainer) GetPrivilegeValueOk() (*ActiveDirectoryAccountPrivilegeContainerPrivilegeValue, bool) {
	if o == nil || IsNil(o.PrivilegeValue) {
		return nil, false
	}
	return o.PrivilegeValue, true
}

// HasPrivilegeValue returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountPrivilegeContainer) HasPrivilegeValue() bool {
	if o != nil && !IsNil(o.PrivilegeValue) {
		return true
	}

	return false
}

// SetPrivilegeValue gets a reference to the given ActiveDirectoryAccountPrivilegeContainerPrivilegeValue and assigns it to the PrivilegeValue field.
func (o *ActiveDirectoryAccountPrivilegeContainer) SetPrivilegeValue(v ActiveDirectoryAccountPrivilegeContainerPrivilegeValue) *ActiveDirectoryAccountPrivilegeContainer {
	o.PrivilegeValue = &v
	return o
}

func (o ActiveDirectoryAccountPrivilegeContainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAccountPrivilegeContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrivilegeType) {
		toSerialize["privilege_type"] = o.PrivilegeType
	}
	if !IsNil(o.PrivilegeValue) {
		toSerialize["privilege_value"] = o.PrivilegeValue
	}
	return toSerialize, nil
}

type NullableActiveDirectoryAccountPrivilegeContainer struct {
	value *ActiveDirectoryAccountPrivilegeContainer
	isSet bool
}

func (v NullableActiveDirectoryAccountPrivilegeContainer) Get() *ActiveDirectoryAccountPrivilegeContainer {
	return v.value
}

func (v *NullableActiveDirectoryAccountPrivilegeContainer) Set(val *ActiveDirectoryAccountPrivilegeContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountPrivilegeContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountPrivilegeContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountPrivilegeContainer(val *ActiveDirectoryAccountPrivilegeContainer) *NullableActiveDirectoryAccountPrivilegeContainer {
	return &NullableActiveDirectoryAccountPrivilegeContainer{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountPrivilegeContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountPrivilegeContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
