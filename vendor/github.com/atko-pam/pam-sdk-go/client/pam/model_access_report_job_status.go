/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// AccessReportJobStatus The status of the job
type AccessReportJobStatus string

// List of AccessReportJobStatus
const (
	AccessReportJobStatus_CREATED             AccessReportJobStatus = "CREATED"
	AccessReportJobStatus_IN_PROGRESS         AccessReportJobStatus = "IN PROGRESS"
	AccessReportJobStatus_ERROR               AccessReportJobStatus = "ERROR"
	AccessReportJobStatus_COMPLETED           AccessReportJobStatus = "COMPLETED"
	AccessReportJobStatus_COMPLETED_BUT_EMPTY AccessReportJobStatus = "COMPLETED_BUT_EMPTY"
)

// All allowed values of AccessReportJobStatus enum
var AllowedAccessReportJobStatusEnumValues = []AccessReportJobStatus{
	"CREATED",
	"IN PROGRESS",
	"ERROR",
	"COMPLETED",
	"COMPLETED_BUT_EMPTY",
}

func (v *AccessReportJobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessReportJobStatus(value)
	for _, existing := range AllowedAccessReportJobStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessReportJobStatus", value)
}

// NewAccessReportJobStatusFromValue returns a pointer to a valid AccessReportJobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessReportJobStatusFromValue(v string) (*AccessReportJobStatus, error) {
	ev := AccessReportJobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessReportJobStatus: valid values are %v", v, AllowedAccessReportJobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessReportJobStatus) IsValid() bool {
	for _, existing := range AllowedAccessReportJobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessReportJobStatus value
func (v AccessReportJobStatus) Ptr() *AccessReportJobStatus {
	return &v
}

type NullableAccessReportJobStatus struct {
	value *AccessReportJobStatus
	isSet bool
}

func (v NullableAccessReportJobStatus) Get() *AccessReportJobStatus {
	return v.value
}

func (v *NullableAccessReportJobStatus) Set(val *AccessReportJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessReportJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessReportJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessReportJobStatus(val *AccessReportJobStatus) *NullableAccessReportJobStatus {
	return &NullableAccessReportJobStatus{value: val, isSet: true}
}

func (v NullableAccessReportJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessReportJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
