/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SecurityPolicyAPIService SecurityPolicyAPI service
type SecurityPolicyAPIService service

type ApiCreateSecurityPolicyRequest struct {
	ctx            context.Context
	ApiService     *SecurityPolicyAPIService
	teamName       string
	securityPolicy *SecurityPolicy
}

func (r ApiCreateSecurityPolicyRequest) SecurityPolicy(securityPolicy SecurityPolicy) ApiCreateSecurityPolicyRequest {
	r.securityPolicy = &securityPolicy
	return r
}

func (r ApiCreateSecurityPolicyRequest) Execute() (*SecurityPolicy, *http.Response, error) {
	return r.ApiService.CreateSecurityPolicyExecute(r)
}

/*
	CreateSecurityPolicy Create a Security Policy

	    Creates a Security Policy

This endpoint requires the following role: `security_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiCreateSecurityPolicyRequest
*/
func (a *SecurityPolicyAPIService) CreateSecurityPolicy(ctx context.Context, teamName string) ApiCreateSecurityPolicyRequest {
	return ApiCreateSecurityPolicyRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return SecurityPolicy
func (a *SecurityPolicyAPIService) CreateSecurityPolicyExecute(r ApiCreateSecurityPolicyRequest) (*SecurityPolicy, *http.Response, error) {
	var (
		traceKey            = "securitypolicyapi.createSecurityPolicy"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecurityPolicy
	)

	localVarPath := "/v1/teams/{team_name}/security_policy"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityPolicy
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiDeleteSecurityPolicyRequest struct {
	ctx              context.Context
	ApiService       *SecurityPolicyAPIService
	teamName         string
	securityPolicyId string
}

func (r ApiDeleteSecurityPolicyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSecurityPolicyExecute(r)
}

/*
	DeleteSecurityPolicy Delete a Security Policy

	    Deletes the specified Security Policy

This endpoint requires the following role: `security_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param securityPolicyId The UUID of a Security Policy
	@return ApiDeleteSecurityPolicyRequest
*/
func (a *SecurityPolicyAPIService) DeleteSecurityPolicy(ctx context.Context, teamName string, securityPolicyId string) ApiDeleteSecurityPolicyRequest {
	return ApiDeleteSecurityPolicyRequest{
		ApiService:       a,
		ctx:              ctx,
		teamName:         teamName,
		securityPolicyId: securityPolicyId,
	}
}

// Execute executes the request
func (a *SecurityPolicyAPIService) DeleteSecurityPolicyExecute(r ApiDeleteSecurityPolicyRequest) (*http.Response, error) {
	var (
		traceKey           = "securitypolicyapi.deleteSecurityPolicy"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/security_policy/{security_policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"security_policy_id"+"}", url.PathEscape(parameterValueToString(r.securityPolicyId, "securityPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}

type ApiGetSecurityPolicyRequest struct {
	ctx              context.Context
	ApiService       *SecurityPolicyAPIService
	teamName         string
	securityPolicyId string
}

func (r ApiGetSecurityPolicyRequest) Execute() (*SecurityPolicy, *http.Response, error) {
	return r.ApiService.GetSecurityPolicyExecute(r)
}

/*
	GetSecurityPolicy Retrieve a Security Policy

	    Retrieves the specified Security Policy

This endpoint requires the following role: `security_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param securityPolicyId The UUID of a Security Policy
	@return ApiGetSecurityPolicyRequest
*/
func (a *SecurityPolicyAPIService) GetSecurityPolicy(ctx context.Context, teamName string, securityPolicyId string) ApiGetSecurityPolicyRequest {
	return ApiGetSecurityPolicyRequest{
		ApiService:       a,
		ctx:              ctx,
		teamName:         teamName,
		securityPolicyId: securityPolicyId,
	}
}

// Execute executes the request
//
//	@return SecurityPolicy
func (a *SecurityPolicyAPIService) GetSecurityPolicyExecute(r ApiGetSecurityPolicyRequest) (*SecurityPolicy, *http.Response, error) {
	var (
		traceKey            = "securitypolicyapi.getSecurityPolicy"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SecurityPolicy
	)

	localVarPath := "/v1/teams/{team_name}/security_policy/{security_policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"security_policy_id"+"}", url.PathEscape(parameterValueToString(r.securityPolicyId, "securityPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListSecurityPoliciesRequest struct {
	ctx        context.Context
	ApiService *SecurityPolicyAPIService
	teamName   string
}

func (r ApiListSecurityPoliciesRequest) Execute() (*ListSecurityPoliciesResponse, *http.Response, error) {
	return r.ApiService.ListSecurityPoliciesExecute(r)
}

/*
	ListSecurityPolicies List all Security Policies

	    Lists all Security Policies for the current Security Admin

This endpoint requires the following role: `security_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	@return ApiListSecurityPoliciesRequest
*/
func (a *SecurityPolicyAPIService) ListSecurityPolicies(ctx context.Context, teamName string) ApiListSecurityPoliciesRequest {
	return ApiListSecurityPoliciesRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListSecurityPoliciesResponse
func (a *SecurityPolicyAPIService) ListSecurityPoliciesExecute(r ApiListSecurityPoliciesRequest) (*ListSecurityPoliciesResponse, *http.Response, error) {
	var (
		traceKey            = "securitypolicyapi.listSecurityPolicies"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListSecurityPoliciesResponse
	)

	localVarPath := "/v1/teams/{team_name}/security_policy"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiUpdateSecurityPolicyRequest struct {
	ctx              context.Context
	ApiService       *SecurityPolicyAPIService
	teamName         string
	securityPolicyId string
	securityPolicy   *SecurityPolicy
}

func (r ApiUpdateSecurityPolicyRequest) SecurityPolicy(securityPolicy SecurityPolicy) ApiUpdateSecurityPolicyRequest {
	r.securityPolicy = &securityPolicy
	return r
}

func (r ApiUpdateSecurityPolicyRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateSecurityPolicyExecute(r)
}

/*
	UpdateSecurityPolicy Update a Security Policy

	    Updates the specified Security Policy

This endpoint requires the following role: `security_admin`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	    @param teamName The name of your Team
	    @param securityPolicyId The UUID of a Security Policy
	@return ApiUpdateSecurityPolicyRequest
*/
func (a *SecurityPolicyAPIService) UpdateSecurityPolicy(ctx context.Context, teamName string, securityPolicyId string) ApiUpdateSecurityPolicyRequest {
	return ApiUpdateSecurityPolicyRequest{
		ApiService:       a,
		ctx:              ctx,
		teamName:         teamName,
		securityPolicyId: securityPolicyId,
	}
}

// Execute executes the request
func (a *SecurityPolicyAPIService) UpdateSecurityPolicyExecute(r ApiUpdateSecurityPolicyRequest) (*http.Response, error) {
	var (
		traceKey           = "securitypolicyapi.updateSecurityPolicy"
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/teams/{team_name}/security_policy/{security_policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"security_policy_id"+"}", url.PathEscape(parameterValueToString(r.securityPolicyId, "securityPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityPolicy
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if err != nil {
		if localVarHTTPResponse == nil {
			return nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarHTTPResponse, err
		}
		return localVarHTTPResponse, apiError
	}

	return localVarHTTPResponse, err
}
