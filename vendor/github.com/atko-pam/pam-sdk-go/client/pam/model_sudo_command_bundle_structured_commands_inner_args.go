/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// SudoCommandBundleStructuredCommandsInnerArgs - struct for SudoCommandBundleStructuredCommandsInnerArgs
type SudoCommandBundleStructuredCommandsInnerArgs struct {
	Executable *Executable
	String     *string
}

// ExecutableAsSudoCommandBundleStructuredCommandsInnerArgs is a convenience function that returns Executable wrapped in SudoCommandBundleStructuredCommandsInnerArgs
func ExecutableAsSudoCommandBundleStructuredCommandsInnerArgs(v *Executable) SudoCommandBundleStructuredCommandsInnerArgs {
	return SudoCommandBundleStructuredCommandsInnerArgs{
		Executable: v,
	}
}

// stringAsSudoCommandBundleStructuredCommandsInnerArgs is a convenience function that returns string wrapped in SudoCommandBundleStructuredCommandsInnerArgs
func StringAsSudoCommandBundleStructuredCommandsInnerArgs(v *string) SudoCommandBundleStructuredCommandsInnerArgs {
	return SudoCommandBundleStructuredCommandsInnerArgs{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SudoCommandBundleStructuredCommandsInnerArgs) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into Executable
	err = json.Unmarshal(data, &dst.Executable)
	if err == nil {
		jsonExecutable, _ := json.Marshal(dst.Executable)
		if string(jsonExecutable) == "{}" { // empty struct
			dst.Executable = nil
		} else {
			match++
		}
	} else {
		dst.Executable = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.String)
		if string(jsonstring) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Executable = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SudoCommandBundleStructuredCommandsInnerArgs)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SudoCommandBundleStructuredCommandsInnerArgs)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SudoCommandBundleStructuredCommandsInnerArgs) MarshalJSON() ([]byte, error) {
	if src.Executable != nil {
		return json.Marshal(&src.Executable)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SudoCommandBundleStructuredCommandsInnerArgs) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Executable != nil {
		return obj.Executable
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableSudoCommandBundleStructuredCommandsInnerArgs struct {
	value *SudoCommandBundleStructuredCommandsInnerArgs
	isSet bool
}

func (v NullableSudoCommandBundleStructuredCommandsInnerArgs) Get() *SudoCommandBundleStructuredCommandsInnerArgs {
	return v.value
}

func (v *NullableSudoCommandBundleStructuredCommandsInnerArgs) Set(val *SudoCommandBundleStructuredCommandsInnerArgs) {
	v.value = val
	v.isSet = true
}

func (v NullableSudoCommandBundleStructuredCommandsInnerArgs) IsSet() bool {
	return v.isSet
}

func (v *NullableSudoCommandBundleStructuredCommandsInnerArgs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSudoCommandBundleStructuredCommandsInnerArgs(val *SudoCommandBundleStructuredCommandsInnerArgs) *NullableSudoCommandBundleStructuredCommandsInnerArgs {
	return &NullableSudoCommandBundleStructuredCommandsInnerArgs{value: val, isSet: true}
}

func (v NullableSudoCommandBundleStructuredCommandsInnerArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSudoCommandBundleStructuredCommandsInnerArgs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
