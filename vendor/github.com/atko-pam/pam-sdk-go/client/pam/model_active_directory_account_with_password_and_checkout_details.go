/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the ActiveDirectoryAccountWithPasswordAndCheckoutDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAccountWithPasswordAndCheckoutDetails{}

// ActiveDirectoryAccountWithPasswordAndCheckoutDetails struct for ActiveDirectoryAccountWithPasswordAndCheckoutDetails
type ActiveDirectoryAccountWithPasswordAndCheckoutDetails struct {
	// The timestamp indicating when is the next scheduled Active Directory account password rotation
	NextScheduledPasswordRotationTimestamp *time.Time `json:"next_scheduled_password_rotation_timestamp,omitempty"`
	// The reason for scheduling the next password rotation for the Active Directory account
	NextScheduledPasswordRotationReason *string                     `json:"next_scheduled_password_rotation_reason,omitempty"`
	CheckoutStatus                      *ResourceAvailabilityStatus `json:"checkout_status,omitempty"`
	// The username of the user who last accessed the Active Directory account through exclusive checkout
	LastCheckoutUser *string `json:"last_checkout_user,omitempty"`
	// The timestamp when a user's exclusive access to the Active Directory account expires
	CheckoutExpiryAt *time.Time `json:"checkout_expiry_at,omitempty"`
	// The name of the Active Directory account
	AccountName *string `json:"account_name,omitempty"`
	// The type of Active Directory account
	AccountType *string `json:"account_type,omitempty"`
	// The match status of the Active Directory Account
	MatchStatus *string `json:"match_status,omitempty"`
	// A timestamp indicating the last password rotation for the Active Directory Account
	LastRotationAt *time.Time `json:"last_rotation_at,omitempty"`
	// Timestamp indicating when the Active Directory account was managed by Okta Privileged Access
	BroughtUnderManagementAt *time.Time   `json:"brought_under_management_at,omitempty"`
	ResourceGroup            *NamedObject `json:"resource_group,omitempty"`
	Project                  *NamedObject `json:"project,omitempty"`
	MatchedUser              *NamedObject `json:"matched_user,omitempty"`
	Domain                   *NamedObject `json:"domain,omitempty"`
	// The Distinguished Name (DN) referencing the Active Directory account
	DistinguishedName *string `json:"distinguished_name,omitempty"`
	// The User Principal Name (UPN) for the Active Directory account
	Upn *string `json:"upn,omitempty"`
	// The Security Identifier (SID) for the Active Directory account
	Sid *string `json:"sid,omitempty"`
	// The `sAMAccountName` field for this Active Directory account
	SamAccountName *string `json:"sam_account_name,omitempty"`
	// The first name of this Active Directory user, if set
	FirstName *string `json:"first_name,omitempty"`
	// The last name of this Active Directory user, if set
	LastName *string `json:"last_name,omitempty"`
	// The display name of this Active Directory user, if set
	DisplayName *string `json:"display_name,omitempty"`
	// The email of this Active Directory user, if set
	Email               *string                     `json:"email,omitempty"`
	AccountStatusDetail *ServiceAccountStatusDetail `json:"account_status_detail,omitempty"`
	// Additional information about this account's status, if set
	AccountStatusDetailMessage *string `json:"account_status_detail_message,omitempty"`
	// The number of times an account's password was successfully changed
	PasswordChangeSuccessCount *int32 `json:"password_change_success_count,omitempty"`
	// The number of times an account's password change resulted in failure
	PasswordChangeErrorCount *int32 `json:"password_change_error_count,omitempty"`
	// The number of times an account's password change failed after the last successful attempt
	PasswordChangeErrorCountSinceLastSuccess *int32 `json:"password_change_error_count_since_last_success,omitempty"`
	// A timestamp indicating when OPA last reported a change to the account password
	LastPasswordChangeSuccessReportTimestamp *time.Time `json:"last_password_change_success_report_timestamp,omitempty"`
	// A timestamp reported from the remote system indicating when the remote system last changed the account password
	LastPasswordChangeSystemTimestamp *time.Time `json:"last_password_change_system_timestamp,omitempty"`
	// A timestamp indicating when the remote system last reported a failure to change to the account password
	LastPasswordChangeErrorReportTimestamp *time.Time `json:"last_password_change_error_report_timestamp,omitempty"`
	// A timestamp reported from the remote system indicating when the remote system last failed to change the account password
	LastPasswordChangeErrorSystemTimestamp *time.Time `json:"last_password_change_error_system_timestamp,omitempty"`
	// The type of error message reported during the most recent failure to change the account password
	LastPasswordChangeErrorType *string `json:"last_password_change_error_type,omitempty"`
	// The error message metadata reported during the most recent failure to change the account password
	LastPasswordChangeErrorMetadata *string `json:"last_password_change_error_metadata,omitempty"`
}

// NewActiveDirectoryAccountWithPasswordAndCheckoutDetails instantiates a new ActiveDirectoryAccountWithPasswordAndCheckoutDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAccountWithPasswordAndCheckoutDetails() *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	this := ActiveDirectoryAccountWithPasswordAndCheckoutDetails{}
	return &this
}

// NewActiveDirectoryAccountWithPasswordAndCheckoutDetailsWithDefaults instantiates a new ActiveDirectoryAccountWithPasswordAndCheckoutDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAccountWithPasswordAndCheckoutDetailsWithDefaults() *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	this := ActiveDirectoryAccountWithPasswordAndCheckoutDetails{}
	return &this
}

// GetNextScheduledPasswordRotationTimestamp returns the NextScheduledPasswordRotationTimestamp field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetNextScheduledPasswordRotationTimestamp() time.Time {
	if o == nil || IsNil(o.NextScheduledPasswordRotationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.NextScheduledPasswordRotationTimestamp
}

// GetNextScheduledPasswordRotationTimestampOk returns a tuple with the NextScheduledPasswordRotationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetNextScheduledPasswordRotationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextScheduledPasswordRotationTimestamp) {
		return nil, false
	}
	return o.NextScheduledPasswordRotationTimestamp, true
}

// HasNextScheduledPasswordRotationTimestamp returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasNextScheduledPasswordRotationTimestamp() bool {
	if o != nil && !IsNil(o.NextScheduledPasswordRotationTimestamp) {
		return true
	}

	return false
}

// SetNextScheduledPasswordRotationTimestamp gets a reference to the given time.Time and assigns it to the NextScheduledPasswordRotationTimestamp field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetNextScheduledPasswordRotationTimestamp(v time.Time) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.NextScheduledPasswordRotationTimestamp = &v
	return o
}

// GetNextScheduledPasswordRotationReason returns the NextScheduledPasswordRotationReason field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetNextScheduledPasswordRotationReason() string {
	if o == nil || IsNil(o.NextScheduledPasswordRotationReason) {
		var ret string
		return ret
	}
	return *o.NextScheduledPasswordRotationReason
}

// GetNextScheduledPasswordRotationReasonOk returns a tuple with the NextScheduledPasswordRotationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetNextScheduledPasswordRotationReasonOk() (*string, bool) {
	if o == nil || IsNil(o.NextScheduledPasswordRotationReason) {
		return nil, false
	}
	return o.NextScheduledPasswordRotationReason, true
}

// HasNextScheduledPasswordRotationReason returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasNextScheduledPasswordRotationReason() bool {
	if o != nil && !IsNil(o.NextScheduledPasswordRotationReason) {
		return true
	}

	return false
}

// SetNextScheduledPasswordRotationReason gets a reference to the given string and assigns it to the NextScheduledPasswordRotationReason field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetNextScheduledPasswordRotationReason(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.NextScheduledPasswordRotationReason = &v
	return o
}

// GetCheckoutStatus returns the CheckoutStatus field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetCheckoutStatus() ResourceAvailabilityStatus {
	if o == nil || IsNil(o.CheckoutStatus) {
		var ret ResourceAvailabilityStatus
		return ret
	}
	return *o.CheckoutStatus
}

// GetCheckoutStatusOk returns a tuple with the CheckoutStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetCheckoutStatusOk() (*ResourceAvailabilityStatus, bool) {
	if o == nil || IsNil(o.CheckoutStatus) {
		return nil, false
	}
	return o.CheckoutStatus, true
}

// HasCheckoutStatus returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasCheckoutStatus() bool {
	if o != nil && !IsNil(o.CheckoutStatus) {
		return true
	}

	return false
}

// SetCheckoutStatus gets a reference to the given ResourceAvailabilityStatus and assigns it to the CheckoutStatus field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetCheckoutStatus(v ResourceAvailabilityStatus) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.CheckoutStatus = &v
	return o
}

// GetLastCheckoutUser returns the LastCheckoutUser field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastCheckoutUser() string {
	if o == nil || IsNil(o.LastCheckoutUser) {
		var ret string
		return ret
	}
	return *o.LastCheckoutUser
}

// GetLastCheckoutUserOk returns a tuple with the LastCheckoutUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastCheckoutUserOk() (*string, bool) {
	if o == nil || IsNil(o.LastCheckoutUser) {
		return nil, false
	}
	return o.LastCheckoutUser, true
}

// HasLastCheckoutUser returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasLastCheckoutUser() bool {
	if o != nil && !IsNil(o.LastCheckoutUser) {
		return true
	}

	return false
}

// SetLastCheckoutUser gets a reference to the given string and assigns it to the LastCheckoutUser field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetLastCheckoutUser(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.LastCheckoutUser = &v
	return o
}

// GetCheckoutExpiryAt returns the CheckoutExpiryAt field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetCheckoutExpiryAt() time.Time {
	if o == nil || IsNil(o.CheckoutExpiryAt) {
		var ret time.Time
		return ret
	}
	return *o.CheckoutExpiryAt
}

// GetCheckoutExpiryAtOk returns a tuple with the CheckoutExpiryAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetCheckoutExpiryAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CheckoutExpiryAt) {
		return nil, false
	}
	return o.CheckoutExpiryAt, true
}

// HasCheckoutExpiryAt returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasCheckoutExpiryAt() bool {
	if o != nil && !IsNil(o.CheckoutExpiryAt) {
		return true
	}

	return false
}

// SetCheckoutExpiryAt gets a reference to the given time.Time and assigns it to the CheckoutExpiryAt field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetCheckoutExpiryAt(v time.Time) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.CheckoutExpiryAt = &v
	return o
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetAccountName(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.AccountName = &v
	return o
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetAccountType() string {
	if o == nil || IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetAccountType(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.AccountType = &v
	return o
}

// GetMatchStatus returns the MatchStatus field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetMatchStatus() string {
	if o == nil || IsNil(o.MatchStatus) {
		var ret string
		return ret
	}
	return *o.MatchStatus
}

// GetMatchStatusOk returns a tuple with the MatchStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetMatchStatusOk() (*string, bool) {
	if o == nil || IsNil(o.MatchStatus) {
		return nil, false
	}
	return o.MatchStatus, true
}

// HasMatchStatus returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasMatchStatus() bool {
	if o != nil && !IsNil(o.MatchStatus) {
		return true
	}

	return false
}

// SetMatchStatus gets a reference to the given string and assigns it to the MatchStatus field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetMatchStatus(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.MatchStatus = &v
	return o
}

// GetLastRotationAt returns the LastRotationAt field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastRotationAt() time.Time {
	if o == nil || IsNil(o.LastRotationAt) {
		var ret time.Time
		return ret
	}
	return *o.LastRotationAt
}

// GetLastRotationAtOk returns a tuple with the LastRotationAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastRotationAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastRotationAt) {
		return nil, false
	}
	return o.LastRotationAt, true
}

// HasLastRotationAt returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasLastRotationAt() bool {
	if o != nil && !IsNil(o.LastRotationAt) {
		return true
	}

	return false
}

// SetLastRotationAt gets a reference to the given time.Time and assigns it to the LastRotationAt field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetLastRotationAt(v time.Time) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.LastRotationAt = &v
	return o
}

// GetBroughtUnderManagementAt returns the BroughtUnderManagementAt field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetBroughtUnderManagementAt() time.Time {
	if o == nil || IsNil(o.BroughtUnderManagementAt) {
		var ret time.Time
		return ret
	}
	return *o.BroughtUnderManagementAt
}

// GetBroughtUnderManagementAtOk returns a tuple with the BroughtUnderManagementAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetBroughtUnderManagementAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BroughtUnderManagementAt) {
		return nil, false
	}
	return o.BroughtUnderManagementAt, true
}

// HasBroughtUnderManagementAt returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasBroughtUnderManagementAt() bool {
	if o != nil && !IsNil(o.BroughtUnderManagementAt) {
		return true
	}

	return false
}

// SetBroughtUnderManagementAt gets a reference to the given time.Time and assigns it to the BroughtUnderManagementAt field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetBroughtUnderManagementAt(v time.Time) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.BroughtUnderManagementAt = &v
	return o
}

// GetResourceGroup returns the ResourceGroup field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetResourceGroup() NamedObject {
	if o == nil || IsNil(o.ResourceGroup) {
		var ret NamedObject
		return ret
	}
	return *o.ResourceGroup
}

// GetResourceGroupOk returns a tuple with the ResourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetResourceGroupOk() (*NamedObject, bool) {
	if o == nil || IsNil(o.ResourceGroup) {
		return nil, false
	}
	return o.ResourceGroup, true
}

// HasResourceGroup returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasResourceGroup() bool {
	if o != nil && !IsNil(o.ResourceGroup) {
		return true
	}

	return false
}

// SetResourceGroup gets a reference to the given NamedObject and assigns it to the ResourceGroup field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetResourceGroup(v NamedObject) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.ResourceGroup = &v
	return o
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetProject() NamedObject {
	if o == nil || IsNil(o.Project) {
		var ret NamedObject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetProjectOk() (*NamedObject, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given NamedObject and assigns it to the Project field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetProject(v NamedObject) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.Project = &v
	return o
}

// GetMatchedUser returns the MatchedUser field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetMatchedUser() NamedObject {
	if o == nil || IsNil(o.MatchedUser) {
		var ret NamedObject
		return ret
	}
	return *o.MatchedUser
}

// GetMatchedUserOk returns a tuple with the MatchedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetMatchedUserOk() (*NamedObject, bool) {
	if o == nil || IsNil(o.MatchedUser) {
		return nil, false
	}
	return o.MatchedUser, true
}

// HasMatchedUser returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasMatchedUser() bool {
	if o != nil && !IsNil(o.MatchedUser) {
		return true
	}

	return false
}

// SetMatchedUser gets a reference to the given NamedObject and assigns it to the MatchedUser field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetMatchedUser(v NamedObject) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.MatchedUser = &v
	return o
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetDomain() NamedObject {
	if o == nil || IsNil(o.Domain) {
		var ret NamedObject
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetDomainOk() (*NamedObject, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NamedObject and assigns it to the Domain field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetDomain(v NamedObject) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.Domain = &v
	return o
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetDistinguishedName() string {
	if o == nil || IsNil(o.DistinguishedName) {
		var ret string
		return ret
	}
	return *o.DistinguishedName
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetDistinguishedNameOk() (*string, bool) {
	if o == nil || IsNil(o.DistinguishedName) {
		return nil, false
	}
	return o.DistinguishedName, true
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasDistinguishedName() bool {
	if o != nil && !IsNil(o.DistinguishedName) {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given string and assigns it to the DistinguishedName field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetDistinguishedName(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.DistinguishedName = &v
	return o
}

// GetUpn returns the Upn field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetUpn() string {
	if o == nil || IsNil(o.Upn) {
		var ret string
		return ret
	}
	return *o.Upn
}

// GetUpnOk returns a tuple with the Upn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetUpnOk() (*string, bool) {
	if o == nil || IsNil(o.Upn) {
		return nil, false
	}
	return o.Upn, true
}

// HasUpn returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasUpn() bool {
	if o != nil && !IsNil(o.Upn) {
		return true
	}

	return false
}

// SetUpn gets a reference to the given string and assigns it to the Upn field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetUpn(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.Upn = &v
	return o
}

// GetSid returns the Sid field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetSid() string {
	if o == nil || IsNil(o.Sid) {
		var ret string
		return ret
	}
	return *o.Sid
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetSidOk() (*string, bool) {
	if o == nil || IsNil(o.Sid) {
		return nil, false
	}
	return o.Sid, true
}

// HasSid returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasSid() bool {
	if o != nil && !IsNil(o.Sid) {
		return true
	}

	return false
}

// SetSid gets a reference to the given string and assigns it to the Sid field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetSid(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.Sid = &v
	return o
}

// GetSamAccountName returns the SamAccountName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetSamAccountName() string {
	if o == nil || IsNil(o.SamAccountName) {
		var ret string
		return ret
	}
	return *o.SamAccountName
}

// GetSamAccountNameOk returns a tuple with the SamAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetSamAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.SamAccountName) {
		return nil, false
	}
	return o.SamAccountName, true
}

// HasSamAccountName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasSamAccountName() bool {
	if o != nil && !IsNil(o.SamAccountName) {
		return true
	}

	return false
}

// SetSamAccountName gets a reference to the given string and assigns it to the SamAccountName field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetSamAccountName(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.SamAccountName = &v
	return o
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetFirstName(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.FirstName = &v
	return o
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetLastName(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.LastName = &v
	return o
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetDisplayName(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.DisplayName = &v
	return o
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetEmail(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.Email = &v
	return o
}

// GetAccountStatusDetail returns the AccountStatusDetail field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetAccountStatusDetail() ServiceAccountStatusDetail {
	if o == nil || IsNil(o.AccountStatusDetail) {
		var ret ServiceAccountStatusDetail
		return ret
	}
	return *o.AccountStatusDetail
}

// GetAccountStatusDetailOk returns a tuple with the AccountStatusDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetAccountStatusDetailOk() (*ServiceAccountStatusDetail, bool) {
	if o == nil || IsNil(o.AccountStatusDetail) {
		return nil, false
	}
	return o.AccountStatusDetail, true
}

// HasAccountStatusDetail returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasAccountStatusDetail() bool {
	if o != nil && !IsNil(o.AccountStatusDetail) {
		return true
	}

	return false
}

// SetAccountStatusDetail gets a reference to the given ServiceAccountStatusDetail and assigns it to the AccountStatusDetail field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetAccountStatusDetail(v ServiceAccountStatusDetail) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.AccountStatusDetail = &v
	return o
}

// GetAccountStatusDetailMessage returns the AccountStatusDetailMessage field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetAccountStatusDetailMessage() string {
	if o == nil || IsNil(o.AccountStatusDetailMessage) {
		var ret string
		return ret
	}
	return *o.AccountStatusDetailMessage
}

// GetAccountStatusDetailMessageOk returns a tuple with the AccountStatusDetailMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetAccountStatusDetailMessageOk() (*string, bool) {
	if o == nil || IsNil(o.AccountStatusDetailMessage) {
		return nil, false
	}
	return o.AccountStatusDetailMessage, true
}

// HasAccountStatusDetailMessage returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasAccountStatusDetailMessage() bool {
	if o != nil && !IsNil(o.AccountStatusDetailMessage) {
		return true
	}

	return false
}

// SetAccountStatusDetailMessage gets a reference to the given string and assigns it to the AccountStatusDetailMessage field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetAccountStatusDetailMessage(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.AccountStatusDetailMessage = &v
	return o
}

// GetPasswordChangeSuccessCount returns the PasswordChangeSuccessCount field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetPasswordChangeSuccessCount() int32 {
	if o == nil || IsNil(o.PasswordChangeSuccessCount) {
		var ret int32
		return ret
	}
	return *o.PasswordChangeSuccessCount
}

// GetPasswordChangeSuccessCountOk returns a tuple with the PasswordChangeSuccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetPasswordChangeSuccessCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordChangeSuccessCount) {
		return nil, false
	}
	return o.PasswordChangeSuccessCount, true
}

// HasPasswordChangeSuccessCount returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasPasswordChangeSuccessCount() bool {
	if o != nil && !IsNil(o.PasswordChangeSuccessCount) {
		return true
	}

	return false
}

// SetPasswordChangeSuccessCount gets a reference to the given int32 and assigns it to the PasswordChangeSuccessCount field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetPasswordChangeSuccessCount(v int32) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.PasswordChangeSuccessCount = &v
	return o
}

// GetPasswordChangeErrorCount returns the PasswordChangeErrorCount field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetPasswordChangeErrorCount() int32 {
	if o == nil || IsNil(o.PasswordChangeErrorCount) {
		var ret int32
		return ret
	}
	return *o.PasswordChangeErrorCount
}

// GetPasswordChangeErrorCountOk returns a tuple with the PasswordChangeErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetPasswordChangeErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordChangeErrorCount) {
		return nil, false
	}
	return o.PasswordChangeErrorCount, true
}

// HasPasswordChangeErrorCount returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasPasswordChangeErrorCount() bool {
	if o != nil && !IsNil(o.PasswordChangeErrorCount) {
		return true
	}

	return false
}

// SetPasswordChangeErrorCount gets a reference to the given int32 and assigns it to the PasswordChangeErrorCount field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetPasswordChangeErrorCount(v int32) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.PasswordChangeErrorCount = &v
	return o
}

// GetPasswordChangeErrorCountSinceLastSuccess returns the PasswordChangeErrorCountSinceLastSuccess field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetPasswordChangeErrorCountSinceLastSuccess() int32 {
	if o == nil || IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		var ret int32
		return ret
	}
	return *o.PasswordChangeErrorCountSinceLastSuccess
}

// GetPasswordChangeErrorCountSinceLastSuccessOk returns a tuple with the PasswordChangeErrorCountSinceLastSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetPasswordChangeErrorCountSinceLastSuccessOk() (*int32, bool) {
	if o == nil || IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		return nil, false
	}
	return o.PasswordChangeErrorCountSinceLastSuccess, true
}

// HasPasswordChangeErrorCountSinceLastSuccess returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasPasswordChangeErrorCountSinceLastSuccess() bool {
	if o != nil && !IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		return true
	}

	return false
}

// SetPasswordChangeErrorCountSinceLastSuccess gets a reference to the given int32 and assigns it to the PasswordChangeErrorCountSinceLastSuccess field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetPasswordChangeErrorCountSinceLastSuccess(v int32) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.PasswordChangeErrorCountSinceLastSuccess = &v
	return o
}

// GetLastPasswordChangeSuccessReportTimestamp returns the LastPasswordChangeSuccessReportTimestamp field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeSuccessReportTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeSuccessReportTimestamp
}

// GetLastPasswordChangeSuccessReportTimestampOk returns a tuple with the LastPasswordChangeSuccessReportTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeSuccessReportTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeSuccessReportTimestamp, true
}

// HasLastPasswordChangeSuccessReportTimestamp returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasLastPasswordChangeSuccessReportTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeSuccessReportTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeSuccessReportTimestamp field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetLastPasswordChangeSuccessReportTimestamp(v time.Time) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.LastPasswordChangeSuccessReportTimestamp = &v
	return o
}

// GetLastPasswordChangeSystemTimestamp returns the LastPasswordChangeSystemTimestamp field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeSystemTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeSystemTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeSystemTimestamp
}

// GetLastPasswordChangeSystemTimestampOk returns a tuple with the LastPasswordChangeSystemTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeSystemTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeSystemTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeSystemTimestamp, true
}

// HasLastPasswordChangeSystemTimestamp returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasLastPasswordChangeSystemTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeSystemTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeSystemTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeSystemTimestamp field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetLastPasswordChangeSystemTimestamp(v time.Time) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.LastPasswordChangeSystemTimestamp = &v
	return o
}

// GetLastPasswordChangeErrorReportTimestamp returns the LastPasswordChangeErrorReportTimestamp field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeErrorReportTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeErrorReportTimestamp
}

// GetLastPasswordChangeErrorReportTimestampOk returns a tuple with the LastPasswordChangeErrorReportTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeErrorReportTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeErrorReportTimestamp, true
}

// HasLastPasswordChangeErrorReportTimestamp returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasLastPasswordChangeErrorReportTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorReportTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeErrorReportTimestamp field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetLastPasswordChangeErrorReportTimestamp(v time.Time) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.LastPasswordChangeErrorReportTimestamp = &v
	return o
}

// GetLastPasswordChangeErrorSystemTimestamp returns the LastPasswordChangeErrorSystemTimestamp field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeErrorSystemTimestamp() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeErrorSystemTimestamp
}

// GetLastPasswordChangeErrorSystemTimestampOk returns a tuple with the LastPasswordChangeErrorSystemTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeErrorSystemTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		return nil, false
	}
	return o.LastPasswordChangeErrorSystemTimestamp, true
}

// HasLastPasswordChangeErrorSystemTimestamp returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasLastPasswordChangeErrorSystemTimestamp() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorSystemTimestamp gets a reference to the given time.Time and assigns it to the LastPasswordChangeErrorSystemTimestamp field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetLastPasswordChangeErrorSystemTimestamp(v time.Time) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.LastPasswordChangeErrorSystemTimestamp = &v
	return o
}

// GetLastPasswordChangeErrorType returns the LastPasswordChangeErrorType field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeErrorType() string {
	if o == nil || IsNil(o.LastPasswordChangeErrorType) {
		var ret string
		return ret
	}
	return *o.LastPasswordChangeErrorType
}

// GetLastPasswordChangeErrorTypeOk returns a tuple with the LastPasswordChangeErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeErrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorType) {
		return nil, false
	}
	return o.LastPasswordChangeErrorType, true
}

// HasLastPasswordChangeErrorType returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasLastPasswordChangeErrorType() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorType) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorType gets a reference to the given string and assigns it to the LastPasswordChangeErrorType field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetLastPasswordChangeErrorType(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.LastPasswordChangeErrorType = &v
	return o
}

// GetLastPasswordChangeErrorMetadata returns the LastPasswordChangeErrorMetadata field value if set, zero value otherwise.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeErrorMetadata() string {
	if o == nil || IsNil(o.LastPasswordChangeErrorMetadata) {
		var ret string
		return ret
	}
	return *o.LastPasswordChangeErrorMetadata
}

// GetLastPasswordChangeErrorMetadataOk returns a tuple with the LastPasswordChangeErrorMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) GetLastPasswordChangeErrorMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.LastPasswordChangeErrorMetadata) {
		return nil, false
	}
	return o.LastPasswordChangeErrorMetadata, true
}

// HasLastPasswordChangeErrorMetadata returns a boolean if a field has been set.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) HasLastPasswordChangeErrorMetadata() bool {
	if o != nil && !IsNil(o.LastPasswordChangeErrorMetadata) {
		return true
	}

	return false
}

// SetLastPasswordChangeErrorMetadata gets a reference to the given string and assigns it to the LastPasswordChangeErrorMetadata field.
func (o *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) SetLastPasswordChangeErrorMetadata(v string) *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	o.LastPasswordChangeErrorMetadata = &v
	return o
}

func (o ActiveDirectoryAccountWithPasswordAndCheckoutDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAccountWithPasswordAndCheckoutDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextScheduledPasswordRotationTimestamp) {
		toSerialize["next_scheduled_password_rotation_timestamp"] = o.NextScheduledPasswordRotationTimestamp
	}
	if !IsNil(o.NextScheduledPasswordRotationReason) {
		toSerialize["next_scheduled_password_rotation_reason"] = o.NextScheduledPasswordRotationReason
	}
	if !IsNil(o.CheckoutStatus) {
		toSerialize["checkout_status"] = o.CheckoutStatus
	}
	if !IsNil(o.LastCheckoutUser) {
		toSerialize["last_checkout_user"] = o.LastCheckoutUser
	}
	if !IsNil(o.CheckoutExpiryAt) {
		toSerialize["checkout_expiry_at"] = o.CheckoutExpiryAt
	}
	if !IsNil(o.AccountName) {
		toSerialize["account_name"] = o.AccountName
	}
	if !IsNil(o.AccountType) {
		toSerialize["account_type"] = o.AccountType
	}
	if !IsNil(o.MatchStatus) {
		toSerialize["match_status"] = o.MatchStatus
	}
	if !IsNil(o.LastRotationAt) {
		toSerialize["last_rotation_at"] = o.LastRotationAt
	}
	if !IsNil(o.BroughtUnderManagementAt) {
		toSerialize["brought_under_management_at"] = o.BroughtUnderManagementAt
	}
	if !IsNil(o.ResourceGroup) {
		toSerialize["resource_group"] = o.ResourceGroup
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.MatchedUser) {
		toSerialize["matched_user"] = o.MatchedUser
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.DistinguishedName) {
		toSerialize["distinguished_name"] = o.DistinguishedName
	}
	if !IsNil(o.Upn) {
		toSerialize["upn"] = o.Upn
	}
	if !IsNil(o.Sid) {
		toSerialize["sid"] = o.Sid
	}
	if !IsNil(o.SamAccountName) {
		toSerialize["sam_account_name"] = o.SamAccountName
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.AccountStatusDetail) {
		toSerialize["account_status_detail"] = o.AccountStatusDetail
	}
	if !IsNil(o.AccountStatusDetailMessage) {
		toSerialize["account_status_detail_message"] = o.AccountStatusDetailMessage
	}
	if !IsNil(o.PasswordChangeSuccessCount) {
		toSerialize["password_change_success_count"] = o.PasswordChangeSuccessCount
	}
	if !IsNil(o.PasswordChangeErrorCount) {
		toSerialize["password_change_error_count"] = o.PasswordChangeErrorCount
	}
	if !IsNil(o.PasswordChangeErrorCountSinceLastSuccess) {
		toSerialize["password_change_error_count_since_last_success"] = o.PasswordChangeErrorCountSinceLastSuccess
	}
	if !IsNil(o.LastPasswordChangeSuccessReportTimestamp) {
		toSerialize["last_password_change_success_report_timestamp"] = o.LastPasswordChangeSuccessReportTimestamp
	}
	if !IsNil(o.LastPasswordChangeSystemTimestamp) {
		toSerialize["last_password_change_system_timestamp"] = o.LastPasswordChangeSystemTimestamp
	}
	if !IsNil(o.LastPasswordChangeErrorReportTimestamp) {
		toSerialize["last_password_change_error_report_timestamp"] = o.LastPasswordChangeErrorReportTimestamp
	}
	if !IsNil(o.LastPasswordChangeErrorSystemTimestamp) {
		toSerialize["last_password_change_error_system_timestamp"] = o.LastPasswordChangeErrorSystemTimestamp
	}
	if !IsNil(o.LastPasswordChangeErrorType) {
		toSerialize["last_password_change_error_type"] = o.LastPasswordChangeErrorType
	}
	if !IsNil(o.LastPasswordChangeErrorMetadata) {
		toSerialize["last_password_change_error_metadata"] = o.LastPasswordChangeErrorMetadata
	}
	return toSerialize, nil
}

type NullableActiveDirectoryAccountWithPasswordAndCheckoutDetails struct {
	value *ActiveDirectoryAccountWithPasswordAndCheckoutDetails
	isSet bool
}

func (v NullableActiveDirectoryAccountWithPasswordAndCheckoutDetails) Get() *ActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	return v.value
}

func (v *NullableActiveDirectoryAccountWithPasswordAndCheckoutDetails) Set(val *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountWithPasswordAndCheckoutDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountWithPasswordAndCheckoutDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountWithPasswordAndCheckoutDetails(val *ActiveDirectoryAccountWithPasswordAndCheckoutDetails) *NullableActiveDirectoryAccountWithPasswordAndCheckoutDetails {
	return &NullableActiveDirectoryAccountWithPasswordAndCheckoutDetails{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountWithPasswordAndCheckoutDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountWithPasswordAndCheckoutDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
