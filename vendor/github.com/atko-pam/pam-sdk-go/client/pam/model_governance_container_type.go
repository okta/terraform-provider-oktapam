/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// GovernanceContainerType The type of container that encompasses specific resource types (used for governance)
type GovernanceContainerType string

// List of GovernanceContainerType
const (
	GovernanceContainerType_SAAS_APP_INSTANCE GovernanceContainerType = "saas_app_instance"
	GovernanceContainerType_GROUP             GovernanceContainerType = "group"
)

// All allowed values of GovernanceContainerType enum
var AllowedGovernanceContainerTypeEnumValues = []GovernanceContainerType{
	"saas_app_instance",
	"group",
}

func (v *GovernanceContainerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GovernanceContainerType(value)

	*v = enumTypeValue

	return nil
}

// NewGovernanceContainerTypeFromValue returns a pointer to a valid GovernanceContainerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGovernanceContainerTypeFromValue(v string) (*GovernanceContainerType, error) {
	ev := GovernanceContainerType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GovernanceContainerType) IsValid() bool {
	for _, existing := range AllowedGovernanceContainerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GovernanceContainerType value
func (v GovernanceContainerType) Ptr() *GovernanceContainerType {
	return &v
}

type NullableGovernanceContainerType struct {
	value *GovernanceContainerType
	isSet bool
}

func (v NullableGovernanceContainerType) Get() *GovernanceContainerType {
	return v.value
}

func (v *NullableGovernanceContainerType) Set(val *GovernanceContainerType) {
	v.value = val
	v.isSet = true
}

func (v NullableGovernanceContainerType) IsSet() bool {
	return v.isSet
}

func (v *NullableGovernanceContainerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGovernanceContainerType(val *GovernanceContainerType) *NullableGovernanceContainerType {
	return &NullableGovernanceContainerType{value: val, isSet: true}
}

func (v NullableGovernanceContainerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGovernanceContainerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
