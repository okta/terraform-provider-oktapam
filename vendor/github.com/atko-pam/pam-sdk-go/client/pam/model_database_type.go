/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// DatabaseType The type of Database Resource
type DatabaseType string

// List of DatabaseType
const (
	DatabaseType_MYSQL_LEVEL1 DatabaseType = "mysql.level1"
)

// All allowed values of DatabaseType enum
var AllowedDatabaseTypeEnumValues = []DatabaseType{
	"mysql.level1",
}

func (v *DatabaseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatabaseType(value)

	*v = enumTypeValue

	return nil
}

// NewDatabaseTypeFromValue returns a pointer to a valid DatabaseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatabaseTypeFromValue(v string) (*DatabaseType, error) {
	ev := DatabaseType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatabaseType) IsValid() bool {
	for _, existing := range AllowedDatabaseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatabaseType value
func (v DatabaseType) Ptr() *DatabaseType {
	return &v
}

type NullableDatabaseType struct {
	value *DatabaseType
	isSet bool
}

func (v NullableDatabaseType) Get() *DatabaseType {
	return v.value
}

func (v *NullableDatabaseType) Set(val *DatabaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseType(val *DatabaseType) *NullableDatabaseType {
	return &NullableDatabaseType{value: val, isSet: true}
}

func (v NullableDatabaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
