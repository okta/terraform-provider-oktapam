/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ReorderActiveDirectoryAccountRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReorderActiveDirectoryAccountRuleRequest{}

// ReorderActiveDirectoryAccountRuleRequest struct for ReorderActiveDirectoryAccountRuleRequest
type ReorderActiveDirectoryAccountRuleRequest struct {
	// The UUID of the Active Directory account rule
	RuleId *string `json:"rule_id,omitempty"`
	// Specify the new priority of the Active Directory account rule. Lower numbers have higher priority.
	Priority *int32 `json:"priority,omitempty"`
}

// NewReorderActiveDirectoryAccountRuleRequest instantiates a new ReorderActiveDirectoryAccountRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReorderActiveDirectoryAccountRuleRequest() *ReorderActiveDirectoryAccountRuleRequest {
	this := ReorderActiveDirectoryAccountRuleRequest{}
	return &this
}

// NewReorderActiveDirectoryAccountRuleRequestWithDefaults instantiates a new ReorderActiveDirectoryAccountRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReorderActiveDirectoryAccountRuleRequestWithDefaults() *ReorderActiveDirectoryAccountRuleRequest {
	this := ReorderActiveDirectoryAccountRuleRequest{}
	return &this
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *ReorderActiveDirectoryAccountRuleRequest) GetRuleId() string {
	if o == nil || IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReorderActiveDirectoryAccountRuleRequest) GetRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *ReorderActiveDirectoryAccountRuleRequest) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *ReorderActiveDirectoryAccountRuleRequest) SetRuleId(v string) *ReorderActiveDirectoryAccountRuleRequest {
	o.RuleId = &v
	return o
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ReorderActiveDirectoryAccountRuleRequest) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReorderActiveDirectoryAccountRuleRequest) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ReorderActiveDirectoryAccountRuleRequest) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *ReorderActiveDirectoryAccountRuleRequest) SetPriority(v int32) *ReorderActiveDirectoryAccountRuleRequest {
	o.Priority = &v
	return o
}

func (o ReorderActiveDirectoryAccountRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReorderActiveDirectoryAccountRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleId) {
		toSerialize["rule_id"] = o.RuleId
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableReorderActiveDirectoryAccountRuleRequest struct {
	value *ReorderActiveDirectoryAccountRuleRequest
	isSet bool
}

func (v NullableReorderActiveDirectoryAccountRuleRequest) Get() *ReorderActiveDirectoryAccountRuleRequest {
	return v.value
}

func (v *NullableReorderActiveDirectoryAccountRuleRequest) Set(val *ReorderActiveDirectoryAccountRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReorderActiveDirectoryAccountRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReorderActiveDirectoryAccountRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReorderActiveDirectoryAccountRuleRequest(val *ReorderActiveDirectoryAccountRuleRequest) *NullableReorderActiveDirectoryAccountRuleRequest {
	return &NullableReorderActiveDirectoryAccountRuleRequest{value: val, isSet: true}
}

func (v NullableReorderActiveDirectoryAccountRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReorderActiveDirectoryAccountRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
