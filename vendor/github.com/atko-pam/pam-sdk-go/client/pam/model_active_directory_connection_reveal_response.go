/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryConnectionRevealResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryConnectionRevealResponse{}

// ActiveDirectoryConnectionRevealResponse struct for ActiveDirectoryConnectionRevealResponse
type ActiveDirectoryConnectionRevealResponse struct {
	// The encrypted password of the service account
	ServiceAccountPasswordJwe *EncryptedString `json:"service_account_password_jwe,omitempty"`
}

// NewActiveDirectoryConnectionRevealResponse instantiates a new ActiveDirectoryConnectionRevealResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryConnectionRevealResponse() *ActiveDirectoryConnectionRevealResponse {
	this := ActiveDirectoryConnectionRevealResponse{}
	return &this
}

// NewActiveDirectoryConnectionRevealResponseWithDefaults instantiates a new ActiveDirectoryConnectionRevealResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryConnectionRevealResponseWithDefaults() *ActiveDirectoryConnectionRevealResponse {
	this := ActiveDirectoryConnectionRevealResponse{}
	return &this
}

// GetServiceAccountPasswordJwe returns the ServiceAccountPasswordJwe field value if set, zero value otherwise.
func (o *ActiveDirectoryConnectionRevealResponse) GetServiceAccountPasswordJwe() EncryptedString {
	if o == nil || IsNil(o.ServiceAccountPasswordJwe) {
		var ret EncryptedString
		return ret
	}
	return *o.ServiceAccountPasswordJwe
}

// GetServiceAccountPasswordJweOk returns a tuple with the ServiceAccountPasswordJwe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryConnectionRevealResponse) GetServiceAccountPasswordJweOk() (*EncryptedString, bool) {
	if o == nil || IsNil(o.ServiceAccountPasswordJwe) {
		return nil, false
	}
	return o.ServiceAccountPasswordJwe, true
}

// HasServiceAccountPasswordJwe returns a boolean if a field has been set.
func (o *ActiveDirectoryConnectionRevealResponse) HasServiceAccountPasswordJwe() bool {
	if o != nil && !IsNil(o.ServiceAccountPasswordJwe) {
		return true
	}

	return false
}

// SetServiceAccountPasswordJwe gets a reference to the given EncryptedString and assigns it to the ServiceAccountPasswordJwe field.
func (o *ActiveDirectoryConnectionRevealResponse) SetServiceAccountPasswordJwe(v EncryptedString) *ActiveDirectoryConnectionRevealResponse {
	o.ServiceAccountPasswordJwe = &v
	return o
}

func (o ActiveDirectoryConnectionRevealResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryConnectionRevealResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceAccountPasswordJwe) {
		toSerialize["service_account_password_jwe"] = o.ServiceAccountPasswordJwe
	}
	return toSerialize, nil
}

type NullableActiveDirectoryConnectionRevealResponse struct {
	value *ActiveDirectoryConnectionRevealResponse
	isSet bool
}

func (v NullableActiveDirectoryConnectionRevealResponse) Get() *ActiveDirectoryConnectionRevealResponse {
	return v.value
}

func (v *NullableActiveDirectoryConnectionRevealResponse) Set(val *ActiveDirectoryConnectionRevealResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryConnectionRevealResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryConnectionRevealResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryConnectionRevealResponse(val *ActiveDirectoryConnectionRevealResponse) *NullableActiveDirectoryConnectionRevealResponse {
	return &NullableActiveDirectoryConnectionRevealResponse{value: val, isSet: true}
}

func (v NullableActiveDirectoryConnectionRevealResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryConnectionRevealResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
