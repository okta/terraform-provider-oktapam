/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// SecurityPolicyActiveDirectoryServersSubSelector - The specific parameters used to target resources. The organization of this object depends on the `selector_type`.
type SecurityPolicyActiveDirectoryServersSubSelector struct {
	SelectorActiveDirectoryServerLabel *SelectorActiveDirectoryServerLabel
	SelectorIndividualServer           *SelectorIndividualServer
}

// SelectorActiveDirectoryServerLabelAsSecurityPolicyActiveDirectoryServersSubSelector is a convenience function that returns SelectorActiveDirectoryServerLabel wrapped in SecurityPolicyActiveDirectoryServersSubSelector
func SelectorActiveDirectoryServerLabelAsSecurityPolicyActiveDirectoryServersSubSelector(v *SelectorActiveDirectoryServerLabel) SecurityPolicyActiveDirectoryServersSubSelector {
	return SecurityPolicyActiveDirectoryServersSubSelector{
		SelectorActiveDirectoryServerLabel: v,
	}
}

// SelectorIndividualServerAsSecurityPolicyActiveDirectoryServersSubSelector is a convenience function that returns SelectorIndividualServer wrapped in SecurityPolicyActiveDirectoryServersSubSelector
func SelectorIndividualServerAsSecurityPolicyActiveDirectoryServersSubSelector(v *SelectorIndividualServer) SecurityPolicyActiveDirectoryServersSubSelector {
	return SecurityPolicyActiveDirectoryServersSubSelector{
		SelectorIndividualServer: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecurityPolicyActiveDirectoryServersSubSelector) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'SelectorActiveDirectoryServerLabel'
	if jsonDict["_type"] == "SelectorActiveDirectoryServerLabel" {
		// try to unmarshal JSON data into SelectorActiveDirectoryServerLabel
		err = json.Unmarshal(data, &dst.SelectorActiveDirectoryServerLabel)
		if err == nil {
			return nil // data stored in dst.SelectorActiveDirectoryServerLabel, return on the first match
		} else {
			dst.SelectorActiveDirectoryServerLabel = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicyActiveDirectoryServersSubSelector as SelectorActiveDirectoryServerLabel: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SelectorIndividualServer'
	if jsonDict["_type"] == "SelectorIndividualServer" {
		// try to unmarshal JSON data into SelectorIndividualServer
		err = json.Unmarshal(data, &dst.SelectorIndividualServer)
		if err == nil {
			return nil // data stored in dst.SelectorIndividualServer, return on the first match
		} else {
			dst.SelectorIndividualServer = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicyActiveDirectoryServersSubSelector as SelectorIndividualServer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'individual_server'
	if jsonDict["_type"] == "individual_server" {
		// try to unmarshal JSON data into SelectorIndividualServer
		err = json.Unmarshal(data, &dst.SelectorIndividualServer)
		if err == nil {
			return nil // data stored in dst.SelectorIndividualServer, return on the first match
		} else {
			dst.SelectorIndividualServer = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicyActiveDirectoryServersSubSelector as SelectorIndividualServer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'server_label'
	if jsonDict["_type"] == "server_label" {
		// try to unmarshal JSON data into SelectorActiveDirectoryServerLabel
		err = json.Unmarshal(data, &dst.SelectorActiveDirectoryServerLabel)
		if err == nil {
			return nil // data stored in dst.SelectorActiveDirectoryServerLabel, return on the first match
		} else {
			dst.SelectorActiveDirectoryServerLabel = nil
			return fmt.Errorf("failed to unmarshal SecurityPolicyActiveDirectoryServersSubSelector as SelectorActiveDirectoryServerLabel: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecurityPolicyActiveDirectoryServersSubSelector) MarshalJSON() ([]byte, error) {
	if src.SelectorActiveDirectoryServerLabel != nil {
		return json.Marshal(&src.SelectorActiveDirectoryServerLabel)
	}

	if src.SelectorIndividualServer != nil {
		return json.Marshal(&src.SelectorIndividualServer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecurityPolicyActiveDirectoryServersSubSelector) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SelectorActiveDirectoryServerLabel != nil {
		return obj.SelectorActiveDirectoryServerLabel
	}

	if obj.SelectorIndividualServer != nil {
		return obj.SelectorIndividualServer
	}

	// all schemas are nil
	return nil
}

type NullableSecurityPolicyActiveDirectoryServersSubSelector struct {
	value *SecurityPolicyActiveDirectoryServersSubSelector
	isSet bool
}

func (v NullableSecurityPolicyActiveDirectoryServersSubSelector) Get() *SecurityPolicyActiveDirectoryServersSubSelector {
	return v.value
}

func (v *NullableSecurityPolicyActiveDirectoryServersSubSelector) Set(val *SecurityPolicyActiveDirectoryServersSubSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyActiveDirectoryServersSubSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyActiveDirectoryServersSubSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyActiveDirectoryServersSubSelector(val *SecurityPolicyActiveDirectoryServersSubSelector) *NullableSecurityPolicyActiveDirectoryServersSubSelector {
	return &NullableSecurityPolicyActiveDirectoryServersSubSelector{value: val, isSet: true}
}

func (v NullableSecurityPolicyActiveDirectoryServersSubSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyActiveDirectoryServersSubSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
