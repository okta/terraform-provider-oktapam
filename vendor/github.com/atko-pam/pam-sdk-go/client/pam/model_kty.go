/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// Kty The key type
type Kty string

// List of kty
const (
	Kty_EC  Kty = "EC"
	Kty_RSA Kty = "RSA"
	Kty_OCT Kty = "oct"
	Kty_OKP Kty = "OKP"
)

// All allowed values of Kty enum
var AllowedKtyEnumValues = []Kty{
	"EC",
	"RSA",
	"oct",
	"OKP",
}

func (v *Kty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Kty(value)

	*v = enumTypeValue

	return nil
}

// NewKtyFromValue returns a pointer to a valid Kty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKtyFromValue(v string) (*Kty, error) {
	ev := Kty(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Kty) IsValid() bool {
	for _, existing := range AllowedKtyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to kty value
func (v Kty) Ptr() *Kty {
	return &v
}

type NullableKty struct {
	value *Kty
	isSet bool
}

func (v NullableKty) Get() *Kty {
	return v.value
}

func (v *NullableKty) Set(val *Kty) {
	v.value = val
	v.isSet = true
}

func (v NullableKty) IsSet() bool {
	return v.isSet
}

func (v *NullableKty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKty(val *Kty) *NullableKty {
	return &NullableKty{value: val, isSet: true}
}

func (v NullableKty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
