/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ReportsAPIService ReportsAPI service
type ReportsAPIService service

type ApiCreateAccessReportRequest struct {
	ctx                      context.Context
	ApiService               *ReportsAPIService
	teamName                 string
	accessReportCreateTarget *AccessReportCreateTarget
}

func (r ApiCreateAccessReportRequest) AccessReportCreateTarget(accessReportCreateTarget AccessReportCreateTarget) ApiCreateAccessReportRequest {
	r.accessReportCreateTarget = &accessReportCreateTarget
	return r
}

func (r ApiCreateAccessReportRequest) Execute() (*AccessReport, *http.Response, error) {
	return r.ApiService.CreateAccessReportExecute(r)
}

/*
CreateAccessReport Create an access report

	Create an access report. Each report must be connected to a specific user or resource.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team

@return ApiCreateAccessReportRequest
*/
func (a *ReportsAPIService) CreateAccessReport(ctx context.Context, teamName string) ApiCreateAccessReportRequest {
	return ApiCreateAccessReportRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return AccessReport
func (a *ReportsAPIService) CreateAccessReportExecute(r ApiCreateAccessReportRequest) (*AccessReport, *http.Response, error) {
	var (
		traceKey            = "reportsapi.createAccessReport"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AccessReport
	)

	localVarPath := "/v1/teams/{team_name}/access_reports"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accessReportCreateTarget
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiDownloadAccessReportRequest struct {
	ctx            context.Context
	ApiService     *ReportsAPIService
	teamName       string
	accessReportId string
}

func (r ApiDownloadAccessReportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.DownloadAccessReportExecute(r)
}

/*
DownloadAccessReport Download an access report

	Downloads the specific access report for review. The CSV formatted report is included in the response.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param accessReportId The UUID of an access report

@return ApiDownloadAccessReportRequest
*/
func (a *ReportsAPIService) DownloadAccessReport(ctx context.Context, teamName string, accessReportId string) ApiDownloadAccessReportRequest {
	return ApiDownloadAccessReportRequest{
		ApiService:     a,
		ctx:            ctx,
		teamName:       teamName,
		accessReportId: accessReportId,
	}
}

// Execute executes the request
//
//	@return string
func (a *ReportsAPIService) DownloadAccessReportExecute(r ApiDownloadAccessReportRequest) (string, *http.Response, error) {
	var (
		traceKey            = "reportsapi.downloadAccessReport"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localVarPath := "/v1/teams/{team_name}/access_reports/{access_report_id}/report"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_report_id"+"}", url.PathEscape(parameterValueToString(r.accessReportId, "accessReportId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiGetAccessReportRequest struct {
	ctx            context.Context
	ApiService     *ReportsAPIService
	teamName       string
	accessReportId string
}

func (r ApiGetAccessReportRequest) Execute() (*AccessReport, *http.Response, error) {
	return r.ApiService.GetAccessReportExecute(r)
}

/*
GetAccessReport Retrieve an access report

	Retrieve the metadata of the specified access report

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team
	@param accessReportId The UUID of an access report

@return ApiGetAccessReportRequest
*/
func (a *ReportsAPIService) GetAccessReport(ctx context.Context, teamName string, accessReportId string) ApiGetAccessReportRequest {
	return ApiGetAccessReportRequest{
		ApiService:     a,
		ctx:            ctx,
		teamName:       teamName,
		accessReportId: accessReportId,
	}
}

// Execute executes the request
//
//	@return AccessReport
func (a *ReportsAPIService) GetAccessReportExecute(r ApiGetAccessReportRequest) (*AccessReport, *http.Response, error) {
	var (
		traceKey            = "reportsapi.getAccessReport"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AccessReport
	)

	localVarPath := "/v1/teams/{team_name}/access_reports/{access_report_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"access_report_id"+"}", url.PathEscape(parameterValueToString(r.accessReportId, "accessReportId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListAccessReportsRequest struct {
	ctx        context.Context
	ApiService *ReportsAPIService
	teamName   string
}

func (r ApiListAccessReportsRequest) Execute() (*ListAccessReportsResponse, *http.Response, error) {
	return r.ApiService.ListAccessReportsExecute(r)
}

/*
ListAccessReports List all access reports

	Lists all access reports

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param teamName The name of your team

@return ApiListAccessReportsRequest
*/
func (a *ReportsAPIService) ListAccessReports(ctx context.Context, teamName string) ApiListAccessReportsRequest {
	return ApiListAccessReportsRequest{
		ApiService: a,
		ctx:        ctx,
		teamName:   teamName,
	}
}

// Execute executes the request
//
//	@return ListAccessReportsResponse
func (a *ReportsAPIService) ListAccessReportsExecute(r ApiListAccessReportsRequest) (*ListAccessReportsResponse, *http.Response, error) {
	var (
		traceKey            = "reportsapi.listAccessReports"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListAccessReportsResponse
	)

	localVarPath := "/v1/teams/{team_name}/access_reports"
	localVarPath = strings.Replace(localVarPath, "{"+"team_name"+"}", url.PathEscape(parameterValueToString(r.teamName, "teamName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if err != nil {
		if localVarHTTPResponse == nil {
			return localVarReturnValue, nil, err
		}

		// read and unmarshal error response into right struct
		bodyBytes, err := io.ReadAll(localVarHTTPResponse.Body)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		if err := localVarHTTPResponse.Body.Close(); err != nil {
			return localVarReturnValue, nil, err
		}
		localVarHTTPResponse.Body = io.NopCloser(bytes.NewReader(bodyBytes)) //Reset body for the caller
		var apiError APIError
		if err := json.Unmarshal(bodyBytes, &apiError); err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
		return localVarReturnValue, localVarHTTPResponse, apiError
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
