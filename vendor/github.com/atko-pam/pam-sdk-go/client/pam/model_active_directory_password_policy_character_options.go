/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectoryPasswordPolicyCharacterOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryPasswordPolicyCharacterOptions{}

// ActiveDirectoryPasswordPolicyCharacterOptions The specific characters rules required by the password policy
type ActiveDirectoryPasswordPolicyCharacterOptions struct {
	// If `true`, passwords can include one or more uppercase characters
	UpperCase *bool `json:"upper_case,omitempty"`
	// If `true`, passwords can include one or more lowercase characters
	LowerCase *bool `json:"lower_case,omitempty"`
	// If `true`, passwords can include one or more numbers
	Digits *bool `json:"digits,omitempty"`
	// If `true`, passwords can include one or more symbols
	Punctuation *bool `json:"punctuation,omitempty"`
	// If `true`, passwords must contain at least one character from each selected rule in the `character_options`
	RequireFromEachSet *bool `json:"require_from_each_set,omitempty"`
	// A string of symbols to exclude from the set of allowed punctuation. This field is only applicable if `punctuation` is set to `true`.
	ExcludeCertainSymbols []string `json:"exclude_certain_symbols,omitempty"`
}

// NewActiveDirectoryPasswordPolicyCharacterOptions instantiates a new ActiveDirectoryPasswordPolicyCharacterOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryPasswordPolicyCharacterOptions() *ActiveDirectoryPasswordPolicyCharacterOptions {
	this := ActiveDirectoryPasswordPolicyCharacterOptions{}
	return &this
}

// NewActiveDirectoryPasswordPolicyCharacterOptionsWithDefaults instantiates a new ActiveDirectoryPasswordPolicyCharacterOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryPasswordPolicyCharacterOptionsWithDefaults() *ActiveDirectoryPasswordPolicyCharacterOptions {
	this := ActiveDirectoryPasswordPolicyCharacterOptions{}
	return &this
}

// GetUpperCase returns the UpperCase field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetUpperCase() bool {
	if o == nil || IsNil(o.UpperCase) {
		var ret bool
		return ret
	}
	return *o.UpperCase
}

// GetUpperCaseOk returns a tuple with the UpperCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetUpperCaseOk() (*bool, bool) {
	if o == nil || IsNil(o.UpperCase) {
		return nil, false
	}
	return o.UpperCase, true
}

// HasUpperCase returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) HasUpperCase() bool {
	if o != nil && !IsNil(o.UpperCase) {
		return true
	}

	return false
}

// SetUpperCase gets a reference to the given bool and assigns it to the UpperCase field.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) SetUpperCase(v bool) *ActiveDirectoryPasswordPolicyCharacterOptions {
	o.UpperCase = &v
	return o
}

// GetLowerCase returns the LowerCase field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetLowerCase() bool {
	if o == nil || IsNil(o.LowerCase) {
		var ret bool
		return ret
	}
	return *o.LowerCase
}

// GetLowerCaseOk returns a tuple with the LowerCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetLowerCaseOk() (*bool, bool) {
	if o == nil || IsNil(o.LowerCase) {
		return nil, false
	}
	return o.LowerCase, true
}

// HasLowerCase returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) HasLowerCase() bool {
	if o != nil && !IsNil(o.LowerCase) {
		return true
	}

	return false
}

// SetLowerCase gets a reference to the given bool and assigns it to the LowerCase field.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) SetLowerCase(v bool) *ActiveDirectoryPasswordPolicyCharacterOptions {
	o.LowerCase = &v
	return o
}

// GetDigits returns the Digits field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetDigits() bool {
	if o == nil || IsNil(o.Digits) {
		var ret bool
		return ret
	}
	return *o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetDigitsOk() (*bool, bool) {
	if o == nil || IsNil(o.Digits) {
		return nil, false
	}
	return o.Digits, true
}

// HasDigits returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) HasDigits() bool {
	if o != nil && !IsNil(o.Digits) {
		return true
	}

	return false
}

// SetDigits gets a reference to the given bool and assigns it to the Digits field.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) SetDigits(v bool) *ActiveDirectoryPasswordPolicyCharacterOptions {
	o.Digits = &v
	return o
}

// GetPunctuation returns the Punctuation field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetPunctuation() bool {
	if o == nil || IsNil(o.Punctuation) {
		var ret bool
		return ret
	}
	return *o.Punctuation
}

// GetPunctuationOk returns a tuple with the Punctuation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetPunctuationOk() (*bool, bool) {
	if o == nil || IsNil(o.Punctuation) {
		return nil, false
	}
	return o.Punctuation, true
}

// HasPunctuation returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) HasPunctuation() bool {
	if o != nil && !IsNil(o.Punctuation) {
		return true
	}

	return false
}

// SetPunctuation gets a reference to the given bool and assigns it to the Punctuation field.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) SetPunctuation(v bool) *ActiveDirectoryPasswordPolicyCharacterOptions {
	o.Punctuation = &v
	return o
}

// GetRequireFromEachSet returns the RequireFromEachSet field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetRequireFromEachSet() bool {
	if o == nil || IsNil(o.RequireFromEachSet) {
		var ret bool
		return ret
	}
	return *o.RequireFromEachSet
}

// GetRequireFromEachSetOk returns a tuple with the RequireFromEachSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetRequireFromEachSetOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireFromEachSet) {
		return nil, false
	}
	return o.RequireFromEachSet, true
}

// HasRequireFromEachSet returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) HasRequireFromEachSet() bool {
	if o != nil && !IsNil(o.RequireFromEachSet) {
		return true
	}

	return false
}

// SetRequireFromEachSet gets a reference to the given bool and assigns it to the RequireFromEachSet field.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) SetRequireFromEachSet(v bool) *ActiveDirectoryPasswordPolicyCharacterOptions {
	o.RequireFromEachSet = &v
	return o
}

// GetExcludeCertainSymbols returns the ExcludeCertainSymbols field value if set, zero value otherwise.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetExcludeCertainSymbols() []string {
	if o == nil || IsNil(o.ExcludeCertainSymbols) {
		var ret []string
		return ret
	}
	return o.ExcludeCertainSymbols
}

// GetExcludeCertainSymbolsOk returns a tuple with the ExcludeCertainSymbols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) GetExcludeCertainSymbolsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeCertainSymbols) {
		return nil, false
	}
	return o.ExcludeCertainSymbols, true
}

// HasExcludeCertainSymbols returns a boolean if a field has been set.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) HasExcludeCertainSymbols() bool {
	if o != nil && !IsNil(o.ExcludeCertainSymbols) {
		return true
	}

	return false
}

// SetExcludeCertainSymbols gets a reference to the given []string and assigns it to the ExcludeCertainSymbols field.
func (o *ActiveDirectoryPasswordPolicyCharacterOptions) SetExcludeCertainSymbols(v []string) *ActiveDirectoryPasswordPolicyCharacterOptions {
	o.ExcludeCertainSymbols = v
	return o
}

func (o ActiveDirectoryPasswordPolicyCharacterOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryPasswordPolicyCharacterOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpperCase) {
		toSerialize["upper_case"] = o.UpperCase
	}
	if !IsNil(o.LowerCase) {
		toSerialize["lower_case"] = o.LowerCase
	}
	if !IsNil(o.Digits) {
		toSerialize["digits"] = o.Digits
	}
	if !IsNil(o.Punctuation) {
		toSerialize["punctuation"] = o.Punctuation
	}
	if !IsNil(o.RequireFromEachSet) {
		toSerialize["require_from_each_set"] = o.RequireFromEachSet
	}
	if !IsNil(o.ExcludeCertainSymbols) {
		toSerialize["exclude_certain_symbols"] = o.ExcludeCertainSymbols
	}
	return toSerialize, nil
}

type NullableActiveDirectoryPasswordPolicyCharacterOptions struct {
	value *ActiveDirectoryPasswordPolicyCharacterOptions
	isSet bool
}

func (v NullableActiveDirectoryPasswordPolicyCharacterOptions) Get() *ActiveDirectoryPasswordPolicyCharacterOptions {
	return v.value
}

func (v *NullableActiveDirectoryPasswordPolicyCharacterOptions) Set(val *ActiveDirectoryPasswordPolicyCharacterOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryPasswordPolicyCharacterOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryPasswordPolicyCharacterOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryPasswordPolicyCharacterOptions(val *ActiveDirectoryPasswordPolicyCharacterOptions) *NullableActiveDirectoryPasswordPolicyCharacterOptions {
	return &NullableActiveDirectoryPasswordPolicyCharacterOptions{value: val, isSet: true}
}

func (v NullableActiveDirectoryPasswordPolicyCharacterOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryPasswordPolicyCharacterOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
