/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// SecurityPolicyRuleConditionType The type of condition
type SecurityPolicyRuleConditionType string

// List of SecurityPolicyRuleConditionType
const (
	SecurityPolicyRuleConditionType_ACCESS_REQUEST SecurityPolicyRuleConditionType = "access_request"
	SecurityPolicyRuleConditionType_GATEWAY        SecurityPolicyRuleConditionType = "gateway"
	SecurityPolicyRuleConditionType_MFA            SecurityPolicyRuleConditionType = "mfa"
)

// All allowed values of SecurityPolicyRuleConditionType enum
var AllowedSecurityPolicyRuleConditionTypeEnumValues = []SecurityPolicyRuleConditionType{
	"access_request",
	"gateway",
	"mfa",
}

func (v *SecurityPolicyRuleConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecurityPolicyRuleConditionType(value)

	*v = enumTypeValue

	return nil
}

// NewSecurityPolicyRuleConditionTypeFromValue returns a pointer to a valid SecurityPolicyRuleConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecurityPolicyRuleConditionTypeFromValue(v string) (*SecurityPolicyRuleConditionType, error) {
	ev := SecurityPolicyRuleConditionType(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecurityPolicyRuleConditionType) IsValid() bool {
	for _, existing := range AllowedSecurityPolicyRuleConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecurityPolicyRuleConditionType value
func (v SecurityPolicyRuleConditionType) Ptr() *SecurityPolicyRuleConditionType {
	return &v
}

type NullableSecurityPolicyRuleConditionType struct {
	value *SecurityPolicyRuleConditionType
	isSet bool
}

func (v NullableSecurityPolicyRuleConditionType) Get() *SecurityPolicyRuleConditionType {
	return v.value
}

func (v *NullableSecurityPolicyRuleConditionType) Set(val *SecurityPolicyRuleConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyRuleConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyRuleConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyRuleConditionType(val *SecurityPolicyRuleConditionType) *NullableSecurityPolicyRuleConditionType {
	return &NullableSecurityPolicyRuleConditionType{value: val, isSet: true}
}

func (v NullableSecurityPolicyRuleConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyRuleConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
