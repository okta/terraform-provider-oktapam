/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the GovernanceUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GovernanceUser{}

// GovernanceUser struct for GovernanceUser
type GovernanceUser struct {
	// The external Okta user ID
	Id *string `json:"id,omitempty"`
	// The name of the user
	Name *string `json:"name,omitempty"`
	// The email associated with the user
	Email NullableString `json:"email,omitempty"`
	// The type of resource (used for governance)
	ResourceType string `json:"resourceType"`
}

// NewGovernanceUser instantiates a new GovernanceUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGovernanceUser(resourceType string) *GovernanceUser {
	this := GovernanceUser{}
	this.ResourceType = resourceType
	return &this
}

// NewGovernanceUserWithDefaults instantiates a new GovernanceUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGovernanceUserWithDefaults() *GovernanceUser {
	this := GovernanceUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GovernanceUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GovernanceUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GovernanceUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GovernanceUser) SetId(v string) *GovernanceUser {
	o.Id = &v
	return o
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GovernanceUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GovernanceUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GovernanceUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GovernanceUser) SetName(v string) *GovernanceUser {
	o.Name = &v
	return o
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GovernanceUser) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GovernanceUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *GovernanceUser) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *GovernanceUser) SetEmail(v string) *GovernanceUser {
	o.Email.Set(&v)
	return o
}

// SetEmailNil sets the value for Email to be an explicit nil
func (o *GovernanceUser) SetEmailNil() *GovernanceUser {
	o.Email.Set(nil)
	return o
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *GovernanceUser) UnsetEmail() *GovernanceUser {
	o.Email.Unset()
	return o
}

// GetResourceType returns the ResourceType field value
func (o *GovernanceUser) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *GovernanceUser) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *GovernanceUser) SetResourceType(v string) *GovernanceUser {
	o.ResourceType = v
	return o
}

func (o GovernanceUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GovernanceUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	toSerialize["resourceType"] = o.ResourceType
	return toSerialize, nil
}

type NullableGovernanceUser struct {
	value *GovernanceUser
	isSet bool
}

func (v NullableGovernanceUser) Get() *GovernanceUser {
	return v.value
}

func (v *NullableGovernanceUser) Set(val *GovernanceUser) {
	v.value = val
	v.isSet = true
}

func (v NullableGovernanceUser) IsSet() bool {
	return v.isSet
}

func (v *NullableGovernanceUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGovernanceUser(val *GovernanceUser) *NullableGovernanceUser {
	return &NullableGovernanceUser{value: val, isSet: true}
}

func (v NullableGovernanceUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGovernanceUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
