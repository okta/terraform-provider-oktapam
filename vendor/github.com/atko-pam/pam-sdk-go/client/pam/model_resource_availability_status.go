/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// ResourceAvailabilityStatus The availability status of the resource
type ResourceAvailabilityStatus string

// List of ResourceAvailabilityStatus
const (
	ResourceAvailabilityStatus_CHECKED_OUT         ResourceAvailabilityStatus = "checked_out"
	ResourceAvailabilityStatus_IN_PROGRESS_CHECKIN ResourceAvailabilityStatus = "in_progress_checkin"
	ResourceAvailabilityStatus_CHECKIN_COMPLETE    ResourceAvailabilityStatus = "checkin_complete"
	ResourceAvailabilityStatus_CHECKIN_FAILED      ResourceAvailabilityStatus = "checkin_failed"
)

// All allowed values of ResourceAvailabilityStatus enum
var AllowedResourceAvailabilityStatusEnumValues = []ResourceAvailabilityStatus{
	"checked_out",
	"in_progress_checkin",
	"checkin_complete",
	"checkin_failed",
}

func (v *ResourceAvailabilityStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceAvailabilityStatus(value)

	*v = enumTypeValue

	return nil
}

// NewResourceAvailabilityStatusFromValue returns a pointer to a valid ResourceAvailabilityStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceAvailabilityStatusFromValue(v string) (*ResourceAvailabilityStatus, error) {
	ev := ResourceAvailabilityStatus(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceAvailabilityStatus) IsValid() bool {
	for _, existing := range AllowedResourceAvailabilityStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceAvailabilityStatus value
func (v ResourceAvailabilityStatus) Ptr() *ResourceAvailabilityStatus {
	return &v
}

type NullableResourceAvailabilityStatus struct {
	value *ResourceAvailabilityStatus
	isSet bool
}

func (v NullableResourceAvailabilityStatus) Get() *ResourceAvailabilityStatus {
	return v.value
}

func (v *NullableResourceAvailabilityStatus) Set(val *ResourceAvailabilityStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceAvailabilityStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceAvailabilityStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceAvailabilityStatus(val *ResourceAvailabilityStatus) *NullableResourceAvailabilityStatus {
	return &NullableResourceAvailabilityStatus{value: val, isSet: true}
}

func (v NullableResourceAvailabilityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceAvailabilityStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
