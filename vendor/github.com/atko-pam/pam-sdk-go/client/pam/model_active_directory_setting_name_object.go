/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ActiveDirectorySettingNameObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectorySettingNameObject{}

// ActiveDirectorySettingNameObject struct for ActiveDirectorySettingNameObject
type ActiveDirectorySettingNameObject struct {
	// The domain of the selected Active Directory account
	Domain string `json:"domain"`
	// The security identifier (SID) of the selected Active Directory account
	AccountSid string `json:"account_sid"`
	// The name of the Active Directory account
	AccountName *string `json:"account_name,omitempty"`
	// Indicates if the selected Active Directory account isn't found
	Missing *bool `json:"missing,omitempty"`
}

// NewActiveDirectorySettingNameObject instantiates a new ActiveDirectorySettingNameObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectorySettingNameObject(domain string, accountSid string) *ActiveDirectorySettingNameObject {
	this := ActiveDirectorySettingNameObject{}
	this.Domain = domain
	this.AccountSid = accountSid
	return &this
}

// NewActiveDirectorySettingNameObjectWithDefaults instantiates a new ActiveDirectorySettingNameObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectorySettingNameObjectWithDefaults() *ActiveDirectorySettingNameObject {
	this := ActiveDirectorySettingNameObject{}
	return &this
}

// GetDomain returns the Domain field value
func (o *ActiveDirectorySettingNameObject) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectorySettingNameObject) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ActiveDirectorySettingNameObject) SetDomain(v string) *ActiveDirectorySettingNameObject {
	o.Domain = v
	return o
}

// GetAccountSid returns the AccountSid field value
func (o *ActiveDirectorySettingNameObject) GetAccountSid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountSid
}

// GetAccountSidOk returns a tuple with the AccountSid field value
// and a boolean to check if the value has been set.
func (o *ActiveDirectorySettingNameObject) GetAccountSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountSid, true
}

// SetAccountSid sets field value
func (o *ActiveDirectorySettingNameObject) SetAccountSid(v string) *ActiveDirectorySettingNameObject {
	o.AccountSid = v
	return o
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *ActiveDirectorySettingNameObject) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectorySettingNameObject) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *ActiveDirectorySettingNameObject) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *ActiveDirectorySettingNameObject) SetAccountName(v string) *ActiveDirectorySettingNameObject {
	o.AccountName = &v
	return o
}

// GetMissing returns the Missing field value if set, zero value otherwise.
func (o *ActiveDirectorySettingNameObject) GetMissing() bool {
	if o == nil || IsNil(o.Missing) {
		var ret bool
		return ret
	}
	return *o.Missing
}

// GetMissingOk returns a tuple with the Missing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectorySettingNameObject) GetMissingOk() (*bool, bool) {
	if o == nil || IsNil(o.Missing) {
		return nil, false
	}
	return o.Missing, true
}

// HasMissing returns a boolean if a field has been set.
func (o *ActiveDirectorySettingNameObject) HasMissing() bool {
	if o != nil && !IsNil(o.Missing) {
		return true
	}

	return false
}

// SetMissing gets a reference to the given bool and assigns it to the Missing field.
func (o *ActiveDirectorySettingNameObject) SetMissing(v bool) *ActiveDirectorySettingNameObject {
	o.Missing = &v
	return o
}

func (o ActiveDirectorySettingNameObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectorySettingNameObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["account_sid"] = o.AccountSid
	if !IsNil(o.AccountName) {
		toSerialize["account_name"] = o.AccountName
	}
	if !IsNil(o.Missing) {
		toSerialize["missing"] = o.Missing
	}
	return toSerialize, nil
}

type NullableActiveDirectorySettingNameObject struct {
	value *ActiveDirectorySettingNameObject
	isSet bool
}

func (v NullableActiveDirectorySettingNameObject) Get() *ActiveDirectorySettingNameObject {
	return v.value
}

func (v *NullableActiveDirectorySettingNameObject) Set(val *ActiveDirectorySettingNameObject) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectorySettingNameObject) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectorySettingNameObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectorySettingNameObject(val *ActiveDirectorySettingNameObject) *NullableActiveDirectorySettingNameObject {
	return &NullableActiveDirectorySettingNameObject{value: val, isSet: true}
}

func (v NullableActiveDirectorySettingNameObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectorySettingNameObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
