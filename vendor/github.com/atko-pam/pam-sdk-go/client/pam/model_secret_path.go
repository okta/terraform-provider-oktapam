/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecretPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretPath{}

// SecretPath struct for SecretPath
type SecretPath struct {
	// The UUID of the Secret
	Id string `json:"id"`
	// The name of the Secret
	Name string `json:"name"`
}

// NewSecretPath instantiates a new SecretPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretPath(id string, name string) *SecretPath {
	this := SecretPath{}
	this.Id = id
	this.Name = name
	return &this
}

// NewSecretPathWithDefaults instantiates a new SecretPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretPathWithDefaults() *SecretPath {
	this := SecretPath{}
	return &this
}

// GetId returns the Id field value
func (o *SecretPath) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SecretPath) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SecretPath) SetId(v string) *SecretPath {
	o.Id = v
	return o
}

// GetName returns the Name field value
func (o *SecretPath) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecretPath) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SecretPath) SetName(v string) *SecretPath {
	o.Name = v
	return o
}

func (o SecretPath) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableSecretPath struct {
	value *SecretPath
	isSet bool
}

func (v NullableSecretPath) Get() *SecretPath {
	return v.value
}

func (v *NullableSecretPath) Set(val *SecretPath) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretPath) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretPath(val *SecretPath) *NullableSecretPath {
	return &NullableSecretPath{value: val, isSet: true}
}

func (v NullableSecretPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
