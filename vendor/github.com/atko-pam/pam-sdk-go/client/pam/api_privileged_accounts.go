/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// PrivilegedAccountsAPIService PrivilegedAccountsAPI service
type PrivilegedAccountsAPIService service

type ApiCreatePrivilegedAccountRequest struct {
	ctx        context.Context
	ApiService *PrivilegedAccountsAPIService
	body       *PrivilegedAccount
}

func (r ApiCreatePrivilegedAccountRequest) Body(body PrivilegedAccount) ApiCreatePrivilegedAccountRequest {
	r.body = &body
	return r
}

func (r ApiCreatePrivilegedAccountRequest) Execute() (*PrivilegedAccount, *http.Response, error) {
	return r.ApiService.CreatePrivilegedAccountExecute(r)
}

/*
CreatePrivilegedAccount Create a privileged account

	Creates a privileged account

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiCreatePrivilegedAccountRequest
*/
func (a *PrivilegedAccountsAPIService) CreatePrivilegedAccount(ctx context.Context) ApiCreatePrivilegedAccountRequest {
	return ApiCreatePrivilegedAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PrivilegedAccount
func (a *PrivilegedAccountsAPIService) CreatePrivilegedAccountExecute(r ApiCreatePrivilegedAccountRequest) (*PrivilegedAccount, *http.Response, error) {
	var (
		traceKey            = "privilegedaccountsapi.createPrivilegedAccount"
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivilegedAccount
	)

	localVarPath := "/v1/privileged-accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiDeletePrivilegedAccountRequest struct {
	ctx        context.Context
	ApiService *PrivilegedAccountsAPIService
	id         string
}

func (r ApiDeletePrivilegedAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePrivilegedAccountExecute(r)
}

/*
DeletePrivilegedAccount Delete a privileged account

	Deletes a privileged account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param id ID of an existing privileged account

@return ApiDeletePrivilegedAccountRequest
*/
func (a *PrivilegedAccountsAPIService) DeletePrivilegedAccount(ctx context.Context, id string) ApiDeletePrivilegedAccountRequest {
	return ApiDeletePrivilegedAccountRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PrivilegedAccountsAPIService) DeletePrivilegedAccountExecute(r ApiDeletePrivilegedAccountRequest) (*http.Response, error) {
	var (
		traceKey           = "privilegedaccountsapi.deletePrivilegedAccount"
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localVarPath := "/v1/privileged-accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, nil)

	if localVarHTTPResponse == nil && err != nil {
		return nil, err
	}

	return localVarHTTPResponse, err
}

type ApiGetPrivilegedAccountRequest struct {
	ctx        context.Context
	ApiService *PrivilegedAccountsAPIService
	id         string
}

func (r ApiGetPrivilegedAccountRequest) Execute() (*PrivilegedAccount, *http.Response, error) {
	return r.ApiService.GetPrivilegedAccountExecute(r)
}

/*
GetPrivilegedAccount Retrieve a privileged account

	Retrieves a privileged account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param id ID of an existing privileged account

@return ApiGetPrivilegedAccountRequest
*/
func (a *PrivilegedAccountsAPIService) GetPrivilegedAccount(ctx context.Context, id string) ApiGetPrivilegedAccountRequest {
	return ApiGetPrivilegedAccountRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrivilegedAccount
func (a *PrivilegedAccountsAPIService) GetPrivilegedAccountExecute(r ApiGetPrivilegedAccountRequest) (*PrivilegedAccount, *http.Response, error) {
	var (
		traceKey            = "privilegedaccountsapi.getPrivilegedAccount"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivilegedAccount
	)

	localVarPath := "/v1/privileged-accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiListPrivilegedAccountsRequest struct {
	ctx        context.Context
	ApiService *PrivilegedAccountsAPIService
}

func (r ApiListPrivilegedAccountsRequest) Execute() (*ListPrivilegedAccountsResponse, *http.Response, error) {
	return r.ApiService.ListPrivilegedAccountsExecute(r)
}

/*
ListPrivilegedAccounts List all privileged accounts

	Lists all privileged accounts

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiListPrivilegedAccountsRequest
*/
func (a *PrivilegedAccountsAPIService) ListPrivilegedAccounts(ctx context.Context) ApiListPrivilegedAccountsRequest {
	return ApiListPrivilegedAccountsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListPrivilegedAccountsResponse
func (a *PrivilegedAccountsAPIService) ListPrivilegedAccountsExecute(r ApiListPrivilegedAccountsRequest) (*ListPrivilegedAccountsResponse, *http.Response, error) {
	var (
		traceKey            = "privilegedaccountsapi.listPrivilegedAccounts"
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPrivilegedAccountsResponse
	)

	localVarPath := "/v1/privileged-accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}

type ApiReplacePrivilegedAccountRequest struct {
	ctx        context.Context
	ApiService *PrivilegedAccountsAPIService
	id         string
	body       *PrivilegedAccount
}

func (r ApiReplacePrivilegedAccountRequest) Body(body PrivilegedAccount) ApiReplacePrivilegedAccountRequest {
	r.body = &body
	return r
}

func (r ApiReplacePrivilegedAccountRequest) Execute() (*PrivilegedAccount, *http.Response, error) {
	return r.ApiService.ReplacePrivilegedAccountExecute(r)
}

/*
ReplacePrivilegedAccount Replace a privileged account

	Replaces a privileged account specified by ID

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

	@param id ID of an existing privileged account

@return ApiReplacePrivilegedAccountRequest
*/
func (a *PrivilegedAccountsAPIService) ReplacePrivilegedAccount(ctx context.Context, id string) ApiReplacePrivilegedAccountRequest {
	return ApiReplacePrivilegedAccountRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrivilegedAccount
func (a *PrivilegedAccountsAPIService) ReplacePrivilegedAccountExecute(r ApiReplacePrivilegedAccountRequest) (*PrivilegedAccount, *http.Response, error) {
	var (
		traceKey            = "privilegedaccountsapi.replacePrivilegedAccount"
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivilegedAccount
	)

	localVarPath := "/v1/privileged-accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	localVarHTTPResponse, err := a.client.callAPI(r.ctx, traceKey, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles, &localVarReturnValue)

	if localVarHTTPResponse == nil && err != nil {
		return localVarReturnValue, nil, err
	}

	return localVarReturnValue, localVarHTTPResponse, err
}
