/*
Okta Privileged Access

The ScaleFT API is a control plane API for operations in Okta Privileged Access (formerly ScaleFT)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"time"
)

// checks if the PasswordPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordPolicy{}

// PasswordPolicy struct for PasswordPolicy
type PasswordPolicy struct {
	// An array of managed accounts for password rotation
	ManagedPrivilegedAccountsConfig []string `json:"managed_privileged_accounts_config,omitempty"`
	// If `true`, rotates account passwords after a period of time has passed. You must also set the `periodic_rotation_duration_in_seconds` param.
	EnablePeriodicRotation *bool `json:"enable_periodic_rotation,omitempty"`
	// If `enable_periodic_rotation` is enabled, specifies how often the OPA platform rotates account passwords.
	PeriodicRotationDurationInSeconds *int32                          `json:"periodic_rotation_duration_in_seconds,omitempty"`
	CharacterOptions                  *PasswordPolicyCharacterOptions `json:"character_options,omitempty"`
	// The minimum length allowed for the password
	MinLengthInBytes *int32 `json:"min_length_in_bytes,omitempty"`
	// The maximum length allowed for the password
	MaxLengthInBytes *int32 `json:"max_length_in_bytes,omitempty"`
	// A timestamp indicating when the Password Policy was last modified
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// NewPasswordPolicy instantiates a new PasswordPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPolicy() *PasswordPolicy {
	this := PasswordPolicy{}
	return &this
}

// NewPasswordPolicyWithDefaults instantiates a new PasswordPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPolicyWithDefaults() *PasswordPolicy {
	this := PasswordPolicy{}
	return &this
}

// GetManagedPrivilegedAccountsConfig returns the ManagedPrivilegedAccountsConfig field value if set, zero value otherwise.
func (o *PasswordPolicy) GetManagedPrivilegedAccountsConfig() []string {
	if o == nil || IsNil(o.ManagedPrivilegedAccountsConfig) {
		var ret []string
		return ret
	}
	return o.ManagedPrivilegedAccountsConfig
}

// GetManagedPrivilegedAccountsConfigOk returns a tuple with the ManagedPrivilegedAccountsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetManagedPrivilegedAccountsConfigOk() ([]string, bool) {
	if o == nil || IsNil(o.ManagedPrivilegedAccountsConfig) {
		return nil, false
	}
	return o.ManagedPrivilegedAccountsConfig, true
}

// HasManagedPrivilegedAccountsConfig returns a boolean if a field has been set.
func (o *PasswordPolicy) HasManagedPrivilegedAccountsConfig() bool {
	if o != nil && !IsNil(o.ManagedPrivilegedAccountsConfig) {
		return true
	}

	return false
}

// SetManagedPrivilegedAccountsConfig gets a reference to the given []string and assigns it to the ManagedPrivilegedAccountsConfig field.
func (o *PasswordPolicy) SetManagedPrivilegedAccountsConfig(v []string) *PasswordPolicy {
	o.ManagedPrivilegedAccountsConfig = v
	return o
}

// GetEnablePeriodicRotation returns the EnablePeriodicRotation field value if set, zero value otherwise.
func (o *PasswordPolicy) GetEnablePeriodicRotation() bool {
	if o == nil || IsNil(o.EnablePeriodicRotation) {
		var ret bool
		return ret
	}
	return *o.EnablePeriodicRotation
}

// GetEnablePeriodicRotationOk returns a tuple with the EnablePeriodicRotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetEnablePeriodicRotationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePeriodicRotation) {
		return nil, false
	}
	return o.EnablePeriodicRotation, true
}

// HasEnablePeriodicRotation returns a boolean if a field has been set.
func (o *PasswordPolicy) HasEnablePeriodicRotation() bool {
	if o != nil && !IsNil(o.EnablePeriodicRotation) {
		return true
	}

	return false
}

// SetEnablePeriodicRotation gets a reference to the given bool and assigns it to the EnablePeriodicRotation field.
func (o *PasswordPolicy) SetEnablePeriodicRotation(v bool) *PasswordPolicy {
	o.EnablePeriodicRotation = &v
	return o
}

// GetPeriodicRotationDurationInSeconds returns the PeriodicRotationDurationInSeconds field value if set, zero value otherwise.
func (o *PasswordPolicy) GetPeriodicRotationDurationInSeconds() int32 {
	if o == nil || IsNil(o.PeriodicRotationDurationInSeconds) {
		var ret int32
		return ret
	}
	return *o.PeriodicRotationDurationInSeconds
}

// GetPeriodicRotationDurationInSecondsOk returns a tuple with the PeriodicRotationDurationInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetPeriodicRotationDurationInSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.PeriodicRotationDurationInSeconds) {
		return nil, false
	}
	return o.PeriodicRotationDurationInSeconds, true
}

// HasPeriodicRotationDurationInSeconds returns a boolean if a field has been set.
func (o *PasswordPolicy) HasPeriodicRotationDurationInSeconds() bool {
	if o != nil && !IsNil(o.PeriodicRotationDurationInSeconds) {
		return true
	}

	return false
}

// SetPeriodicRotationDurationInSeconds gets a reference to the given int32 and assigns it to the PeriodicRotationDurationInSeconds field.
func (o *PasswordPolicy) SetPeriodicRotationDurationInSeconds(v int32) *PasswordPolicy {
	o.PeriodicRotationDurationInSeconds = &v
	return o
}

// GetCharacterOptions returns the CharacterOptions field value if set, zero value otherwise.
func (o *PasswordPolicy) GetCharacterOptions() PasswordPolicyCharacterOptions {
	if o == nil || IsNil(o.CharacterOptions) {
		var ret PasswordPolicyCharacterOptions
		return ret
	}
	return *o.CharacterOptions
}

// GetCharacterOptionsOk returns a tuple with the CharacterOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetCharacterOptionsOk() (*PasswordPolicyCharacterOptions, bool) {
	if o == nil || IsNil(o.CharacterOptions) {
		return nil, false
	}
	return o.CharacterOptions, true
}

// HasCharacterOptions returns a boolean if a field has been set.
func (o *PasswordPolicy) HasCharacterOptions() bool {
	if o != nil && !IsNil(o.CharacterOptions) {
		return true
	}

	return false
}

// SetCharacterOptions gets a reference to the given PasswordPolicyCharacterOptions and assigns it to the CharacterOptions field.
func (o *PasswordPolicy) SetCharacterOptions(v PasswordPolicyCharacterOptions) *PasswordPolicy {
	o.CharacterOptions = &v
	return o
}

// GetMinLengthInBytes returns the MinLengthInBytes field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMinLengthInBytes() int32 {
	if o == nil || IsNil(o.MinLengthInBytes) {
		var ret int32
		return ret
	}
	return *o.MinLengthInBytes
}

// GetMinLengthInBytesOk returns a tuple with the MinLengthInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMinLengthInBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLengthInBytes) {
		return nil, false
	}
	return o.MinLengthInBytes, true
}

// HasMinLengthInBytes returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMinLengthInBytes() bool {
	if o != nil && !IsNil(o.MinLengthInBytes) {
		return true
	}

	return false
}

// SetMinLengthInBytes gets a reference to the given int32 and assigns it to the MinLengthInBytes field.
func (o *PasswordPolicy) SetMinLengthInBytes(v int32) *PasswordPolicy {
	o.MinLengthInBytes = &v
	return o
}

// GetMaxLengthInBytes returns the MaxLengthInBytes field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMaxLengthInBytes() int32 {
	if o == nil || IsNil(o.MaxLengthInBytes) {
		var ret int32
		return ret
	}
	return *o.MaxLengthInBytes
}

// GetMaxLengthInBytesOk returns a tuple with the MaxLengthInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMaxLengthInBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLengthInBytes) {
		return nil, false
	}
	return o.MaxLengthInBytes, true
}

// HasMaxLengthInBytes returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMaxLengthInBytes() bool {
	if o != nil && !IsNil(o.MaxLengthInBytes) {
		return true
	}

	return false
}

// SetMaxLengthInBytes gets a reference to the given int32 and assigns it to the MaxLengthInBytes field.
func (o *PasswordPolicy) SetMaxLengthInBytes(v int32) *PasswordPolicy {
	o.MaxLengthInBytes = &v
	return o
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *PasswordPolicy) GetModifiedAt() time.Time {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *PasswordPolicy) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *PasswordPolicy) SetModifiedAt(v time.Time) *PasswordPolicy {
	o.ModifiedAt = &v
	return o
}

func (o PasswordPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ManagedPrivilegedAccountsConfig) {
		toSerialize["managed_privileged_accounts_config"] = o.ManagedPrivilegedAccountsConfig
	}
	if !IsNil(o.EnablePeriodicRotation) {
		toSerialize["enable_periodic_rotation"] = o.EnablePeriodicRotation
	}
	if !IsNil(o.PeriodicRotationDurationInSeconds) {
		toSerialize["periodic_rotation_duration_in_seconds"] = o.PeriodicRotationDurationInSeconds
	}
	if !IsNil(o.CharacterOptions) {
		toSerialize["character_options"] = o.CharacterOptions
	}
	if !IsNil(o.MinLengthInBytes) {
		toSerialize["min_length_in_bytes"] = o.MinLengthInBytes
	}
	if !IsNil(o.MaxLengthInBytes) {
		toSerialize["max_length_in_bytes"] = o.MaxLengthInBytes
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	return toSerialize, nil
}

type NullablePasswordPolicy struct {
	value *PasswordPolicy
	isSet bool
}

func (v NullablePasswordPolicy) Get() *PasswordPolicy {
	return v.value
}

func (v *NullablePasswordPolicy) Set(val *PasswordPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPolicy(val *PasswordPolicy) *NullablePasswordPolicy {
	return &NullablePasswordPolicy{value: val, isSet: true}
}

func (v NullablePasswordPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
