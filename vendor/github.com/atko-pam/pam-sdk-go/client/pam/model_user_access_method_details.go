/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// UserAccessMethodDetails - User access method details
type UserAccessMethodDetails struct {
	UserAccessMethodActiveDirectoryAccountDetails *UserAccessMethodActiveDirectoryAccountDetails
	UserAccessMethodSecretDetails                 *UserAccessMethodSecretDetails
	UserAccessMethodServerDetails                 *UserAccessMethodServerDetails
	UserAccessMethodServiceAccountDetails         *UserAccessMethodServiceAccountDetails
	Unknown                                       map[string]interface{} // holds unknown types for round-tripping
}

// UserAccessMethodActiveDirectoryAccountDetailsAsUserAccessMethodDetails is a convenience function that returns UserAccessMethodActiveDirectoryAccountDetails wrapped in UserAccessMethodDetails
func UserAccessMethodActiveDirectoryAccountDetailsAsUserAccessMethodDetails(v *UserAccessMethodActiveDirectoryAccountDetails) UserAccessMethodDetails {
	return UserAccessMethodDetails{
		UserAccessMethodActiveDirectoryAccountDetails: v,
	}
}

// UserAccessMethodSecretDetailsAsUserAccessMethodDetails is a convenience function that returns UserAccessMethodSecretDetails wrapped in UserAccessMethodDetails
func UserAccessMethodSecretDetailsAsUserAccessMethodDetails(v *UserAccessMethodSecretDetails) UserAccessMethodDetails {
	return UserAccessMethodDetails{
		UserAccessMethodSecretDetails: v,
	}
}

// UserAccessMethodServerDetailsAsUserAccessMethodDetails is a convenience function that returns UserAccessMethodServerDetails wrapped in UserAccessMethodDetails
func UserAccessMethodServerDetailsAsUserAccessMethodDetails(v *UserAccessMethodServerDetails) UserAccessMethodDetails {
	return UserAccessMethodDetails{
		UserAccessMethodServerDetails: v,
	}
}

// UserAccessMethodServiceAccountDetailsAsUserAccessMethodDetails is a convenience function that returns UserAccessMethodServiceAccountDetails wrapped in UserAccessMethodDetails
func UserAccessMethodServiceAccountDetailsAsUserAccessMethodDetails(v *UserAccessMethodServiceAccountDetails) UserAccessMethodDetails {
	return UserAccessMethodDetails{
		UserAccessMethodServiceAccountDetails: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UserAccessMethodDetails) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'UserAccessMethodActiveDirectoryAccountDetails'
	if jsonDict["_type"] == "UserAccessMethodActiveDirectoryAccountDetails" {
		// try to unmarshal JSON data into UserAccessMethodActiveDirectoryAccountDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodActiveDirectoryAccountDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodActiveDirectoryAccountDetails, return on the first match
		} else {
			dst.UserAccessMethodActiveDirectoryAccountDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodActiveDirectoryAccountDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UserAccessMethodSecretDetails'
	if jsonDict["_type"] == "UserAccessMethodSecretDetails" {
		// try to unmarshal JSON data into UserAccessMethodSecretDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodSecretDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodSecretDetails, return on the first match
		} else {
			dst.UserAccessMethodSecretDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodSecretDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UserAccessMethodServerDetails'
	if jsonDict["_type"] == "UserAccessMethodServerDetails" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UserAccessMethodServiceAccountDetails'
	if jsonDict["_type"] == "UserAccessMethodServiceAccountDetails" {
		// try to unmarshal JSON data into UserAccessMethodServiceAccountDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServiceAccountDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServiceAccountDetails, return on the first match
		} else {
			dst.UserAccessMethodServiceAccountDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServiceAccountDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'active_directory_account'
	if jsonDict["_type"] == "active_directory_account" {
		// try to unmarshal JSON data into UserAccessMethodActiveDirectoryAccountDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodActiveDirectoryAccountDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodActiveDirectoryAccountDetails, return on the first match
		} else {
			dst.UserAccessMethodActiveDirectoryAccountDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodActiveDirectoryAccountDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ad_password'
	if jsonDict["_type"] == "ad_password" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ad_passwordless'
	if jsonDict["_type"] == "ad_passwordless" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'brokered_rdp'
	if jsonDict["_type"] == "brokered_rdp" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'encrypted_ad_rdp_password'
	if jsonDict["_type"] == "encrypted_ad_rdp_password" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'encrypted_rdp_password'
	if jsonDict["_type"] == "encrypted_rdp_password" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'encrypted_ssh_password'
	if jsonDict["_type"] == "encrypted_ssh_password" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'principal_account_rdp'
	if jsonDict["_type"] == "principal_account_rdp" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'principal_account_rdp_with_admin'
	if jsonDict["_type"] == "principal_account_rdp_with_admin" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'principal_account_ssh'
	if jsonDict["_type"] == "principal_account_ssh" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'principal_account_ssh_with_admin'
	if jsonDict["_type"] == "principal_account_ssh_with_admin" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'principal_account_ssh_with_sudo'
	if jsonDict["_type"] == "principal_account_ssh_with_sudo" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'secret'
	if jsonDict["_type"] == "secret" {
		// try to unmarshal JSON data into UserAccessMethodSecretDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodSecretDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodSecretDetails, return on the first match
		} else {
			dst.UserAccessMethodSecretDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodSecretDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'service_account'
	if jsonDict["_type"] == "service_account" {
		// try to unmarshal JSON data into UserAccessMethodServiceAccountDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServiceAccountDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServiceAccountDetails, return on the first match
		} else {
			dst.UserAccessMethodServiceAccountDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServiceAccountDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'unknown'
	if jsonDict["_type"] == "unknown" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// check if the discriminator value is 'unmanaged_rdp'
	if jsonDict["_type"] == "unmanaged_rdp" {
		// try to unmarshal JSON data into UserAccessMethodServerDetails
		err = json.Unmarshal(data, &dst.UserAccessMethodServerDetails)
		if err == nil {
			return nil // data stored in dst.UserAccessMethodServerDetails, return on the first match
		} else {
			dst.UserAccessMethodServerDetails = nil
			return fmt.Errorf("failed to unmarshal UserAccessMethodDetails as UserAccessMethodServerDetails: %s", err.Error())
		}
	}

	// If discriminator is unknown, unmarshal into Unknown
	var unknown map[string]interface{}
	err = json.Unmarshal(data, &unknown)
	if err == nil {
		dst.Unknown = unknown
		return nil
	}
	return err
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UserAccessMethodDetails) MarshalJSON() ([]byte, error) {
	if src.UserAccessMethodActiveDirectoryAccountDetails != nil {
		return json.Marshal(&src.UserAccessMethodActiveDirectoryAccountDetails)
	}

	if src.UserAccessMethodSecretDetails != nil {
		return json.Marshal(&src.UserAccessMethodSecretDetails)
	}

	if src.UserAccessMethodServerDetails != nil {
		return json.Marshal(&src.UserAccessMethodServerDetails)
	}

	if src.UserAccessMethodServiceAccountDetails != nil {
		return json.Marshal(&src.UserAccessMethodServiceAccountDetails)
	}

	if src.Unknown != nil {
		return json.Marshal(src.Unknown)
	}

	return nil, fmt.Errorf("no data present in any oneOf schemas or Unknown; this should be unreachable") // unreachable: no data matched, should be handled by Unknown
}

// Get the actual instance
func (obj *UserAccessMethodDetails) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UserAccessMethodActiveDirectoryAccountDetails != nil {
		return obj.UserAccessMethodActiveDirectoryAccountDetails
	}

	if obj.UserAccessMethodSecretDetails != nil {
		return obj.UserAccessMethodSecretDetails
	}

	if obj.UserAccessMethodServerDetails != nil {
		return obj.UserAccessMethodServerDetails
	}

	if obj.UserAccessMethodServiceAccountDetails != nil {
		return obj.UserAccessMethodServiceAccountDetails
	}

	// all schemas are nil
	return nil
}

type NullableUserAccessMethodDetails struct {
	value *UserAccessMethodDetails
	isSet bool
}

func (v NullableUserAccessMethodDetails) Get() *UserAccessMethodDetails {
	return v.value
}

func (v *NullableUserAccessMethodDetails) Set(val *UserAccessMethodDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccessMethodDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccessMethodDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccessMethodDetails(val *UserAccessMethodDetails) *NullableUserAccessMethodDetails {
	return &NullableUserAccessMethodDetails{value: val, isSet: true}
}

func (v NullableUserAccessMethodDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccessMethodDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
