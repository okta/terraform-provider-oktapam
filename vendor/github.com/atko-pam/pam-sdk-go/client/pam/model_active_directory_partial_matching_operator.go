/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// ActiveDirectoryPartialMatchingOperator Partial matching operator for Active Directory account and Okta user names
type ActiveDirectoryPartialMatchingOperator string

// List of ActiveDirectoryPartialMatchingOperator
const (
	ActiveDirectoryPartialMatchingOperator_STARTS_WITH ActiveDirectoryPartialMatchingOperator = "STARTS WITH"
	ActiveDirectoryPartialMatchingOperator_ENDS_WITH   ActiveDirectoryPartialMatchingOperator = "ENDS WITH"
)

// All allowed values of ActiveDirectoryPartialMatchingOperator enum
var AllowedActiveDirectoryPartialMatchingOperatorEnumValues = []ActiveDirectoryPartialMatchingOperator{
	"STARTS WITH",
	"ENDS WITH",
}

func (v *ActiveDirectoryPartialMatchingOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActiveDirectoryPartialMatchingOperator(value)

	*v = enumTypeValue

	return nil
}

// NewActiveDirectoryPartialMatchingOperatorFromValue returns a pointer to a valid ActiveDirectoryPartialMatchingOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActiveDirectoryPartialMatchingOperatorFromValue(v string) (*ActiveDirectoryPartialMatchingOperator, error) {
	ev := ActiveDirectoryPartialMatchingOperator(v)

	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActiveDirectoryPartialMatchingOperator) IsValid() bool {
	for _, existing := range AllowedActiveDirectoryPartialMatchingOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActiveDirectoryPartialMatchingOperator value
func (v ActiveDirectoryPartialMatchingOperator) Ptr() *ActiveDirectoryPartialMatchingOperator {
	return &v
}

type NullableActiveDirectoryPartialMatchingOperator struct {
	value *ActiveDirectoryPartialMatchingOperator
	isSet bool
}

func (v NullableActiveDirectoryPartialMatchingOperator) Get() *ActiveDirectoryPartialMatchingOperator {
	return v.value
}

func (v *NullableActiveDirectoryPartialMatchingOperator) Set(val *ActiveDirectoryPartialMatchingOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryPartialMatchingOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryPartialMatchingOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryPartialMatchingOperator(val *ActiveDirectoryPartialMatchingOperator) *NullableActiveDirectoryPartialMatchingOperator {
	return &NullableActiveDirectoryPartialMatchingOperator{value: val, isSet: true}
}

func (v NullableActiveDirectoryPartialMatchingOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryPartialMatchingOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
