/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
	"fmt"
)

// ActiveDirectoryAccountPrivilegeContainerPrivilegeValue - The value of the privilege
type ActiveDirectoryAccountPrivilegeContainerPrivilegeValue struct {
	SecurityPolicyPasswordCheckoutRDPPrivilege *SecurityPolicyPasswordCheckoutRDPPrivilege
	SecurityPolicyRevealPasswordPrivilege      *SecurityPolicyRevealPasswordPrivilege
	SecurityPolicyRotatePasswordPrivilege      *SecurityPolicyRotatePasswordPrivilege
}

// SecurityPolicyPasswordCheckoutRDPPrivilegeAsActiveDirectoryAccountPrivilegeContainerPrivilegeValue is a convenience function that returns SecurityPolicyPasswordCheckoutRDPPrivilege wrapped in ActiveDirectoryAccountPrivilegeContainerPrivilegeValue
func SecurityPolicyPasswordCheckoutRDPPrivilegeAsActiveDirectoryAccountPrivilegeContainerPrivilegeValue(v *SecurityPolicyPasswordCheckoutRDPPrivilege) ActiveDirectoryAccountPrivilegeContainerPrivilegeValue {
	return ActiveDirectoryAccountPrivilegeContainerPrivilegeValue{
		SecurityPolicyPasswordCheckoutRDPPrivilege: v,
	}
}

// SecurityPolicyRevealPasswordPrivilegeAsActiveDirectoryAccountPrivilegeContainerPrivilegeValue is a convenience function that returns SecurityPolicyRevealPasswordPrivilege wrapped in ActiveDirectoryAccountPrivilegeContainerPrivilegeValue
func SecurityPolicyRevealPasswordPrivilegeAsActiveDirectoryAccountPrivilegeContainerPrivilegeValue(v *SecurityPolicyRevealPasswordPrivilege) ActiveDirectoryAccountPrivilegeContainerPrivilegeValue {
	return ActiveDirectoryAccountPrivilegeContainerPrivilegeValue{
		SecurityPolicyRevealPasswordPrivilege: v,
	}
}

// SecurityPolicyRotatePasswordPrivilegeAsActiveDirectoryAccountPrivilegeContainerPrivilegeValue is a convenience function that returns SecurityPolicyRotatePasswordPrivilege wrapped in ActiveDirectoryAccountPrivilegeContainerPrivilegeValue
func SecurityPolicyRotatePasswordPrivilegeAsActiveDirectoryAccountPrivilegeContainerPrivilegeValue(v *SecurityPolicyRotatePasswordPrivilege) ActiveDirectoryAccountPrivilegeContainerPrivilegeValue {
	return ActiveDirectoryAccountPrivilegeContainerPrivilegeValue{
		SecurityPolicyRotatePasswordPrivilege: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ActiveDirectoryAccountPrivilegeContainerPrivilegeValue) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'SecurityPolicyPasswordCheckoutRDPPrivilege'
	if jsonDict["_type"] == "SecurityPolicyPasswordCheckoutRDPPrivilege" {
		// try to unmarshal JSON data into SecurityPolicyPasswordCheckoutRDPPrivilege
		err = json.Unmarshal(data, &dst.SecurityPolicyPasswordCheckoutRDPPrivilege)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyPasswordCheckoutRDPPrivilege, return on the first match
		} else {
			dst.SecurityPolicyPasswordCheckoutRDPPrivilege = nil
			return fmt.Errorf("failed to unmarshal ActiveDirectoryAccountPrivilegeContainerPrivilegeValue as SecurityPolicyPasswordCheckoutRDPPrivilege: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SecurityPolicyRevealPasswordPrivilege'
	if jsonDict["_type"] == "SecurityPolicyRevealPasswordPrivilege" {
		// try to unmarshal JSON data into SecurityPolicyRevealPasswordPrivilege
		err = json.Unmarshal(data, &dst.SecurityPolicyRevealPasswordPrivilege)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyRevealPasswordPrivilege, return on the first match
		} else {
			dst.SecurityPolicyRevealPasswordPrivilege = nil
			return fmt.Errorf("failed to unmarshal ActiveDirectoryAccountPrivilegeContainerPrivilegeValue as SecurityPolicyRevealPasswordPrivilege: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SecurityPolicyRotatePasswordPrivilege'
	if jsonDict["_type"] == "SecurityPolicyRotatePasswordPrivilege" {
		// try to unmarshal JSON data into SecurityPolicyRotatePasswordPrivilege
		err = json.Unmarshal(data, &dst.SecurityPolicyRotatePasswordPrivilege)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyRotatePasswordPrivilege, return on the first match
		} else {
			dst.SecurityPolicyRotatePasswordPrivilege = nil
			return fmt.Errorf("failed to unmarshal ActiveDirectoryAccountPrivilegeContainerPrivilegeValue as SecurityPolicyRotatePasswordPrivilege: %s", err.Error())
		}
	}

	// check if the discriminator value is 'password_checkout_rdp'
	if jsonDict["_type"] == "password_checkout_rdp" {
		// try to unmarshal JSON data into SecurityPolicyPasswordCheckoutRDPPrivilege
		err = json.Unmarshal(data, &dst.SecurityPolicyPasswordCheckoutRDPPrivilege)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyPasswordCheckoutRDPPrivilege, return on the first match
		} else {
			dst.SecurityPolicyPasswordCheckoutRDPPrivilege = nil
			return fmt.Errorf("failed to unmarshal ActiveDirectoryAccountPrivilegeContainerPrivilegeValue as SecurityPolicyPasswordCheckoutRDPPrivilege: %s", err.Error())
		}
	}

	// check if the discriminator value is 'reveal_password'
	if jsonDict["_type"] == "reveal_password" {
		// try to unmarshal JSON data into SecurityPolicyRevealPasswordPrivilege
		err = json.Unmarshal(data, &dst.SecurityPolicyRevealPasswordPrivilege)
		if err == nil {
			return nil // data stored in dst.SecurityPolicyRevealPasswordPrivilege, return on the first match
		} else {
			dst.SecurityPolicyRevealPasswordPrivilege = nil
			return fmt.Errorf("failed to unmarshal ActiveDirectoryAccountPrivilegeContainerPrivilegeValue as SecurityPolicyRevealPasswordPrivilege: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ActiveDirectoryAccountPrivilegeContainerPrivilegeValue) MarshalJSON() ([]byte, error) {
	if src.SecurityPolicyPasswordCheckoutRDPPrivilege != nil {
		return json.Marshal(&src.SecurityPolicyPasswordCheckoutRDPPrivilege)
	}

	if src.SecurityPolicyRevealPasswordPrivilege != nil {
		return json.Marshal(&src.SecurityPolicyRevealPasswordPrivilege)
	}

	if src.SecurityPolicyRotatePasswordPrivilege != nil {
		return json.Marshal(&src.SecurityPolicyRotatePasswordPrivilege)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ActiveDirectoryAccountPrivilegeContainerPrivilegeValue) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SecurityPolicyPasswordCheckoutRDPPrivilege != nil {
		return obj.SecurityPolicyPasswordCheckoutRDPPrivilege
	}

	if obj.SecurityPolicyRevealPasswordPrivilege != nil {
		return obj.SecurityPolicyRevealPasswordPrivilege
	}

	if obj.SecurityPolicyRotatePasswordPrivilege != nil {
		return obj.SecurityPolicyRotatePasswordPrivilege
	}

	// all schemas are nil
	return nil
}

type NullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue struct {
	value *ActiveDirectoryAccountPrivilegeContainerPrivilegeValue
	isSet bool
}

func (v NullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue) Get() *ActiveDirectoryAccountPrivilegeContainerPrivilegeValue {
	return v.value
}

func (v *NullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue) Set(val *ActiveDirectoryAccountPrivilegeContainerPrivilegeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue(val *ActiveDirectoryAccountPrivilegeContainerPrivilegeValue) *NullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue {
	return &NullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue{value: val, isSet: true}
}

func (v NullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAccountPrivilegeContainerPrivilegeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
