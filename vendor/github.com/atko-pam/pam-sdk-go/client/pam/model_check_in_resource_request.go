/*
Okta Privileged Access

The OPA API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the CheckInResourceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckInResourceRequest{}

// CheckInResourceRequest struct for CheckInResourceRequest
type CheckInResourceRequest struct {
	// The UUID or ORN of the resource
	ResourceId   string               `json:"resource_id"`
	ResourceType CheckoutResourceType `json:"resource_type"`
	// Indicates the checkin process is being forced. If the User initiating the checkin process differs from the User who checked out the resource, then this value must be `true`.
	Force *bool `json:"force,omitempty"`
}

// NewCheckInResourceRequest instantiates a new CheckInResourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckInResourceRequest(resourceId string, resourceType CheckoutResourceType) *CheckInResourceRequest {
	this := CheckInResourceRequest{}
	this.ResourceId = resourceId
	this.ResourceType = resourceType
	return &this
}

// NewCheckInResourceRequestWithDefaults instantiates a new CheckInResourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckInResourceRequestWithDefaults() *CheckInResourceRequest {
	this := CheckInResourceRequest{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *CheckInResourceRequest) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *CheckInResourceRequest) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *CheckInResourceRequest) SetResourceId(v string) *CheckInResourceRequest {
	o.ResourceId = v
	return o
}

// GetResourceType returns the ResourceType field value
func (o *CheckInResourceRequest) GetResourceType() CheckoutResourceType {
	if o == nil {
		var ret CheckoutResourceType
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *CheckInResourceRequest) GetResourceTypeOk() (*CheckoutResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *CheckInResourceRequest) SetResourceType(v CheckoutResourceType) *CheckInResourceRequest {
	o.ResourceType = v
	return o
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *CheckInResourceRequest) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckInResourceRequest) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *CheckInResourceRequest) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *CheckInResourceRequest) SetForce(v bool) *CheckInResourceRequest {
	o.Force = &v
	return o
}

func (o CheckInResourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckInResourceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["resource_type"] = o.ResourceType
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	return toSerialize, nil
}

type NullableCheckInResourceRequest struct {
	value *CheckInResourceRequest
	isSet bool
}

func (v NullableCheckInResourceRequest) Get() *CheckInResourceRequest {
	return v.value
}

func (v *NullableCheckInResourceRequest) Set(val *CheckInResourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckInResourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckInResourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckInResourceRequest(val *CheckInResourceRequest) *NullableCheckInResourceRequest {
	return &NullableCheckInResourceRequest{value: val, isSet: true}
}

func (v NullableCheckInResourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckInResourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
