/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyActiveDirectorySpecificAccountSubSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyActiveDirectorySpecificAccountSubSelector{}

// SecurityPolicyActiveDirectorySpecificAccountSubSelector The specific account to apply the policy rule to
type SecurityPolicyActiveDirectorySpecificAccountSubSelector struct {
	SharedAccount NamedObject                                                          `json:"shared_account"`
	AdConnection  *SecurityPolicyActiveDirectorySpecificAccountSubSelectorAdConnection `json:"ad_connection,omitempty"`
}

// NewSecurityPolicyActiveDirectorySpecificAccountSubSelector instantiates a new SecurityPolicyActiveDirectorySpecificAccountSubSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyActiveDirectorySpecificAccountSubSelector(sharedAccount NamedObject) *SecurityPolicyActiveDirectorySpecificAccountSubSelector {
	this := SecurityPolicyActiveDirectorySpecificAccountSubSelector{}
	this.SharedAccount = sharedAccount
	return &this
}

// NewSecurityPolicyActiveDirectorySpecificAccountSubSelectorWithDefaults instantiates a new SecurityPolicyActiveDirectorySpecificAccountSubSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyActiveDirectorySpecificAccountSubSelectorWithDefaults() *SecurityPolicyActiveDirectorySpecificAccountSubSelector {
	this := SecurityPolicyActiveDirectorySpecificAccountSubSelector{}
	return &this
}

// GetSharedAccount returns the SharedAccount field value
func (o *SecurityPolicyActiveDirectorySpecificAccountSubSelector) GetSharedAccount() NamedObject {
	if o == nil {
		var ret NamedObject
		return ret
	}

	return o.SharedAccount
}

// GetSharedAccountOk returns a tuple with the SharedAccount field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyActiveDirectorySpecificAccountSubSelector) GetSharedAccountOk() (*NamedObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SharedAccount, true
}

// SetSharedAccount sets field value
func (o *SecurityPolicyActiveDirectorySpecificAccountSubSelector) SetSharedAccount(v NamedObject) *SecurityPolicyActiveDirectorySpecificAccountSubSelector {
	o.SharedAccount = v
	return o
}

// GetAdConnection returns the AdConnection field value if set, zero value otherwise.
func (o *SecurityPolicyActiveDirectorySpecificAccountSubSelector) GetAdConnection() SecurityPolicyActiveDirectorySpecificAccountSubSelectorAdConnection {
	if o == nil || IsNil(o.AdConnection) {
		var ret SecurityPolicyActiveDirectorySpecificAccountSubSelectorAdConnection
		return ret
	}
	return *o.AdConnection
}

// GetAdConnectionOk returns a tuple with the AdConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicyActiveDirectorySpecificAccountSubSelector) GetAdConnectionOk() (*SecurityPolicyActiveDirectorySpecificAccountSubSelectorAdConnection, bool) {
	if o == nil || IsNil(o.AdConnection) {
		return nil, false
	}
	return o.AdConnection, true
}

// HasAdConnection returns a boolean if a field has been set.
func (o *SecurityPolicyActiveDirectorySpecificAccountSubSelector) HasAdConnection() bool {
	if o != nil && !IsNil(o.AdConnection) {
		return true
	}

	return false
}

// SetAdConnection gets a reference to the given SecurityPolicyActiveDirectorySpecificAccountSubSelectorAdConnection and assigns it to the AdConnection field.
func (o *SecurityPolicyActiveDirectorySpecificAccountSubSelector) SetAdConnection(v SecurityPolicyActiveDirectorySpecificAccountSubSelectorAdConnection) *SecurityPolicyActiveDirectorySpecificAccountSubSelector {
	o.AdConnection = &v
	return o
}

func (o SecurityPolicyActiveDirectorySpecificAccountSubSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyActiveDirectorySpecificAccountSubSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["shared_account"] = o.SharedAccount
	if !IsNil(o.AdConnection) {
		toSerialize["ad_connection"] = o.AdConnection
	}
	return toSerialize, nil
}

type NullableSecurityPolicyActiveDirectorySpecificAccountSubSelector struct {
	value *SecurityPolicyActiveDirectorySpecificAccountSubSelector
	isSet bool
}

func (v NullableSecurityPolicyActiveDirectorySpecificAccountSubSelector) Get() *SecurityPolicyActiveDirectorySpecificAccountSubSelector {
	return v.value
}

func (v *NullableSecurityPolicyActiveDirectorySpecificAccountSubSelector) Set(val *SecurityPolicyActiveDirectorySpecificAccountSubSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyActiveDirectorySpecificAccountSubSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyActiveDirectorySpecificAccountSubSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyActiveDirectorySpecificAccountSubSelector(val *SecurityPolicyActiveDirectorySpecificAccountSubSelector) *NullableSecurityPolicyActiveDirectorySpecificAccountSubSelector {
	return &NullableSecurityPolicyActiveDirectorySpecificAccountSubSelector{value: val, isSet: true}
}

func (v NullableSecurityPolicyActiveDirectorySpecificAccountSubSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyActiveDirectorySpecificAccountSubSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
