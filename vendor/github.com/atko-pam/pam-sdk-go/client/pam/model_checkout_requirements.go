/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the CheckoutRequirements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckoutRequirements{}

// CheckoutRequirements Checkout requirements
type CheckoutRequirements struct {
	// Indicates if checkout is required
	Required *bool `json:"required,omitempty"`
	// The maximum duration (in seconds) that a resource can be checked out. If the security policy checkout duration configuration is overridden, the maximum duration is based on the project's checkout settings.
	MaxCheckoutDurationInSeconds *int32 `json:"max_checkout_duration_in_seconds,omitempty"`
}

// NewCheckoutRequirements instantiates a new CheckoutRequirements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutRequirements() *CheckoutRequirements {
	this := CheckoutRequirements{}
	return &this
}

// NewCheckoutRequirementsWithDefaults instantiates a new CheckoutRequirements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutRequirementsWithDefaults() *CheckoutRequirements {
	this := CheckoutRequirements{}
	return &this
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *CheckoutRequirements) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRequirements) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *CheckoutRequirements) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *CheckoutRequirements) SetRequired(v bool) *CheckoutRequirements {
	o.Required = &v
	return o
}

// GetMaxCheckoutDurationInSeconds returns the MaxCheckoutDurationInSeconds field value if set, zero value otherwise.
func (o *CheckoutRequirements) GetMaxCheckoutDurationInSeconds() int32 {
	if o == nil || IsNil(o.MaxCheckoutDurationInSeconds) {
		var ret int32
		return ret
	}
	return *o.MaxCheckoutDurationInSeconds
}

// GetMaxCheckoutDurationInSecondsOk returns a tuple with the MaxCheckoutDurationInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRequirements) GetMaxCheckoutDurationInSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxCheckoutDurationInSeconds) {
		return nil, false
	}
	return o.MaxCheckoutDurationInSeconds, true
}

// HasMaxCheckoutDurationInSeconds returns a boolean if a field has been set.
func (o *CheckoutRequirements) HasMaxCheckoutDurationInSeconds() bool {
	if o != nil && !IsNil(o.MaxCheckoutDurationInSeconds) {
		return true
	}

	return false
}

// SetMaxCheckoutDurationInSeconds gets a reference to the given int32 and assigns it to the MaxCheckoutDurationInSeconds field.
func (o *CheckoutRequirements) SetMaxCheckoutDurationInSeconds(v int32) *CheckoutRequirements {
	o.MaxCheckoutDurationInSeconds = &v
	return o
}

func (o CheckoutRequirements) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutRequirements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.MaxCheckoutDurationInSeconds) {
		toSerialize["max_checkout_duration_in_seconds"] = o.MaxCheckoutDurationInSeconds
	}
	return toSerialize, nil
}

type NullableCheckoutRequirements struct {
	value *CheckoutRequirements
	isSet bool
}

func (v NullableCheckoutRequirements) Get() *CheckoutRequirements {
	return v.value
}

func (v *NullableCheckoutRequirements) Set(val *CheckoutRequirements) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutRequirements) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutRequirements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutRequirements(val *CheckoutRequirements) *NullableCheckoutRequirements {
	return &NullableCheckoutRequirements{value: val, isSet: true}
}

func (v NullableCheckoutRequirements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutRequirements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
