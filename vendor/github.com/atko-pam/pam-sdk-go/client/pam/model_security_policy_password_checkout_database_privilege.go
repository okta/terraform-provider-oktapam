/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SecurityPolicyPasswordCheckoutDatabasePrivilege type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicyPasswordCheckoutDatabasePrivilege{}

// SecurityPolicyPasswordCheckoutDatabasePrivilege Privilege to grant access to the password associated with a database account
type SecurityPolicyPasswordCheckoutDatabasePrivilege struct {
	SecurityPolicyPrivilege
	PasswordCheckoutDatabase bool `json:"password_checkout_database"`
}

// NewSecurityPolicyPasswordCheckoutDatabasePrivilege instantiates a new SecurityPolicyPasswordCheckoutDatabasePrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicyPasswordCheckoutDatabasePrivilege(passwordCheckoutDatabase bool, type_ SecurityPolicyRulePrivilegeType) *SecurityPolicyPasswordCheckoutDatabasePrivilege {
	this := SecurityPolicyPasswordCheckoutDatabasePrivilege{}
	this.Type = type_
	this.PasswordCheckoutDatabase = passwordCheckoutDatabase
	return &this
}

// NewSecurityPolicyPasswordCheckoutDatabasePrivilegeWithDefaults instantiates a new SecurityPolicyPasswordCheckoutDatabasePrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyPasswordCheckoutDatabasePrivilegeWithDefaults() *SecurityPolicyPasswordCheckoutDatabasePrivilege {
	this := SecurityPolicyPasswordCheckoutDatabasePrivilege{}
	return &this
}

// GetPasswordCheckoutDatabase returns the PasswordCheckoutDatabase field value
func (o *SecurityPolicyPasswordCheckoutDatabasePrivilege) GetPasswordCheckoutDatabase() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PasswordCheckoutDatabase
}

// GetPasswordCheckoutDatabaseOk returns a tuple with the PasswordCheckoutDatabase field value
// and a boolean to check if the value has been set.
func (o *SecurityPolicyPasswordCheckoutDatabasePrivilege) GetPasswordCheckoutDatabaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordCheckoutDatabase, true
}

// SetPasswordCheckoutDatabase sets field value
func (o *SecurityPolicyPasswordCheckoutDatabasePrivilege) SetPasswordCheckoutDatabase(v bool) *SecurityPolicyPasswordCheckoutDatabasePrivilege {
	o.PasswordCheckoutDatabase = v
	return o
}

func (o SecurityPolicyPasswordCheckoutDatabasePrivilege) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicyPasswordCheckoutDatabasePrivilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedSecurityPolicyPrivilege, errSecurityPolicyPrivilege := json.Marshal(o.SecurityPolicyPrivilege)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	errSecurityPolicyPrivilege = json.Unmarshal([]byte(serializedSecurityPolicyPrivilege), &toSerialize)
	if errSecurityPolicyPrivilege != nil {
		return map[string]interface{}{}, errSecurityPolicyPrivilege
	}
	toSerialize["password_checkout_database"] = o.PasswordCheckoutDatabase
	return toSerialize, nil
}

type NullableSecurityPolicyPasswordCheckoutDatabasePrivilege struct {
	value *SecurityPolicyPasswordCheckoutDatabasePrivilege
	isSet bool
}

func (v NullableSecurityPolicyPasswordCheckoutDatabasePrivilege) Get() *SecurityPolicyPasswordCheckoutDatabasePrivilege {
	return v.value
}

func (v *NullableSecurityPolicyPasswordCheckoutDatabasePrivilege) Set(val *SecurityPolicyPasswordCheckoutDatabasePrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicyPasswordCheckoutDatabasePrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicyPasswordCheckoutDatabasePrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicyPasswordCheckoutDatabasePrivilege(val *SecurityPolicyPasswordCheckoutDatabasePrivilege) *NullableSecurityPolicyPasswordCheckoutDatabasePrivilege {
	return &NullableSecurityPolicyPasswordCheckoutDatabasePrivilege{value: val, isSet: true}
}

func (v NullableSecurityPolicyPasswordCheckoutDatabasePrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicyPasswordCheckoutDatabasePrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
