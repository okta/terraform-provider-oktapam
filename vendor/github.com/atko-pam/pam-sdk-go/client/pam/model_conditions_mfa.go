/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the ConditionsMFA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionsMFA{}

// ConditionsMFA Configures MFA requirements for the security policy
type ConditionsMFA struct {
	Type string `json:"_type"`
	// Defines the number of seconds an MFA verification remains valid. After this time users need to reauthenticate before they can open new connections to resources. Defining a value of `0` requires users to authenticate for every connection.
	ReAuthFrequencyInSeconds int32                   `json:"re_auth_frequency_in_seconds"`
	AcrValues                *ConditionsMFAACRValues `json:"acr_values,omitempty"`
}

// NewConditionsMFA instantiates a new ConditionsMFA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionsMFA(type_ string, reAuthFrequencyInSeconds int32) *ConditionsMFA {
	this := ConditionsMFA{}
	this.Type = type_
	this.ReAuthFrequencyInSeconds = reAuthFrequencyInSeconds
	return &this
}

// NewConditionsMFAWithDefaults instantiates a new ConditionsMFA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionsMFAWithDefaults() *ConditionsMFA {
	this := ConditionsMFA{}
	var reAuthFrequencyInSeconds int32 = 1800
	this.ReAuthFrequencyInSeconds = reAuthFrequencyInSeconds
	return &this
}

// GetType returns the Type field value
func (o *ConditionsMFA) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConditionsMFA) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConditionsMFA) SetType(v string) *ConditionsMFA {
	o.Type = v
	return o
}

// GetReAuthFrequencyInSeconds returns the ReAuthFrequencyInSeconds field value
func (o *ConditionsMFA) GetReAuthFrequencyInSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReAuthFrequencyInSeconds
}

// GetReAuthFrequencyInSecondsOk returns a tuple with the ReAuthFrequencyInSeconds field value
// and a boolean to check if the value has been set.
func (o *ConditionsMFA) GetReAuthFrequencyInSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReAuthFrequencyInSeconds, true
}

// SetReAuthFrequencyInSeconds sets field value
func (o *ConditionsMFA) SetReAuthFrequencyInSeconds(v int32) *ConditionsMFA {
	o.ReAuthFrequencyInSeconds = v
	return o
}

// GetAcrValues returns the AcrValues field value if set, zero value otherwise.
func (o *ConditionsMFA) GetAcrValues() ConditionsMFAACRValues {
	if o == nil || IsNil(o.AcrValues) {
		var ret ConditionsMFAACRValues
		return ret
	}
	return *o.AcrValues
}

// GetAcrValuesOk returns a tuple with the AcrValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionsMFA) GetAcrValuesOk() (*ConditionsMFAACRValues, bool) {
	if o == nil || IsNil(o.AcrValues) {
		return nil, false
	}
	return o.AcrValues, true
}

// HasAcrValues returns a boolean if a field has been set.
func (o *ConditionsMFA) HasAcrValues() bool {
	if o != nil && !IsNil(o.AcrValues) {
		return true
	}

	return false
}

// SetAcrValues gets a reference to the given ConditionsMFAACRValues and assigns it to the AcrValues field.
func (o *ConditionsMFA) SetAcrValues(v ConditionsMFAACRValues) *ConditionsMFA {
	o.AcrValues = &v
	return o
}

func (o ConditionsMFA) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionsMFA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_type"] = o.Type
	toSerialize["re_auth_frequency_in_seconds"] = o.ReAuthFrequencyInSeconds
	if !IsNil(o.AcrValues) {
		toSerialize["acr_values"] = o.AcrValues
	}
	return toSerialize, nil
}

type NullableConditionsMFA struct {
	value *ConditionsMFA
	isSet bool
}

func (v NullableConditionsMFA) Get() *ConditionsMFA {
	return v.value
}

func (v *NullableConditionsMFA) Set(val *ConditionsMFA) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionsMFA) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionsMFA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionsMFA(val *ConditionsMFA) *NullableConditionsMFA {
	return &NullableConditionsMFA{value: val, isSet: true}
}

func (v NullableConditionsMFA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionsMFA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
