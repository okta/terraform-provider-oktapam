/*
Okta Privileged Access

The Okta Privileged Access API is a control plane used to request operations in Okta Privileged Access (formerly ScaleFT/Advanced Server Access)

API version: 1.0.0
Contact: support@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pam

import (
	"encoding/json"
)

// checks if the SudoCommandBundleForConnectionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SudoCommandBundleForConnectionInfo{}

// SudoCommandBundleForConnectionInfo struct for SudoCommandBundleForConnectionInfo
type SudoCommandBundleForConnectionInfo struct {
	// Sudo ID
	SudoId string `json:"sudo_id"`
	// Entitlement type
	EntType string `json:"ent_type"`
	// Sudo login username
	SudoLoginUsername string `json:"sudo_login_username"`
	// Sudo group name
	SudoGroupName string `json:"sudo_group_name"`
	// Sudo name
	SudoName string `json:"sudo_name"`
	// Sudo run as
	SudoRunas string `json:"sudo_runas"`
	// If sudo can be used without password
	SudoNopasswd bool `json:"sudo_nopasswd"`
	// If sudo has `noexec` configuration set
	SudoNoexec bool `json:"sudo_noexec"`
	// If `setenv` is allowed
	SudoSetenv bool `json:"sudo_setenv"`
	// Additional environmental variables
	SudoAddEnv []string `json:"sudo_add_env,omitempty"`
	// A list of environment variables to be used to substitute your current environment
	SudoSubEnv []string `json:"sudo_sub_env,omitempty"`
	// List of sudo commands
	SudoCommands []string `json:"sudo_commands,omitempty"`
}

// NewSudoCommandBundleForConnectionInfo instantiates a new SudoCommandBundleForConnectionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSudoCommandBundleForConnectionInfo(sudoId string, entType string, sudoLoginUsername string, sudoGroupName string, sudoName string, sudoRunas string, sudoNopasswd bool, sudoNoexec bool, sudoSetenv bool) *SudoCommandBundleForConnectionInfo {
	this := SudoCommandBundleForConnectionInfo{}
	this.SudoId = sudoId
	this.EntType = entType
	this.SudoLoginUsername = sudoLoginUsername
	this.SudoGroupName = sudoGroupName
	this.SudoName = sudoName
	this.SudoRunas = sudoRunas
	this.SudoNopasswd = sudoNopasswd
	this.SudoNoexec = sudoNoexec
	this.SudoSetenv = sudoSetenv
	return &this
}

// NewSudoCommandBundleForConnectionInfoWithDefaults instantiates a new SudoCommandBundleForConnectionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSudoCommandBundleForConnectionInfoWithDefaults() *SudoCommandBundleForConnectionInfo {
	this := SudoCommandBundleForConnectionInfo{}
	return &this
}

// GetSudoId returns the SudoId field value
func (o *SudoCommandBundleForConnectionInfo) GetSudoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SudoId
}

// GetSudoIdOk returns a tuple with the SudoId field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SudoId, true
}

// SetSudoId sets field value
func (o *SudoCommandBundleForConnectionInfo) SetSudoId(v string) *SudoCommandBundleForConnectionInfo {
	o.SudoId = v
	return o
}

// GetEntType returns the EntType field value
func (o *SudoCommandBundleForConnectionInfo) GetEntType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntType
}

// GetEntTypeOk returns a tuple with the EntType field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetEntTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntType, true
}

// SetEntType sets field value
func (o *SudoCommandBundleForConnectionInfo) SetEntType(v string) *SudoCommandBundleForConnectionInfo {
	o.EntType = v
	return o
}

// GetSudoLoginUsername returns the SudoLoginUsername field value
func (o *SudoCommandBundleForConnectionInfo) GetSudoLoginUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SudoLoginUsername
}

// GetSudoLoginUsernameOk returns a tuple with the SudoLoginUsername field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoLoginUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SudoLoginUsername, true
}

// SetSudoLoginUsername sets field value
func (o *SudoCommandBundleForConnectionInfo) SetSudoLoginUsername(v string) *SudoCommandBundleForConnectionInfo {
	o.SudoLoginUsername = v
	return o
}

// GetSudoGroupName returns the SudoGroupName field value
func (o *SudoCommandBundleForConnectionInfo) GetSudoGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SudoGroupName
}

// GetSudoGroupNameOk returns a tuple with the SudoGroupName field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SudoGroupName, true
}

// SetSudoGroupName sets field value
func (o *SudoCommandBundleForConnectionInfo) SetSudoGroupName(v string) *SudoCommandBundleForConnectionInfo {
	o.SudoGroupName = v
	return o
}

// GetSudoName returns the SudoName field value
func (o *SudoCommandBundleForConnectionInfo) GetSudoName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SudoName
}

// GetSudoNameOk returns a tuple with the SudoName field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SudoName, true
}

// SetSudoName sets field value
func (o *SudoCommandBundleForConnectionInfo) SetSudoName(v string) *SudoCommandBundleForConnectionInfo {
	o.SudoName = v
	return o
}

// GetSudoRunas returns the SudoRunas field value
func (o *SudoCommandBundleForConnectionInfo) GetSudoRunas() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SudoRunas
}

// GetSudoRunasOk returns a tuple with the SudoRunas field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoRunasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SudoRunas, true
}

// SetSudoRunas sets field value
func (o *SudoCommandBundleForConnectionInfo) SetSudoRunas(v string) *SudoCommandBundleForConnectionInfo {
	o.SudoRunas = v
	return o
}

// GetSudoNopasswd returns the SudoNopasswd field value
func (o *SudoCommandBundleForConnectionInfo) GetSudoNopasswd() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SudoNopasswd
}

// GetSudoNopasswdOk returns a tuple with the SudoNopasswd field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoNopasswdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SudoNopasswd, true
}

// SetSudoNopasswd sets field value
func (o *SudoCommandBundleForConnectionInfo) SetSudoNopasswd(v bool) *SudoCommandBundleForConnectionInfo {
	o.SudoNopasswd = v
	return o
}

// GetSudoNoexec returns the SudoNoexec field value
func (o *SudoCommandBundleForConnectionInfo) GetSudoNoexec() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SudoNoexec
}

// GetSudoNoexecOk returns a tuple with the SudoNoexec field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoNoexecOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SudoNoexec, true
}

// SetSudoNoexec sets field value
func (o *SudoCommandBundleForConnectionInfo) SetSudoNoexec(v bool) *SudoCommandBundleForConnectionInfo {
	o.SudoNoexec = v
	return o
}

// GetSudoSetenv returns the SudoSetenv field value
func (o *SudoCommandBundleForConnectionInfo) GetSudoSetenv() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SudoSetenv
}

// GetSudoSetenvOk returns a tuple with the SudoSetenv field value
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoSetenvOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SudoSetenv, true
}

// SetSudoSetenv sets field value
func (o *SudoCommandBundleForConnectionInfo) SetSudoSetenv(v bool) *SudoCommandBundleForConnectionInfo {
	o.SudoSetenv = v
	return o
}

// GetSudoAddEnv returns the SudoAddEnv field value if set, zero value otherwise.
func (o *SudoCommandBundleForConnectionInfo) GetSudoAddEnv() []string {
	if o == nil || IsNil(o.SudoAddEnv) {
		var ret []string
		return ret
	}
	return o.SudoAddEnv
}

// GetSudoAddEnvOk returns a tuple with the SudoAddEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoAddEnvOk() ([]string, bool) {
	if o == nil || IsNil(o.SudoAddEnv) {
		return nil, false
	}
	return o.SudoAddEnv, true
}

// HasSudoAddEnv returns a boolean if a field has been set.
func (o *SudoCommandBundleForConnectionInfo) HasSudoAddEnv() bool {
	if o != nil && !IsNil(o.SudoAddEnv) {
		return true
	}

	return false
}

// SetSudoAddEnv gets a reference to the given []string and assigns it to the SudoAddEnv field.
func (o *SudoCommandBundleForConnectionInfo) SetSudoAddEnv(v []string) *SudoCommandBundleForConnectionInfo {
	o.SudoAddEnv = v
	return o
}

// GetSudoSubEnv returns the SudoSubEnv field value if set, zero value otherwise.
func (o *SudoCommandBundleForConnectionInfo) GetSudoSubEnv() []string {
	if o == nil || IsNil(o.SudoSubEnv) {
		var ret []string
		return ret
	}
	return o.SudoSubEnv
}

// GetSudoSubEnvOk returns a tuple with the SudoSubEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoSubEnvOk() ([]string, bool) {
	if o == nil || IsNil(o.SudoSubEnv) {
		return nil, false
	}
	return o.SudoSubEnv, true
}

// HasSudoSubEnv returns a boolean if a field has been set.
func (o *SudoCommandBundleForConnectionInfo) HasSudoSubEnv() bool {
	if o != nil && !IsNil(o.SudoSubEnv) {
		return true
	}

	return false
}

// SetSudoSubEnv gets a reference to the given []string and assigns it to the SudoSubEnv field.
func (o *SudoCommandBundleForConnectionInfo) SetSudoSubEnv(v []string) *SudoCommandBundleForConnectionInfo {
	o.SudoSubEnv = v
	return o
}

// GetSudoCommands returns the SudoCommands field value if set, zero value otherwise.
func (o *SudoCommandBundleForConnectionInfo) GetSudoCommands() []string {
	if o == nil || IsNil(o.SudoCommands) {
		var ret []string
		return ret
	}
	return o.SudoCommands
}

// GetSudoCommandsOk returns a tuple with the SudoCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SudoCommandBundleForConnectionInfo) GetSudoCommandsOk() ([]string, bool) {
	if o == nil || IsNil(o.SudoCommands) {
		return nil, false
	}
	return o.SudoCommands, true
}

// HasSudoCommands returns a boolean if a field has been set.
func (o *SudoCommandBundleForConnectionInfo) HasSudoCommands() bool {
	if o != nil && !IsNil(o.SudoCommands) {
		return true
	}

	return false
}

// SetSudoCommands gets a reference to the given []string and assigns it to the SudoCommands field.
func (o *SudoCommandBundleForConnectionInfo) SetSudoCommands(v []string) *SudoCommandBundleForConnectionInfo {
	o.SudoCommands = v
	return o
}

func (o SudoCommandBundleForConnectionInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SudoCommandBundleForConnectionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sudo_id"] = o.SudoId
	toSerialize["ent_type"] = o.EntType
	toSerialize["sudo_login_username"] = o.SudoLoginUsername
	toSerialize["sudo_group_name"] = o.SudoGroupName
	toSerialize["sudo_name"] = o.SudoName
	toSerialize["sudo_runas"] = o.SudoRunas
	toSerialize["sudo_nopasswd"] = o.SudoNopasswd
	toSerialize["sudo_noexec"] = o.SudoNoexec
	toSerialize["sudo_setenv"] = o.SudoSetenv
	if !IsNil(o.SudoAddEnv) {
		toSerialize["sudo_add_env"] = o.SudoAddEnv
	}
	if !IsNil(o.SudoSubEnv) {
		toSerialize["sudo_sub_env"] = o.SudoSubEnv
	}
	if !IsNil(o.SudoCommands) {
		toSerialize["sudo_commands"] = o.SudoCommands
	}
	return toSerialize, nil
}

type NullableSudoCommandBundleForConnectionInfo struct {
	value *SudoCommandBundleForConnectionInfo
	isSet bool
}

func (v NullableSudoCommandBundleForConnectionInfo) Get() *SudoCommandBundleForConnectionInfo {
	return v.value
}

func (v *NullableSudoCommandBundleForConnectionInfo) Set(val *SudoCommandBundleForConnectionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSudoCommandBundleForConnectionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSudoCommandBundleForConnectionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSudoCommandBundleForConnectionInfo(val *SudoCommandBundleForConnectionInfo) *NullableSudoCommandBundleForConnectionInfo {
	return &NullableSudoCommandBundleForConnectionInfo{value: val, isSet: true}
}

func (v NullableSudoCommandBundleForConnectionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSudoCommandBundleForConnectionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
